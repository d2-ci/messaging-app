{"version":3,"sources":["D2App/constants/development.js","D2App/utils/helpers.js","D2App/api/api.js","D2App/actions/index.js","D2App/constants/actions.js","D2App/styles/theme.js","D2App/components/Common/CustomSnackBar.jsx","D2App/utils/history.js","D2App/components/Attachments/Attachments.jsx","D2App/components/MessageConversation/Message.jsx","D2App/components/Attachments/AttachmentUploadButton.jsx","D2App/components/MessageConversation/ReplyCard.jsx","D2App/components/Common/SuggestionField.jsx","D2App/components/Common/ExtendedChoiceLabel.jsx","D2App/styles/messageConversationStyles.js","D2App/components/MessageConversation/MessageConversation.jsx","D2App/components/List/MessageTypeItem.jsx","D2App/components/List/SidebarList.jsx","D2App/styles/style.js","D2App/components/List/ListItemHeader.jsx","D2App/components/List/MessageConversationListItem.jsx","D2App/components/List/MessageConversationList.jsx","D2App/components/MessageConversation/CreateMessage.jsx","D2App/constants/extendedChoices.js","D2App/components/Common/AssignToDialog.jsx","D2App/components/Common/ToolbarExtendedChoicePicker.jsx","D2App/components/Common/Toolbar.jsx","D2App/components/MessagingCenter/MessagingCenter.jsx","D2App/components/App/Routes.jsx","D2App/components/App/App.jsx","D2App/constants/messageTypes.js","D2App/reducers/messageReducer.js","D2App/store.js","D2App/components/App/AddD2Context.jsx","D2App/components/App/AppWrapper.jsx"],"names":["fontFamily","findIndexOfId","list","id","len","length","index","debounce","fn","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","supportsAttachments","dhis2CoreVersion","getMessageConversations","messageType","page","messageFilter","status","priority","assignedToMeFilter","markedForFollowUpFilter","unreadFilter","filters","push","getD2Instance","then","instance","currentUser","Api","getApi","get","undefined","fields","order","filter","result","messageConversations","pager","catch","error","updateMessageConversationAssignee","messageConversationId","value","delete","post","searchRecipients","searchValue","searchOnlyUsers","searchOnlyFeedbackRecipients","feedbackRecipientsId","system","version","minor","url","pageSize","users","searchUserGroups","userGroups","searchOrganisationUnits","organisationUnits","addRecipients","addAttachment","attachment","form","FormData","append","createAttachment","downloadAttachment","messageId","attachmentId","baseUrl","link","document","createElement","href","setAttribute","body","appendChild","click","downloadBlob","createAction","type","payload","setSelectedMessageConversation","messageConversation","async","dispatch","api","loadMessageConversations","selectedMessageType","loadMore","getState","promises","state","statusFilter","priorityFilter","messaging","i","promise","Promise","all","nrOfUnread","total","reduce","accumulated","r","concat","markMessageConversations","mode","markedConversations","markedReadConversations","markedUnreadConversations","response","fileResource","name","contentLength","clearCheckedIds","clearSelectedMessageConversation","displaySnackMessage","message","onSnackActionClick","onSnackRequestClose","snackType","setFilter","filterType","updateInputFields","subject","input","recipients","clearAttachments","setSelectedMessageType","messageTypeId","removeAttachment","cancelAttachment","attachmentName","getMuiTheme","palette","negative","pinkA200","blue50","primary1Color","primary2Color","blue100","primary3Color","blue300","primary4Color","blue500","accent1Color","grey50","accent2Color","grey100","accent3Color","grey300","accent4Color","grey500","followUp","orange500","darkGray","grey700","superDarkGray","grey900","textColor","darkBlack","alternateTextColor","white","canvasColor","borderColor","clockCircleColor","fade","shadowColor","fullBlack","contentColorStyle","NEGATIVE","theme","NEUTRAL","POSITIVE","CustomSnackBar","Component","constructor","props","super","closeMessage","clearSnackMessage","setState","show","componentDidUpdate","_prevProps","prevState","render","open","autoHideDuration","onRequestClose","action","onActionClick","contentStyle","color","style","pointerEvents","whiteSpace","bodyStyle","maxWidth","compose","connect","snackMessage","pure","createHashHistory","Attachment","dataDirection","className","backgroundColor","label","parseFloat","parseInt","toFixed","labelPosition","onClick","loading","icon","Attachments","attachments","map","key","styles","canvas","padding","innerCanvas","margin","paddingBottom","cardText","wordBreak","fromFormat","datePlacement","display","justifyContent","marginRight","dateFormat","overflow","textOverflow","Message","displayTimeDiff","lastMessage","enableAttachments","fromTitle","sender","displayName","today","moment","messageDate","created","add","internal","i18n","t","placement","diff","from","format","year","paddingLeft","text","createHandleChange","event","files","target","AttachmentUploadButton","containerElement","onChange","ReplyCard","replyMessage","internalReply","selectedMessageConversation","wipeInput","inputError","texFieldUpdate","newValue","handleDiscard","discardState","expanded","componentWillUnmount","Card","marginTop","rows","underlineShow","multiLine","fullWidth","floatingLabelText","primary","disabled","isInFeedbackRecipientGroup","messageTypes","headers","SuggestionField","searchResult","lastSearch","errorText","debouncedSearch","search","bind","onSuggestionClick","chip","find","recipient","updateRecipients","onRemoveChip","updateInput","addType","internalSearchResult","searchWarning","height","inputHeight","marginBottom","openOnFocus","searchText","dataSource","dataSourceConfig","onUpdateInput","onRequestAdd","onRequestDelete","subheaderTitle","paddingRight","subheader","fontWeight","ExtendedChoiceLabel","showTitle","title","displayLabel","charAt","toLowerCase","substr","flex","overflowY","overflowX","paddingTop","flexDirection","header","iconButton","alignSelf","subjectSubheader","fontSize","participantsCanvas","participants","flexWrap","participantAddRow","participantsSuggestionField","participantsAdd","messagesCanvas","messagesInnerCanvas","NOTIFICATIONS","MessageConversation","backToList","history","cursor","componentDidMount","messages","notification","indexOf","userMessages","slice","userMessage","recipientsExpanded","user","userMessagesLength","tooltipPosition","tooltip","displayExtendedChoices","assignee","participant","limitSearchArray","MessageTypeItem","onMouseEnter","setHoverText","onMouseLeave","setNeutralText","setTextColor","getBackgroundColor","selectedValue","role","alignItems","marginLeft","size","unread","badgeContent","secondary","badgeStyle","borderLeftStyle","borderLeftWidth","borderLeftColor","borderRightStyle","borderRightWidth","borderRightColor","minWidth","SidebarList","match","params","List","width","refreshTimer","toggled","autoRefresh","onToggle","setAutoRefresh","messagePanelContainer","transition","boxSizing","position","boxShadow","borderBottom","checkBox","extendedLabel","MessageConversationListItem","allChecked","checkedIds","checked","onCheck","setAllChecked","child","messageConversationIds","container","wideview","flag","fontColor","flexBasis","textAlign","read","lastSender","x","containerBackgroundColor","innerText","settingSelectedMessageConversation","setChecked","MessageConversationList","onScroll","messageList","getElementById","isBottom","loaded","debouncedOnScroll","el","scrollHeight","scrollTop","window","outerHeight","Array","isArray","lookup","Set","item","has","dedupeById","ListItemHeader","messageTypeField","CreateMessage","subjectUpdate","inputUpdate","sendMessage","isMessageFeedback","sendFeedbackMessage","addRecipientByUserId","recipientId","discardDisabled","console","extendedChoices","STATUS","primaryText","PRIORITY","AssignToDialog","updateMessageConversations","nrSelected","ToolbarExtendedChoicePicker","getIds","updateMessageConversation","identifier","ids","toggleDialog","dialogOpen","checkedItems","assignToOpen","multiSelect","actionButtons","keyboardFocused","deleteMessageConversations","displayNumberOfCheckedIds","actions","modal","iconButtonElement","anchorOrigin","horizontal","vertical","targetOrigin","rightIcon","menuItems","elem","log","checkedOptions","zIndex","checkedOption","filterControl","rightHandCanvas","ie11Spacer","flexGrow","iconMenu","Toolbar","lastMessageFilter","prevProps","displaySearch","labelStyle","top","selectedMenuItemStyle","floatingLabelStyle","iconStyle","hintText","menuStyle","toogleWideview","EXTENDED_CHOICES","MessagingCenter","intervalId","clearInterval","setInterval","tick","refresh","selectedId","setDhis2CoreVersion","d2","initialMessageConversation","configuration","userAuthorities","symbol","authorities","Object","getOwnPropertySymbols","configurationResult","authorized","includes","group","feedbackRecipients","setIsInFeedbackRecipientGroup","setDisplayTimeDiff","drawerOpen","disableLink","contextTypes","propTypes","object","serverDate","Routes","exact","path","component","to","App","initialState","messageReducer","stateMessageTypes","oldAttachments","replaceMessageType","splice","element","selectedMessageConversations","loadingMessageType","middlewares","ReduxThunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducer","combineReducers","createStore","applyMiddleware","AddD2Context","React","getChildContext","muiTheme","children","childContextTypes","AppWrapper","useConfig","useD2","d2Config","schemas","store"],"mappings":"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","file":"static/js/app.6b41bd60.chunk.js","sourcesContent":["export const pageSize = 35;\nexport const fontFamily = 'Roboto, Helvetica, Arial, sans-serif';\nexport const NEUTRAL = 'NEUTRAL';\nexport const POSITIVE = 'POSITIVE';\nexport const NEGATIVE = 'NEGATIVE';","export function dedupeById(list) {\n  if (!Array.isArray(list)) {\n    return undefined;\n  }\n\n  const lookup = new Set();\n  return list.filter(item => {\n    if (lookup.has(item.id)) {\n      return false;\n    }\n\n    lookup.add(item.id);\n    return true;\n  });\n}\nexport function findIndexOfId(list, id) {\n  const len = list.length;\n\n  for (let index = 0; index < len; index++) {\n    if (list[index].id === id) {\n      return index;\n    }\n  }\n\n  return undefined;\n}\nexport function debounce(fn, delay) {\n  let timer = null;\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n}\nexport function supportsAttachments(dhis2CoreVersion) {\n  return dhis2CoreVersion > 30;\n}\nexport function supportsUserLookupEndPoint(dhis2CoreVersion) {\n  return dhis2CoreVersion > 34;\n}","import { getInstance as getD2Instance } from 'd2';\nimport { pageSize } from '../constants/development';\nimport { supportsUserLookupEndPoint } from '../utils/helpers.js';\nconst initialMessageConversationFields = 'id, displayName, subject, messageType, lastSender[id, displayName], assignee[id, displayName], status, priority, lastUpdated, read, lastMessage, followUp';\nconst messageConversationFields = '*,assignee[id, displayName],messages[*,sender[id,displayName],attachments[id, name, contentLength]],userMessages[user[id, displayName]]';\nconst order = 'lastMessage:desc';\nexport const getMessageConversations = ({\n  messageType,\n  page,\n  messageFilter,\n  status,\n  priority,\n  assignedToMeFilter,\n  markedForFollowUpFilter,\n  unreadFilter\n}) => {\n  const filters = [`messageType:eq:${messageType}`];\n  typeof status !== 'undefined' && filters.push(`status:eq:${status}`);\n  typeof priority !== 'undefined' && filters.push(`priority:eq:${priority}`);\n  markedForFollowUpFilter && filters.push('followUp:eq:true');\n  unreadFilter && filters.push('read:eq:false');\n  return getD2Instance().then(instance => {\n    assignedToMeFilter && filters.push(`assignee.id:eq:${instance.currentUser.id}`);\n    return instance.Api.getApi().get(`messageConversations?pageSize=${pageSize}&page=${page}${messageFilter !== '' && messageFilter !== undefined ? `&queryString=${messageFilter}` : ''}`, {\n      fields: [initialMessageConversationFields],\n      order,\n      filter: filters\n    });\n  }).then(result => ({\n    messageConversations: result.messageConversations,\n    pager: result.pager\n  })).catch(error => {\n    throw error;\n  });\n};\nexport const getMessageConversation = messageConversation => getD2Instance().then(instance => instance.Api.getApi().get(`messageConversations/${messageConversation.id}`, {\n  fields: [messageConversationFields]\n})).then(result => result).catch(error => {\n  throw error;\n});\nexport const getServerDate = () => getD2Instance().then(instance => instance.Api.getApi().get('system/info')).then(result => result.serverDate).catch(error => {\n  throw error;\n});\nexport const updateMessageConversationStatus = (messageConversationId, value) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${messageConversationId}/status?messageConversationStatus=${value}`)).then(result => result).catch(error => {\n  throw error;\n});\nexport const updateMessageConversationPriority = (messageConversationId, value) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${messageConversationId}/priority?messageConversationPriority=${value}`)).then(result => result).catch(error => {\n  throw error;\n});\nexport const updateMessageConversationAssignee = (messageConversationId, value) => getD2Instance().then(instance => value === undefined ? instance.Api.getApi().delete(`messageConversations/${messageConversationId}/assign`) : instance.Api.getApi().post(`messageConversations/${messageConversationId}/assign?userId=${value}`)).then(result => result).catch(error => {\n  throw error;\n});\nexport const updateMessageConversationFollowup = (messageConversationIds, value) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${value ? 'followup' : 'unfollowup'}`, messageConversationIds)).then(result => result).catch(error => {\n  throw error;\n});\nexport const getNrOfUnread = messageType => getD2Instance().then(instance => instance.Api.getApi().get('messageConversations', {\n  fields: 'read',\n  filter: ['read:eq:false', `messageType:eq:${messageType}`]\n})).then(result => result.pager.total).catch(error => {\n  throw error;\n});\nexport const sendMessage = ({\n  subject,\n  users,\n  userGroups,\n  organisationUnits,\n  text,\n  attachments\n}) => getD2Instance().then(instance => instance.Api.getApi().post('messageConversations', {\n  subject,\n  users,\n  userGroups,\n  organisationUnits,\n  attachments,\n  text\n})).catch(error => {\n  throw error;\n});\nexport const sendFeedbackMessage = (subject, text) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/feedback?subject=${subject}`, text, {\n  headers: {\n    'Content-Type': 'text/plain'\n  }\n})).then(result => result).catch(error => {\n  throw error;\n});\nexport const replyMessage = ({\n  message,\n  internalReply,\n  attachments,\n  id\n}) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${id}?internal=${internalReply}${attachments.length > 0 ? `&attachments=${attachments}` : ''}`, message, {\n  headers: {\n    'Content-Type': 'text/plain'\n  }\n})).catch(error => {\n  throw error;\n});\nexport const deleteMessageConversation = messageConversationId => getD2Instance().then(instance => instance.Api.getApi().delete(`messageConversations/${messageConversationId}/${instance.currentUser.id}`)).then(result => result).catch(error => {\n  throw error;\n});\nexport const markRead = markedReadConversations => getD2Instance().then(instance => instance.Api.getApi().post('messageConversations/read', markedReadConversations)).then(result => result).catch(error => {\n  throw error;\n});\nexport const markUnread = markedUnreadConversations => getD2Instance().then(instance => instance.Api.getApi().post('messageConversations/unread', markedUnreadConversations)).then(result => result).catch(error => {\n  throw error;\n});\n/* Feedback recipient query */\n\nexport const isInFeedbackRecipientGroup = () => getD2Instance().then(instance => instance.Api.getApi().get('me', {\n  fields: 'userGroups[id]'\n})).then(result => getD2Instance().then(instance => ({\n  configuration: instance.Api.getApi().get('configuration').then(configuration => configuration),\n  instance\n})).then(({\n  configuration,\n  instance\n}) => {\n  const getSymbolProperties = symbol => Array.from(symbol[Object.getOwnPropertySymbols(symbol)[0]]);\n\n  const userAuthorities = getSymbolProperties(instance.currentUser.authorities);\n  return configuration.then(configurationResult => ({\n    authorized: userAuthorities.includes('ALL') || !!result.userGroups.find(group => group.id === configurationResult.feedbackRecipients.id),\n    feedbackRecipientsId: configurationResult.feedbackRecipients.id\n  }));\n}).catch(error => {\n  throw error;\n})).catch(error => {\n  throw error;\n});\n/* Recipient search */\n\nconst MAX_RECIPIENT = 10;\n\nconst searchOrganisationUnits = searchValue => getD2Instance().then(instance => instance.Api.getApi().get('organisationUnits', {\n  fields: 'id, displayName',\n  pageSize: MAX_RECIPIENT,\n  filter: [`displayName:token:${searchValue}`, 'users:gte:1']\n})).then(result => result).catch(error => {\n  throw error;\n});\n\nconst searchUserGroups = searchValue => getD2Instance().then(instance => instance.Api.getApi().get('userGroups', {\n  fields: 'id, displayName',\n  pageSize: MAX_RECIPIENT,\n  filter: [`displayName:token:${searchValue}`]\n})).then(result => result).catch(error => {\n  throw error;\n});\n\nexport const searchRecipients = ({\n  searchValue,\n  searchOnlyUsers,\n  searchOnlyFeedbackRecipients,\n  feedbackRecipientsId\n}) => {\n  return getD2Instance().then(instance => {\n    if (supportsUserLookupEndPoint(instance.system.version.minor)) {\n      // version >= v2.35\n      const url = searchOnlyFeedbackRecipients ? 'userLookup/feedbackRecipients' : 'userLookup';\n      return instance.Api.getApi().get(`${url}?query=${searchValue}`);\n    } else {\n      // version < 2.35\n      const filters = [`displayName:token:${searchValue}`];\n\n      if (searchOnlyFeedbackRecipients) {\n        filters.push(`userGroups.id:eq:${feedbackRecipientsId}`);\n      }\n\n      return instance.Api.getApi().get('users', {\n        pageSize: MAX_RECIPIENT,\n        filter: filters\n      });\n    }\n  }).then(({\n    users\n  }) => searchOnlyUsers ? {\n    users,\n    undefined\n  } : searchUserGroups(searchValue).then(({\n    userGroups\n  }) => searchOrganisationUnits(searchValue).then(({\n    organisationUnits\n  }) => ({\n    users,\n    userGroups,\n    organisationUnits\n  })))).catch(error => {\n    throw error;\n  });\n};\nexport const fetchParticipants = messageConversationId => getD2Instance().then(instance => instance.Api.getApi().get(`messageConversations/${messageConversationId}`, {\n  fields: 'userMessages[user[id, displayName]]'\n})).then(result => result).catch(error => {\n  throw error;\n});\nexport const addRecipients = ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageConversationId\n}) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${messageConversationId}/recipients`, {\n  users,\n  userGroups,\n  organisationUnits\n})).catch(error => {\n  throw error;\n});\nexport const getUserById = id => getD2Instance().then(instance => instance.Api.getApi().get(`users/${id}`, {\n  fields: 'id,displayName'\n})).then(({\n  id,\n  displayName\n}) => ({\n  id,\n  displayName,\n  type: 'user'\n})).catch(error => {\n  throw error;\n});\nexport function createAttachment(attachment) {\n  const form = new FormData();\n  form.append('file', attachment);\n  return form;\n}\nexport const addAttachment = attachment => getD2Instance().then(instance => instance.Api.getApi().post('/fileResources?domain=MESSAGE_ATTACHMENT', createAttachment(attachment))).catch(error => {\n  throw error;\n});\nexport function downloadBlob(url) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.setAttribute('target', '_blank');\n  document.body.appendChild(link);\n  link.click();\n}\nexport const downloadAttachment = (messageConversationId, messageId, attachmentId) => getD2Instance().then(instance => {\n  const baseUrl = instance.Api.getApi().baseUrl;\n  return downloadBlob(`${baseUrl}/messageConversations/${messageConversationId}/${messageId}/attachments/${attachmentId}`);\n}).catch(error => {\n  throw error;\n});","import * as actions from '../constants/actions';\nimport log from 'loglevel';\nimport * as api from '../api/api';\nimport moment from 'moment'; // Simple hack to solve negative time difference\n\nconst FUTURE_HACK = 5000;\n\nconst createAction = (type, payload) => ({\n  type,\n  payload\n});\n/******************\n * THUNKS SECTION *\n ******************/\n\n\nexport const setDisplayTimeDiff = () => async dispatch => {\n  try {\n    const serverDate = await api.getServerDate();\n    const displayTimeDiff = moment().diff(moment(serverDate)) - FUTURE_HACK;\n    dispatch(createAction(actions.SET_DISPLAY_TIME_DIFF_SUCCESS, displayTimeDiff));\n  } catch (error) {\n    dispatch(createAction(actions.SET_DISPLAY_TIME_DIFF_ERROR, {\n      error\n    }));\n  }\n};\nexport const setSelectedMessageConversation = messageConversation => async dispatch => {\n  dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION));\n\n  try {\n    const result = await api.getMessageConversation(messageConversation);\n    dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS, {\n      messageConversation: result\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION_ERROR, {\n      error\n    }));\n  }\n};\nexport const updateMessageConversations = ({\n  messageConversationIds,\n  identifier,\n  value,\n  messageType,\n  selectedMessageConversation\n}) => async dispatch => {\n  if (identifier === 'FOLLOW_UP') {\n    try {\n      await api.updateMessageConversationFollowup(messageConversationIds, value);\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS, {\n        messageType: messageType,\n        page: 1,\n        identifier: identifier\n      }));\n      dispatch(loadMessageConversations());\n    } catch (error) {\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_ERROR, {\n        error\n      }));\n    }\n  } else {\n    const promises = messageConversationIds.map(messageConversationId => {\n      let promise;\n\n      switch (identifier) {\n        case 'STATUS':\n          promise = api.updateMessageConversationStatus(messageConversationId, value);\n          break;\n\n        case 'PRIORITY':\n          promise = api.updateMessageConversationPriority(messageConversationId, value);\n          break;\n\n        case 'ASSIGNEE':\n          if (value !== undefined && messageType.id === 'VALIDATION_RESULT') {\n            promise = api.addRecipients({\n              users: value.map(value => ({\n                id: value\n              })),\n              userGroups: [],\n              organisationUnits: [],\n              messageConversationId\n            }).then(() => api.updateMessageConversationAssignee(messageConversationId, value));\n          } else {\n            promise = api.updateMessageConversationAssignee(messageConversationId, value);\n          }\n\n          break;\n\n        default:\n          log.error('Unexpected identifier for updateMessageConversations');\n          break;\n      }\n\n      return promise;\n    });\n\n    try {\n      await Promise.all(promises);\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS, {\n        messageType: messageType,\n        page: 1,\n        identifier: identifier\n      }));\n      dispatch(loadMessageConversations());\n    } catch (error) {\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_ERROR, {\n        error\n      }));\n    }\n  }\n\n  if (selectedMessageConversation) {\n    dispatch(setSelectedMessageConversation(selectedMessageConversation));\n  }\n};\nexport const loadMessageConversations = (messageType, selectedMessageType, loadMore = false) => async (dispatch, getState) => {\n  const promises = [];\n  const state = getState();\n  const {\n    messageFilter,\n    statusFilter: status,\n    priorityFilter: priority,\n    assignedToMeFilter,\n    markedForFollowUpFilter,\n    unreadFilter\n  } = state.messaging; // Default fallback values so this action can be called without arguments\n\n  messageType = messageType || state.messaging.selectedMessageType;\n  selectedMessageType = selectedMessageType || state.messaging.selectedMessageType.id;\n  dispatch(createAction(actions.LOAD_MESSAGE_CONVERSATIONS, {\n    messageType,\n    loadMore\n  }));\n\n  try {\n    for (let i = 1; i <= messageType.page; i++) {\n      const promise = api.getMessageConversations({\n        messageType: messageType.id,\n        page: i,\n        messageFilter,\n        status,\n        priority,\n        assignedToMeFilter,\n        markedForFollowUpFilter,\n        unreadFilter\n      }).then(result => ({\n        messageConversations: result.messageConversations,\n        pager: result.pager\n      }));\n      promises.push(promise);\n    }\n\n    const result = await Promise.all(promises);\n    const nrOfUnread = await api.getNrOfUnread(messageType.id);\n    const messageConversations = result.reduce((accumulated, r) => accumulated.concat(r.messageConversations), []);\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_LOAD_SUCCESS, {\n      messageConversations,\n      pager: result[result.length - 1].pager,\n      messageType,\n      selectedMessageType,\n      nrOfUnread\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_LOAD_ERROR, {\n      error\n    }));\n  }\n};\nexport const deleteMessageConversations = (messageConversationIds, messageType) => async dispatch => {\n  try {\n    const promises = messageConversationIds.map(messageConversationId => api.deleteMessageConversation(messageConversationId));\n    await Promise.all(promises);\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_DELETE_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_DELETE_ERROR, {\n      error\n    }));\n  }\n};\nexport const sendMessage = ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageType\n}) => async (dispatch, getState) => {\n  try {\n    const {\n      messaging: {\n        subject,\n        input,\n        attachments\n      }\n    } = getState();\n    await api.sendMessage({\n      subject,\n      users,\n      userGroups,\n      organisationUnits,\n      text: input,\n      attachments\n    });\n    dispatch(createAction(actions.SEND_MESSAGE_SUCCESS, {\n      messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.SEND_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const sendFeedbackMessage = messageType => async (dispatch, getState) => {\n  const state = getState();\n\n  try {\n    await api.sendFeedbackMessage(state.messaging.subject, state.messaging.input);\n    dispatch(createAction(actions.SEND_MESSAGE_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.SEND_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const replyMessage = ({\n  message,\n  internalReply,\n  messageConversation,\n  messageType\n}) => async (dispatch, getState) => {\n  try {\n    const {\n      id\n    } = messageConversation;\n    const state = getState();\n    const attachments = state.messaging.attachments.map(attachment => attachment.id);\n    await api.replyMessage({\n      message,\n      internalReply,\n      attachments,\n      id\n    });\n    dispatch(createAction(actions.REPLY_MESSAGE_SUCCESS, {\n      messageConversation: messageConversation,\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n    dispatch(setSelectedMessageConversation(messageConversation));\n  } catch (error) {\n    dispatch(createAction(actions.REPLY_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const markMessageConversations = (mode, markedConversations, messageType) => async dispatch => {\n  try {\n    await (mode === 'read' ? api.markRead(markedConversations) : api.markUnread(markedConversations));\n    dispatch(createAction(actions.MARK_MESSAGE_CONVERSATIONS_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.MARK_MESSAGE_CONVERSATIONS_ERROR, {\n      error\n    }));\n  }\n};\nexport const addRecipients = ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageConversation,\n  messageType\n}) => async dispatch => {\n  try {\n    const {\n      id: messageConversationId\n    } = messageConversation;\n    await api.addRecipients({\n      users,\n      userGroups,\n      organisationUnits,\n      messageConversationId\n    });\n    dispatch(createAction(actions.ADD_RECIPIENTS_SUCCESS, {\n      messageConversation: messageConversation,\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(setSelectedMessageConversation(messageConversation));\n  } catch (error) {\n    dispatch(createAction(actions.ADD_RECIPIENTS_ERROR, {\n      error\n    }));\n  }\n};\nexport const addRecipientByUserId = id => async dispatch => {\n  try {\n    const user = await api.getUserById(id);\n    dispatch(createAction(actions.ADD_RECIPIENT_BY_ID_SUCCESS, user));\n  } catch (error) {\n    console.error(error); // No action required, the field will just be empty\n  }\n};\nexport const addAttachment = attachment => async dispatch => {\n  dispatch(createAction(actions.ADD_ATTACHMENT, attachment));\n\n  try {\n    const result = await api.addAttachment(attachment);\n    dispatch(createAction(actions.ADD_ATTACHMENT_SUCCESS, {\n      id: result.response.fileResource.id,\n      name: attachment.name,\n      contentLength: result.response.fileResource.contentLength\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.ADD_ATTACHMENT_ERROR, {\n      error\n    }));\n  }\n};\nexport const downloadAttachment = (messageConversationId, messageId, attachmentId) => async dispatch => {\n  try {\n    await api.downloadAttachment(messageConversationId, messageId, attachmentId);\n    dispatch(createAction(actions.DOWNLOAD_ATTACHMENT_SUCCESS));\n  } catch (error) {\n    dispatch(createAction(actions.DOWNLOAD_ATTACHMENT_ERROR, {\n      error\n    }));\n  }\n};\n/************************\n * PLAIN ACTION SECTION *\n ************************/\n\nexport const clearSnackMessage = () => createAction(actions.CLEAR_SNACK_MESSAGE);\nexport const clearCheckedIds = () => createAction(actions.CLEAR_CHECKED);\nexport const clearSelectedMessageConversation = () => createAction(actions.CLEAR_SELECTED_MESSAGE_CONVERSATION);\nexport const displaySnackMessage = ({\n  message,\n  onSnackActionClick,\n  onSnackRequestClose,\n  snackType\n}) => createAction(actions.DISPLAY_SNACK_MESSAGE, {\n  message,\n  onSnackActionClick,\n  onSnackRequestClose,\n  snackType\n});\nexport const setAllChecked = messageConversationIds => createAction(actions.SET_ALL_CHECKED, {\n  messageConversationIds\n});\nexport const setChecked = (messageConversation, selectedValue) => createAction(actions.SET_CHECKED, {\n  messageConversation,\n  selectedValue\n});\nexport const setFilter = (filter, filterType) => createAction(actions.SET_FILTER, {\n  filter,\n  filterType\n});\nexport const updateInputFields = (subject, input, recipients) => createAction(actions.UPDATE_INPUT_FIELDS, {\n  subject,\n  input,\n  recipients\n});\nexport const clearAttachments = () => createAction(actions.CLEAR_ATTACHMENTS);\nexport const setSelectedMessageType = messageTypeId => createAction(actions.SET_SELECTED_MESSAGE_TYPE, {\n  messageTypeId\n});\nexport const removeAttachment = attachmentId => createAction(actions.REMOVE_ATTACHMENT, {\n  attachmentId\n});\nexport const cancelAttachment = attachmentName => createAction(actions.CANCEL_ATTACHMENT, {\n  attachmentName\n});\nexport const setIsInFeedbackRecipientGroup = isInFeedbackRecipientGroup => createAction(actions.SET_IN_FEEDBACK_RECIPIENT_GROUP, {\n  isInFeedbackRecipientGroup\n});\nexport const setDhis2CoreVersion = version => createAction(actions.SET_DHIS2_CORE_VERSION, version);","export const LOAD_MESSAGE_CONVERSATIONS = 'LOAD_MESSAGE_CONVERSATIONS';\nexport const LOAD_MORE_MESSAGE_CONVERSATIONS = 'LOAD_MORE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATIONS_LOAD_SUCCESS = 'MESSAGE_CONVERSATIONS_LOAD_SUCCESS';\nexport const MESSAGE_CONVERSATIONS_LOAD_ERROR = 'MESSAGE_CONVERSATIONS_LOAD_ERROR';\nexport const DELETE_MESSAGE_CONVERSATIONS = 'DELETE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATIONS_DELETE_SUCCESS = 'MESSAGE_CONVERSATIONS_DELETE_SUCCESS';\nexport const MESSAGE_CONVERSATIONS_DELETE_ERROR = 'MESSAGE_CONVERSATIONS_DELETE_ERROR';\nexport const UPDATE_MESSAGE_CONVERSATIONS = 'UPDATE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATION_UPDATE_SUCCESS = 'MESSAGE_CONVERSATION_UPDATE_SUCCESS';\nexport const MESSAGE_CONVERSATION_UPDATE_ERROR = 'MESSAGE_CONVERSATION_UPDATE_ERROR';\nexport const MARK_MESSAGE_CONVERSATIONS = 'MARK_MESSAGE_CONVERSATIONS';\nexport const MARK_MESSAGE_CONVERSATIONS_SUCCESS = 'MARK_MESSAGE_CONVERSATIONS_SUCCESS';\nexport const MARK_MESSAGE_CONVERSATIONS_ERROR = 'MARK_MESSAGE_CONVERSATIONS_ERROR';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const SEND_MESSAGE_SUCCESS = 'SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_ERROR = 'SEND_MESSAGE_ERROR';\nexport const SEND_FEEDBACK_MESSAGE = 'SEND_FEEDBACK_MESSAGE';\nexport const REPLY_MESSAGE = 'REPLY_MESSAGE';\nexport const REPLY_MESSAGE_SUCCESS = 'REPLY_MESSAGE_SUCCESS';\nexport const REPLY_MESSAGE_ERROR = 'REPLY_MESSAGE_ERROR';\nexport const SET_FILTER = 'SET_FILTER';\nexport const DISPLAY_SNACK_MESSAGE = 'DISPLAY_SNACK_MESSAGE;';\nexport const CLEAR_SNACK_MESSAGE = 'CLEAR_SNACK_MESSAGE';\nexport const SET_CHECKED = 'SET_CHECKED';\nexport const SET_ALL_CHECKED = 'SET_ALL_CHECKED';\nexport const CLEAR_CHECKED = 'CLEAR_CHECKED';\nexport const SET_SELECTED_MESSAGE_TYPE = 'SET_SELECTED_MESSAGE_TYPE';\nexport const CLEAR_SELECTED_MESSAGE_CONVERSATION = 'CLEAR_SELECTED_MESSAGE_CONVERSATION';\nexport const SET_SELECTED_MESSAGE_CONVERSATION = 'SET_SELECTED_MESSAGE_CONVERSATION';\nexport const SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS = 'SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS';\nexport const SET_SELECTED_MESSAGE_CONVERSATION_ERROR = 'SET_SELECTED_MESSAGE_CONVERSATION_ERROR';\nexport const UPDATE_INPUT_FIELDS = 'UPDATE_INPUT_FIELDS';\nexport const SET_IN_FEEDBACK_RECIPIENT_GROUP = 'SET_IN_FEEDBACK_RECIPIENT_GROUP';\nexport const SET_DISPLAY_TIME_DIFF = 'SET_DISPLAY_TIME_DIFF';\nexport const SET_DISPLAY_TIME_DIFF_SUCCESS = 'SET_DISPLAY_TIME_DIFF_SUCCESS';\nexport const SET_DISPLAY_TIME_DIFF_ERROR = 'SET_DISPLAY_TIME_DIFF_ERROR';\n/* Recipient actions */\n\nexport const RECIPIENT_SEARCH = 'RECIPIENT_SEARCH';\nexport const RECIPIENT_SEARCH_SUCCESS = 'RECIPIENT_SEARCH_SUCCESS';\nexport const RECIPIENT_SEARCH_ERROR = 'RECIPIENT_SEARCH_ERROR';\nexport const ADD_RECIPIENTS = 'ADD_RECIPIENTS';\nexport const ADD_RECIPIENTS_SUCCESS = 'ADD_RECIPIENTS_SUCCESS';\nexport const ADD_RECIPIENTS_ERROR = 'ADD_RECIPIENTS_ERROR';\nexport const ADD_RECIPIENT_BY_ID_SUCCESS = 'ADD_RECIPIENT_BY_ID_SUCCESS';\n/* Attachments */\n\nexport const ADD_ATTACHMENT = 'ADD_ATTACHMENT';\nexport const ADD_ATTACHMENT_SUCCESS = 'ADD_ATTACHMENT_SUCCESS';\nexport const ADD_ATTACHMENT_ERROR = 'ADD_ATTACHMENT_ERROR';\nexport const DOWNLOAD_ATTACHMENT = 'DOWNLOAD_ATTACHMENT';\nexport const DOWNLOAD_ATTACHMENT_SUCCESS = 'DOWNLOAD_ATTACHMENT_SUCCESS';\nexport const DOWNLOAD_ATTACHMENT_ERROR = 'DOWNLOAD_ATTACHMENT_ERROR';\nexport const REMOVE_ATTACHMENT = 'REMOVE_ATTACHMENT';\nexport const CLEAR_ATTACHMENTS = 'CLEAR_ATTACHMENTS';\nexport const CANCEL_ATTACHMENT = 'CANCEL_ATTACHMENT';\n/* DHIS2 CORE VERSION */\n\nexport const SET_DHIS2_CORE_VERSION = 'SET_DHIS2_CORE_VERSION';","import getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport { fade } from 'material-ui/utils/colorManipulator';\nimport { blue50, blue100, blue300, blue500, pinkA200, grey50, grey100, grey300, grey500, grey700, grey900, orange500, white, darkBlack, fullBlack } from 'material-ui/styles/colors';\nexport default getMuiTheme({\n  palette: {\n    negative: pinkA200,\n    blue50,\n    primary1Color: '#1D8BF1',\n    primary2Color: blue100,\n    primary3Color: blue300,\n    primary4Color: blue500,\n    accent1Color: grey50,\n    accent2Color: grey100,\n    accent3Color: grey300,\n    accent4Color: grey500,\n    followUp: orange500,\n    darkGray: grey700,\n    superDarkGray: grey900,\n    textColor: darkBlack,\n    alternateTextColor: white,\n    canvasColor: white,\n    borderColor: grey300,\n    clockCircleColor: fade(darkBlack, 0.07),\n    shadowColor: fullBlack\n  }\n});","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport Snackbar from 'material-ui/Snackbar'\nimport { clearSnackMessage } from '../../actions'\nimport { compose, pure } from 'recompose'\nimport theme from '../../styles/theme'\n\nconst DEFAULT_MESSAGE_DURATION = 4000\nconst contentColorStyle = {\n    NEGATIVE: theme.palette.negative,\n    NEUTRAL: theme.palette.primary1Color,\n    POSITIVE: theme.palette.alternateTextColor,\n}\n\nclass CustomSnackBar extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            show: false,\n        }\n    }\n\n    componentDidUpdate(_prevProps, prevState) {\n        if (!prevState.show && this.props.message) {\n            this.setState({\n                show: true,\n            })\n        }\n    }\n\n    closeMessage = () => {\n        this.props.clearSnackMessage()\n        this.setState({\n            show: false,\n        })\n        this.props.onSnackRequestClose && this.props.onSnackRequestClose()\n    }\n\n    render() {\n        return (\n            <Snackbar\n                open={this.props.message !== '' && this.state.show}\n                message={this.props.message || 'Missing snackbar message'}\n                autoHideDuration={DEFAULT_MESSAGE_DURATION}\n                onRequestClose={this.closeMessage}\n                action={this.props.onSnackActionClick && 'undo'}\n                onActionClick={() => {\n                    this.props.onSnackActionClick()\n                    this.setState({\n                        show: false,\n                    })\n                }}\n                contentStyle={{ color: contentColorStyle[this.props.type] }}\n                style={{ pointerEvents: 'none', whiteSpace: 'nowrap' }}\n                bodyStyle={{ pointerEvents: 'initial', maxWidth: 'none' }}\n            />\n        )\n    }\n}\n\nCustomSnackBar.propTypes = {\n    clearSnackMessage: propTypes.func,\n    message: propTypes.string,\n    type: propTypes.oneOf(['NEGATIVE', 'NEUTRAL', 'POSITIVE']),\n    onSnackActionClick: propTypes.func,\n    onSnackRequestClose: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    message: state.messaging.snackMessage,\n    type: state.messaging.snackType,\n    onSnackActionClick: state.messaging.onSnackActionClick,\n    onSnackRequestClose: state.messaging.onSnackRequestClose,\n})\n\nexport default compose(\n    connect(mapStateToProps, {\n        clearSnackMessage,\n    }),\n    pure\n)(CustomSnackBar)\n","import { createHashHistory } from 'history';\nexport default createHashHistory();","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport FlatButton from 'material-ui/FlatButton'\nimport LinearProgress from 'material-ui/LinearProgress'\nimport Clear from 'material-ui-icons/Clear'\nimport Download from 'material-ui-icons/CloudDownload'\nimport theme from '../../styles/theme'\nimport './Attachments.css'\n\nconst Attachments = ({\n    dataDirection,\n    attachments,\n    style,\n    removeAttachment,\n    downloadAttachment,\n    cancelAttachment,\n}) => (\n    <div className=\"attachment\" style={{ ...style }}>\n        {attachments.map((attachment, index) => (\n            <Attachment\n                // combining name with index prevents errors when user uploads files with duplicate names\n                key={`${attachment.name}-${index}`}\n                dataDirection={dataDirection}\n                attachment={attachment}\n                removeAttachment={removeAttachment}\n                downloadAttachment={downloadAttachment}\n                cancelAttachment={cancelAttachment}\n            />\n        ))}\n    </div>\n)\n\nAttachments.propTypes = {\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    dataDirection: propTypes.string,\n    downloadAttachment: propTypes.func,\n    removeAttachment: propTypes.func,\n    style: propTypes.object,\n}\n\nconst Attachment = ({\n    dataDirection,\n    attachment,\n    removeAttachment,\n    downloadAttachment,\n    cancelAttachment,\n}) => {\n    return (\n        <FlatButton\n            className=\"attachment__button\"\n            backgroundColor={theme.palette.accent2Color}\n            label={`${attachment.name} (${parseFloat(\n                parseInt(attachment.contentLength, 10) / 1000000\n            ).toFixed(2)} MB)`}\n            labelPosition=\"after\"\n            onClick={() => {\n                dataDirection === 'download'\n                    ? downloadAttachment(attachment)\n                    : attachment.loading\n                    ? cancelAttachment(attachment.name)\n                    : removeAttachment(attachment)\n            }}\n            icon={dataDirection === 'download' ? <Download /> : <Clear />}\n        >\n            {attachment.loading && (\n                <LinearProgress\n                    className={'attachment__progress'}\n                    mode=\"indeterminate\"\n                />\n            )}\n        </FlatButton>\n    )\n}\n\nAttachment.propTypes = {\n    attachment: propTypes.object,\n    cancelAttachment: propTypes.func,\n    dataDirection: propTypes.string,\n    downloadAttachment: propTypes.func,\n    removeAttachment: propTypes.func,\n}\n\nexport default Attachments\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport Divider from 'material-ui/Divider'\nimport CardText from 'material-ui/Card/CardText'\nimport Attachments from '../Attachments/Attachments'\nimport i18n from '@dhis2/d2-i18n'\nimport Linkify from 'react-linkify'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\nimport moment from 'moment'\n\nconst styles = {\n    canvas(backgroundColor) {\n        return {\n            backgroundColor,\n            padding: '16px 16px 16px 16px',\n        }\n    },\n    innerCanvas: {\n        margin: '',\n        paddingBottom: '0px',\n    },\n    cardText: {\n        padding: '16px 0px 16px 0px',\n        fontFamily,\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word',\n    },\n    fromFormat: {\n        fontFamily,\n    },\n    datePlacement: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: '10px',\n    },\n    dateFormat: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        fontFamily,\n    },\n}\n\nconst Message = ({\n    displayTimeDiff,\n    message,\n    currentUser,\n    lastMessage,\n    downloadAttachment,\n    cancelAttachment,\n    enableAttachments,\n}) => {\n    const fromTitle = message.sender\n        ? currentUser && currentUser.id === message.sender.id\n            ? 'me'\n            : message.sender.displayName\n        : 'system'\n    const today = moment()\n    const messageDate = moment(message.created).add(displayTimeDiff)\n\n    return (\n        <div style={styles.canvas(theme.palette.canvasColor)}>\n            <div style={styles.innerCanvas}>\n                <div style={styles.fromFormat}>\n                    {message.internal\n                        ? i18n.t(`Internal message from ${fromTitle}`)\n                        : i18n.t(`Message from ${fromTitle}`)}\n                </div>\n\n                <div placement={'bottom'} style={styles.datePlacement}>\n                    <div style={styles.dateFormat}>\n                        {today.diff(messageDate, 'hours') < 72\n                            ? `${messageDate.from(today)}, ${messageDate.format(\n                                  'HH:mm'\n                              )}`\n                            : today.year() === messageDate.year()\n                            ? messageDate.format('MMM DD, HH:mm')\n                            : messageDate.format('MMM DD, YYYY HH:mm')}\n                    </div>\n                </div>\n\n                {enableAttachments && (\n                    <Attachments\n                        dataDirection={'download'}\n                        style={{ paddingLeft: 0 }}\n                        attachments={message.attachments}\n                        downloadAttachment={downloadAttachment}\n                        cancelAttachment={cancelAttachment}\n                    />\n                )}\n\n                <CardText style={styles.cardText}>\n                    <Linkify>{message.text}</Linkify>\n                </CardText>\n            </div>\n            {!lastMessage && <Divider />}\n        </div>\n    )\n}\n\nMessage.propTypes = {\n    cancelAttachment: propTypes.func,\n    currentUser: propTypes.object,\n    displayTimeDiff: propTypes.number,\n    downloadAttachment: propTypes.func,\n    enableAttachments: propTypes.bool,\n    lastMessage: propTypes.bool,\n    message: propTypes.object,\n}\n\nexport default Message\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport FlatButton from 'material-ui/FlatButton'\nimport AttachFile from 'material-ui-icons/AttachFile'\nimport i18n from '@dhis2/d2-i18n'\nimport './AttachmentUploadButton.css'\n\nconst createHandleChange = addAttachment => event => {\n    const files = event.target.files\n    const hasFile = files.length > 0\n\n    if (hasFile) {\n        addAttachment(files[0])\n    }\n}\n\nconst AttachmentUploadButton = ({ addAttachment }) => (\n    <FlatButton\n        className=\"attachment__upload-button\"\n        label={i18n.t('Upload attachment')}\n        labelPosition=\"after\"\n        containerElement=\"label\"\n        icon={<AttachFile />}\n    >\n        <input\n            className=\"attachment__upload-button--input\"\n            type=\"file\"\n            onChange={createHandleChange(addAttachment)}\n        />\n    </FlatButton>\n)\n\nAttachmentUploadButton.propTypes = {\n    addAttachment: propTypes.func,\n}\n\nexport default AttachmentUploadButton\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Card, CardActions, CardText } from 'material-ui/Card'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport TextField from 'material-ui/TextField'\nimport AttachmentUploadButton from '../Attachments/AttachmentUploadButton'\nimport Attachments from '../Attachments/Attachments'\nimport { supportsAttachments } from '../../utils/helpers'\nimport i18n from '@dhis2/d2-i18n'\nimport {\n    replyMessage,\n    setSelectedMessageType,\n    updateInputFields,\n    displaySnackMessage,\n    addAttachment,\n    removeAttachment,\n    cancelAttachment,\n} from '../../actions'\nimport { NEGATIVE } from '../../constants/development'\n\nclass ReplyCard extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            discardState: false,\n        }\n    }\n\n    componentWillUnmount() {\n        this.wipeInput()\n    }\n\n    replyMessage = internalReply => {\n        const {\n            input: message,\n            selectedMessageConversation: messageConversation,\n            selectedMessageType: messageType,\n        } = this.props\n\n        this.props.replyMessage({\n            message,\n            internalReply,\n            messageConversation,\n            messageType,\n        })\n\n        this.wipeInput()\n    }\n\n    wipeInput = () => {\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n        this.setState({\n            inputError: false,\n        })\n    }\n\n    texFieldUpdate = (event, newValue) => {\n        this.props.updateInputFields('', newValue, [])\n    }\n\n    handleDiscard = () => {\n        const message = i18n.t('Reply discarded')\n        const snackType = NEGATIVE\n        const onSnackActionClick = () => this.setState({ discardState: false })\n        const onSnackRequestClose = () => {\n            this.setState({ discardState: false })\n            this.wipeInput()\n        }\n\n        this.setState({ discardState: true })\n        this.props.displaySnackMessage({\n            message,\n            onSnackActionClick,\n            onSnackRequestClose,\n            snackType,\n        })\n        this.setState({\n            expanded: false,\n        })\n    }\n\n    render() {\n        return (\n            <Card style={{ marginTop: '5px' }} expanded>\n                <CardText style={{ padding: '0px 0px 0px 16px' }}>\n                    <TextField\n                        key={this.props.messageConversation.id}\n                        id={this.props.messageConversation.id}\n                        rows={5}\n                        underlineShow={false}\n                        value={this.state.discardState ? '' : this.props.input}\n                        multiLine\n                        fullWidth\n                        floatingLabelText={i18n.t('Message')}\n                        onChange={this.texFieldUpdate}\n                    />\n                    {this.props.enableAttachments &&\n                        !this.state.discardState && (\n                            <Attachments\n                                dataDirection={'upload'}\n                                attachments={this.props.attachments}\n                                removeAttachment={attachment =>\n                                    this.props.removeAttachment(attachment.id)\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                            />\n                        )}\n\n                    <CardActions style={{ paddingLeft: '0px' }}>\n                        <RaisedButton\n                            primary\n                            label={i18n.t('Reply')}\n                            disabled={\n                                this.props.input === '' ||\n                                this.state.discardState\n                            }\n                            onClick={() => this.replyMessage(false)}\n                        />\n                        {this.props.isInFeedbackRecipientGroup &&\n                            this.props.selectedMessageType.id === 'TICKET' && (\n                                <FlatButton\n                                    primary\n                                    label={i18n.t('Internal reply')}\n                                    disabled={\n                                        this.props.input === '' ||\n                                        this.state.discardState\n                                    }\n                                    onClick={() => this.replyMessage(true)}\n                                />\n                            )}\n                        <FlatButton\n                            label={i18n.t('Discard')}\n                            disabled={\n                                this.props.input === '' ||\n                                this.state.discardState\n                            }\n                            onClick={this.handleDiscard}\n                        />\n                        {this.props.enableAttachments && (\n                            <AttachmentUploadButton\n                                addAttachment={attachment => {\n                                    this.props.addAttachment(attachment)\n                                }}\n                            />\n                        )}\n                        )\n                    </CardActions>\n                </CardText>\n            </Card>\n        )\n    }\n}\n\nReplyCard.propTypes = {\n    addAttachment: propTypes.func,\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    clearAttachments: propTypes.func,\n    displaySnackMessage: propTypes.func,\n    enableAttachments: propTypes.bool,\n    input: propTypes.string,\n    isInFeedbackRecipientGroup: propTypes.bool,\n    messageConversation: propTypes.object,\n    removeAttachment: propTypes.func,\n    replyMessage: propTypes.func,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n    messageTypes: state.messaging.messageTypes,\n    input: state.messaging.input,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n    attachments: state.messaging.attachments,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            replyMessage,\n            setSelectedMessageType,\n            updateInputFields,\n            displaySnackMessage,\n            addAttachment,\n            removeAttachment,\n            cancelAttachment,\n        },\n        null,\n        { pure: false }\n    )\n)(ReplyCard)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport ChipInput from 'material-ui-chip-input'\nimport { debounce } from '../../utils/helpers'\nimport i18n from '@dhis2/d2-i18n'\nimport * as api from '../../api/api'\n\nconst searchDelay = 300\nconst minCharLength = 2\n\n/*\n * An AutoComplete text field with suggestions from a given list of\n * identifiable objects. Selected objects are shown as chips in the text field.\n */\n\nclass SuggestionField extends Component {\n    state = {\n        input: '',\n        searchResult: [],\n        searchOnlyUsers: this.props.searchOnlyUsers,\n        searchOnlyFeedbackRecipients: this.props.searchOnlyFeedbackRecipients,\n        lastSearch: '',\n        errorText: undefined,\n    }\n\n    debouncedSearch = debounce(this.search.bind(this), searchDelay)\n\n    search(input) {\n        const doSearch =\n            !this.state.searchResult.find(\n                result => result.displayName === input\n            ) &&\n            input !== '' &&\n            input.length >= minCharLength\n\n        if (doSearch) {\n            const {\n                feedbackRecipientsId,\n                searchOnlyUsers,\n                searchOnlyFeedbackRecipients,\n            } = this.props\n\n            api.searchRecipients({\n                searchValue: input,\n                searchOnlyUsers,\n                searchOnlyFeedbackRecipients,\n                feedbackRecipientsId,\n            }).then(({ users, userGroups, organisationUnits }) => {\n                const addType = type => result => ({ ...result, type })\n                let internalSearchResult = users.map(addType('user'))\n\n                if (!this.state.searchOnlyUsers) {\n                    internalSearchResult = internalSearchResult\n                        .concat(userGroups.map(addType('userGroup')))\n                        .concat(\n                            organisationUnits.map(addType('organisationUnit'))\n                        )\n                }\n\n                this.setState({\n                    searchResult: internalSearchResult,\n                    errorText:\n                        internalSearchResult.length === 0\n                            ? i18n.t('No results found')\n                            : undefined,\n                })\n            })\n        } else {\n            this.setState({\n                lastSearch: input,\n                searchResult:\n                    (this.state.lastSearch !== '' && input === '') ||\n                    input.length < minCharLength\n                        ? []\n                        : this.state.searchResult,\n                errorText:\n                    input !== '' && input.length < minCharLength\n                        ? i18n.t(\n                              `Please enter at least ${minCharLength} characters`\n                          )\n                        : this.state.searchWarning,\n            })\n        }\n    }\n\n    onSuggestionClick = chip => {\n        if (this.props.onSuggestionClick !== undefined) {\n            this.props.onSuggestionClick(chip)\n        } else {\n            this.wipeInput()\n            this.debouncedSearch('')\n\n            const doInsert = !this.props.recipients.find(\n                recipient => recipient.id === chip.id\n            )\n\n            doInsert &&\n                this.props.updateRecipients([\n                    ...this.props.recipients,\n                    this.state.searchResult.find(\n                        result => result.id === chip.id\n                    ),\n                ])\n        }\n    }\n\n    onRemoveChip = id => {\n        this.props.updateRecipients(\n            this.props.recipients.filter(recipient => recipient.id !== id)\n        )\n    }\n\n    wipeInput = () => {\n        this.setState({\n            input: '',\n            searchResult: [],\n        })\n    }\n\n    updateInput = input => {\n        this.debouncedSearch(input)\n        this.setState({\n            input,\n        })\n    }\n\n    render() {\n        return (\n            <div\n                style={{ ...this.props.style, height: this.props.inputHeight }}\n            >\n                <ChipInput\n                    style={{ marginBottom: 16 }}\n                    disabled={\n                        this.props.disabled === undefined\n                            ? false\n                            : this.props.disabled\n                    }\n                    errorText={this.props.errorText || this.state.errorText}\n                    value={this.props.recipients}\n                    fullWidth\n                    openOnFocus\n                    searchText={this.state.input}\n                    floatingLabelText={this.props.label}\n                    dataSource={this.state.searchResult}\n                    dataSourceConfig={{ text: 'displayName', value: 'id' }}\n                    onUpdateInput={this.updateInput}\n                    onRequestAdd={chip => this.onSuggestionClick(chip)}\n                    onRequestDelete={id => this.onRemoveChip(id)}\n                />\n            </div>\n        )\n    }\n}\n\nSuggestionField.propTypes = {\n    disabled: propTypes.bool,\n    errorText: propTypes.string,\n    feedbackRecipientsId: propTypes.string,\n    inputHeight: propTypes.string,\n    label: propTypes.string,\n    recipients: propTypes.array,\n    searchOnlyFeedbackRecipients: propTypes.bool,\n    searchOnlyUsers: propTypes.bool,\n    style: propTypes.object,\n    updateRecipients: propTypes.func,\n    onSuggestionClick: propTypes.func,\n}\n\nexport default SuggestionField\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport Subheader from 'material-ui/Subheader/Subheader'\n\nconst styles = {\n    subheaderTitle: {\n        height: '32px',\n        color: 'black',\n        paddingLeft: 0,\n        paddingRight: 16,\n    },\n    subheader(color, fontWeight) {\n        return {\n            height: '32px',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            padding: 0,\n            color,\n            fontWeight,\n        }\n    },\n}\n\nconst ExtendedChoiceLabel = ({\n    showTitle,\n    title,\n    label,\n    color,\n    fontWeight,\n}) => {\n    const displayLabel =\n        label && label !== 'NONE'\n            ? title === 'Assignee'\n                ? label\n                : `${label.charAt(0)}${label\n                      .toLowerCase()\n                      .substr(1, label.length)}`\n            : '-'\n\n    return (\n        <div style={{ flex: 2, paddingLeft: 10, maxWidth: 200 }}>\n            {showTitle && (\n                <Subheader style={styles.subheaderTitle}> {title} </Subheader>\n            )}\n            <Subheader style={styles.subheader(color, fontWeight)}>\n                {displayLabel}\n            </Subheader>\n        </div>\n    )\n}\n\nExtendedChoiceLabel.propTypes = {\n    color: propTypes.string,\n    fontWeight: propTypes.string,\n    label: propTypes.string,\n    showTitle: propTypes.bool,\n    title: propTypes.string,\n}\n\nexport default ExtendedChoiceLabel\n","import theme from '../styles/theme';\nimport { fontFamily } from '../constants/development';\nexport const styles = {\n  canvas: {\n    flex: '3 0',\n    overflowY: 'scroll',\n    overflowX: 'hidden',\n    height: 'calc(100vh - 110px)',\n    paddingTop: '10px'\n  },\n  innerCanvas: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0px 10px 0px 10px'\n  },\n  header: {\n    display: 'flex'\n  },\n  iconButton: {\n    display: 'flex',\n    alignSelf: 'center'\n  },\n  subjectSubheader: {\n    display: 'flex',\n    alignSelf: 'center',\n    fontSize: '20px',\n    fontFamily\n  },\n  participantsCanvas: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  participants: {\n    paddingLeft: '12px',\n    paddingTop: '10px',\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  chip: {\n    height: '32px',\n    marginRight: '3px',\n    marginBottom: '3px'\n  },\n  participantAddRow: {\n    display: 'flex'\n  },\n  participantsSuggestionField: {\n    paddingLeft: '12px',\n    marginBottom: '0px',\n    flex: 1\n  },\n  participantsAdd: {\n    alignSelf: 'flex-end',\n    marginBottom: '28px',\n    paddingLeft: '12px'\n  },\n  messagesCanvas: {\n    marginBottom: '50px',\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.accent2Color,\n    margin: '0px 10px 10px 10px'\n  },\n  messagesInnerCanvas: {\n    padding: '0px'\n  }\n};\nexport default styles;","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\n\nimport history from '../../utils/history'\nimport {\n    addRecipients,\n    downloadAttachment,\n    cancelAttachment,\n    clearSelectedMessageConversation,\n} from '../../actions'\nimport { supportsAttachments } from '../../utils/helpers'\n\nimport { getInstance as getD2Instance } from 'd2'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport AddIcon from 'material-ui-icons/Add'\nimport NavigationBack from 'material-ui-icons/ArrowBack'\nimport FlatButton from 'material-ui/FlatButton'\nimport IconButton from 'material-ui/IconButton'\nimport Chip from 'material-ui/Chip'\nimport Paper from 'material-ui/Paper'\nimport i18n from '@dhis2/d2-i18n'\nimport Message from './Message'\nimport ReplyCard from './ReplyCard'\nimport SuggestionField from '../Common/SuggestionField'\nimport ExtendedChoiceLabel from '../Common/ExtendedChoiceLabel'\nimport { styles } from '../../styles/messageConversationStyles'\nimport theme from '../../styles/theme'\n\nconst NOTIFICATIONS = ['TICKET', 'VALIDATION_RESULT']\nconst maxParticipantsDisplay = 30\n\nclass MessageConversation extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            recipients: [],\n            currentUser: undefined,\n            cursor: 'auto',\n        }\n    }\n\n    componentDidMount() {\n        getD2Instance().then(instance => {\n            this.setState({\n                currentUser: instance.currentUser,\n            })\n        })\n    }\n\n    backToList = () => {\n        const {\n            clearSelectedMessageConversation,\n            messageConversation,\n        } = this.props\n        history.push(`/${messageConversation.messageType}`)\n        clearSelectedMessageConversation()\n    }\n\n    addRecipients = () => {\n        const users = this.state.recipients.filter(r => r.type === 'user')\n        const userGroups = this.state.recipients.filter(\n            r => r.type === 'userGroup'\n        )\n        const organisationUnits = this.state.recipients.filter(\n            r => r.type === 'organisationUnit'\n        )\n        const {\n            messageConversation,\n            selectedMessageType: messageType,\n        } = this.props\n\n        this.props.addRecipients({\n            users,\n            userGroups,\n            organisationUnits,\n            messageConversation,\n            messageType,\n        })\n\n        this.setState({\n            recipients: [],\n        })\n    }\n\n    updateRecipients = recipients => {\n        this.setState({\n            recipients,\n        })\n    }\n\n    render() {\n        const { messageConversation } = this.props\n        const messages = messageConversation.messages\n        const notification = !!(\n            NOTIFICATIONS.indexOf(messageConversation.messageType) + 1\n        )\n        const participants = messageConversation.userMessages\n            .slice(0, maxParticipantsDisplay)\n            .map(userMessage =>\n                typeof this.state.currentUser === 'undefined' ||\n                this.state.recipientsExpanded ||\n                this.state.currentUser.id !== userMessage.user.id\n                    ? userMessage.user.displayName\n                    : i18n.t('me')\n            )\n        const userMessagesLength = messageConversation.userMessages.length\n\n        if (userMessagesLength > maxParticipantsDisplay) {\n            participants.push(\n                ' + '.concat(userMessagesLength - maxParticipantsDisplay)\n            )\n        }\n\n        return (\n            <div id=\"messageconversation\" style={styles.canvas}>\n                <div style={styles.innerCanvas}>\n                    <div style={styles.header}>\n                        <IconButton\n                            style={styles.iconButton}\n                            tooltipPosition=\"bottom-right\"\n                            onClick={this.backToList}\n                            tooltip={i18n.t('Show all messages')}\n                        >\n                            <NavigationBack />\n                        </IconButton>\n                        <Subheader style={styles.subjectSubheader}>\n                            {messageConversation.subject}\n                        </Subheader>\n                        {this.props.displayExtendedChoices && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Status')}\n                                label={messageConversation.status}\n                            />\n                        )}\n                        {this.props.displayExtendedChoices && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Priority')}\n                                label={messageConversation.priority}\n                            />\n                        )}\n                        {notification && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Assignee')}\n                                label={\n                                    messageConversation.assignee\n                                        ? messageConversation.assignee\n                                              .displayName\n                                        : undefined\n                                }\n                            />\n                        )}\n                    </div>\n                    <div style={styles.participantsCanvas}>\n                        <Subheader\n                            style={{\n                                paddingLeft: '12px',\n                                paddingTop: '10px',\n                            }}\n                        >\n                            {i18n.t('Participants')}\n                        </Subheader>\n                        <div style={styles.participants}>\n                            {participants.map(participant => (\n                                <Chip key={participant} style={styles.chip}>\n                                    {participant}\n                                </Chip>\n                            ))}\n                        </div>\n                    </div>\n                    <div style={styles.participantAddRow}>\n                        <SuggestionField\n                            style={styles.participantsSuggestionField}\n                            label={i18n.t('Add participants to conversation')}\n                            messageConversation={messageConversation}\n                            recipients={this.state.recipients}\n                            updateRecipients={this.updateRecipients}\n                            limitSearchArray={messageConversation.userMessages}\n                        />\n                        <div style={styles.participantsAdd}>\n                            <FlatButton\n                                icon={<AddIcon />}\n                                onClick={() => this.addRecipients()}\n                                label={i18n.t('Add')}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div style={styles.messagesCanvas}>\n                    <Paper style={styles.messagesInnerCanvas}>\n                        {messages.map((message, i) => (\n                            <Message\n                                key={message.id}\n                                displayTimeDiff={this.props.displayTimeDiff}\n                                message={message}\n                                messageConversation={messageConversation}\n                                notification={notification}\n                                currentUser={this.state.currentUser}\n                                lastMessage={i + 1 === messages.length}\n                                downloadAttachment={attachment =>\n                                    this.props.downloadAttachment(\n                                        messageConversation.id,\n                                        message.id,\n                                        attachment.id\n                                    )\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                                enableAttachments={this.props.enableAttachments}\n                            />\n                        ))}\n                    </Paper>\n                    <ReplyCard\n                        {...this.props}\n                        messageConversation={messageConversation}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nMessageConversation.propTypes = {\n    addRecipients: propTypes.func,\n    cancelAttachment: propTypes.func,\n    clearSelectedMessageConversation: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    displayTimeDiff: propTypes.number,\n    downloadAttachment: propTypes.func,\n    enableAttachments: propTypes.bool,\n    messageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageType: state.messaging.selectedMessageType,\n    displayTimeDiff: state.messaging.displayTimeDiff,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            addRecipients,\n            downloadAttachment,\n            cancelAttachment,\n            clearSelectedMessageConversation,\n        },\n        null,\n        { pure: false }\n    )\n)(MessageConversation)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\n\nimport CircularProgress from 'material-ui/CircularProgress'\nimport Badge from 'material-ui/Badge'\nimport Subheader from 'material-ui/Subheader/Subheader'\n\nimport i18n from '@dhis2/d2-i18n'\n\nimport theme from '../../styles/theme'\n\nclass MessageTypeItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            backgroundColor: theme.palette.accent2Color,\n            textColor: theme.palette.darkGray,\n        }\n    }\n\n    onClick = () => {\n        this.props.onClick()\n    }\n\n    onMouseEnter = () => {\n        this.setHoverText()\n        this.setState({ cursor: 'pointer' })\n    }\n    onMouseLeave = () => {\n        this.setNeutralText()\n        this.setState({ cursor: 'auto' })\n    }\n\n    setNeutralText = () => this.setTextColor(theme.palette.accent2Color)\n    setHoverText = () => this.setTextColor(theme.palette.accent3Color)\n\n    setTextColor = color => {\n        this.setState({\n            backgroundColor: color,\n        })\n    }\n\n    getBackgroundColor = (selectedValue, id) =>\n        selectedValue && id === selectedValue.id\n            ? theme.palette.accent3Color\n            : this.state.backgroundColor\n\n    render() {\n        return (\n            <div\n                role=\"presentation\"\n                style={{\n                    ...this.state,\n                    backgroundColor: this.getBackgroundColor(\n                        this.props.selectedMessageType,\n                        this.props.messageType.id\n                    ),\n                    cursor: this.state.cursor,\n                    alignItems: 'center',\n                    height: '49px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-between',\n                }}\n                onMouseEnter={this.onMouseEnter}\n                onMouseLeave={this.onMouseLeave}\n                onClick={() => this.onClick()}\n            >\n                <Subheader\n                    style={{\n                        marginLeft: '5px',\n                        fontSize:\n                            this.props.selectedMessageType &&\n                            this.props.messageType.id ===\n                                this.props.selectedMessageType.id\n                                ? '18px'\n                                : '16px',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        color:\n                            this.props.selectedMessageType &&\n                            this.props.messageType.id ===\n                                this.props.selectedMessageType.id\n                                ? theme.palette.primary1Color\n                                : this.state.textColor,\n                    }}\n                >\n                    {i18n.t(this.props.messageType.displayName)}\n                </Subheader>\n                {this.props.loading ? (\n                    <CircularProgress\n                        style={{ marginRight: '10px' }}\n                        color={theme.palette.primary1Color}\n                        size={24}\n                    />\n                ) : (\n                    this.props.messageType.unread > 0 && (\n                        <Badge\n                            style={{ marginTop: '12px', marginRight: '5px' }}\n                            badgeContent={\n                                this.props.messageType.unread > 100\n                                    ? '99+'\n                                    : this.props.messageType.unread\n                            }\n                            secondary\n                            badgeStyle={{ backgroundColor: '#439E8E' }}\n                        />\n                    )\n                )}\n            </div>\n        )\n    }\n}\n\nMessageTypeItem.propTypes = {\n    loading: propTypes.bool,\n    messageType: propTypes.object,\n    selectedMessageType: propTypes.object,\n    onClick: propTypes.func,\n}\n\nexport default MessageTypeItem\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { List } from 'material-ui/List'\nimport Divider from 'material-ui/Divider'\nimport Toggle from 'material-ui/Toggle'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport { setSelectedMessageType, clearCheckedIds } from '../../actions'\nimport MessageTypeItem from './MessageTypeItem'\nimport theme from '../../styles/theme'\nimport moment from 'moment'\n\nconst styles = {\n    canvas: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: 'calc(100vh - 95px)',\n        borderLeftStyle: 'solid',\n        borderLeftWidth: '0.5px',\n        borderLeftColor: theme.palette.accent4Color,\n        borderRightStyle: 'solid',\n        borderRightWidth: '1px',\n        borderRightColor: theme.palette.accent4Color,\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        minWidth: '200px',\n    },\n}\n\nclass SidebarList extends Component {\n    constructor(props) {\n        super(props)\n        this.props.setSelectedMessageType(this.props.match.params.messageType)\n    }\n\n    render() {\n        const messageTypes = this.props.messageTypes\n\n        return (\n            <div style={styles.canvas}>\n                <List\n                    style={{\n                        padding: '0px',\n                    }}\n                >\n                    {messageTypes &&\n                        messageTypes.map(messageType => (\n                            <div key={messageType.id}>\n                                <MessageTypeItem\n                                    messageType={messageType}\n                                    onClick={() => {\n                                        this.props.setSelectedMessageType(\n                                            messageType.id\n                                        )\n                                        this.props.updateInputFields('', '', [])\n                                        this.props.attachments.length > 0 &&\n                                            this.props.clearAttachments()\n                                        history.push(`/${messageType.id}`)\n                                    }}\n                                    selectedMessageType={\n                                        this.props.selectedMessageType\n                                    }\n                                    loading={messageType.loading}\n                                />\n                                <Divider />\n                            </div>\n                        ))}\n                </List>\n                <Toggle\n                    style={{ width: '', margin: '20px' }}\n                    label={`${i18n.t('Auto refresh')} (${moment(\n                        this.props.refreshTimer\n                    ).format('mm:ss')})`}\n                    toggled={this.props.autoRefresh}\n                    onToggle={() =>\n                        this.props.setAutoRefresh(!this.props.autoRefresh)\n                    }\n                />\n            </div>\n        )\n    }\n}\n\nSidebarList.propTypes = {\n    attachments: propTypes.array,\n    autoRefresh: propTypes.bool,\n    clearAttachments: propTypes.func,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    refreshTimer: propTypes.number,\n    selectedMessageType: propTypes.object,\n    setAutoRefresh: propTypes.func,\n    setSelectedMessageType: propTypes.func,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageType: state.messaging.selectedMessageType,\n    messageTypes: state.messaging.messageTypes,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            setSelectedMessageType,\n            clearCheckedIds,\n        },\n        null,\n        { pure: false }\n    )\n)(SidebarList)\n","import theme from '../styles/theme';\nexport const messagePanelContainer = {\n  overflowY: 'scroll',\n  overflowX: 'hidden',\n  borderRightWidth: '1px',\n  borderRightColor: theme.palette.accent4Color,\n  height: 'calc(100vh - 95px)'\n};\nexport const subheader = {\n  paddingLeft: '0px',\n  fontSize: '20px'\n};","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport Checkbox from 'material-ui/Checkbox'\nimport Paper from 'material-ui/Paper'\nimport i18n from '@dhis2/d2-i18n'\nimport { setAllChecked, clearCheckedIds } from '../../actions'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\n\nconst fontSize = '16px'\n\nconst styles = {\n    canvas(backgroundColor) {\n        return {\n            backgroundColor,\n            display: 'flex',\n            transition: 'all 0.2s ease-in-out',\n            boxSizing: 'border-box',\n            position: 'relative',\n            whiteSpace: 'nowrap',\n            alignSelf: 'center',\n            boxShadow: 'none',\n            borderBottom: '1px solid #dfdfdf',\n        }\n    },\n    checkBox: {\n        flex: '0 0 32px',\n        display: 'flex',\n        alignSelf: 'center',\n        paddingLeft: '12px',\n    },\n    sender: {\n        fontFamily,\n        fontSize,\n        flex: 3,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        color: 'black',\n        paddingLeft: 10,\n        alignSelf: 'center',\n    },\n    subject: {\n        flex: 8,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        fontFamily,\n        fontSize,\n        color: 'black',\n        paddingLeft: 10,\n    },\n    extendedLabel: {\n        flex: 2,\n        color: 'black',\n        fontSize,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        padding: '0 0 0 10px',\n    },\n}\n\nclass MessageConversationListItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            cursor: 'auto',\n            allChecked: false,\n        }\n    }\n\n    componentDidUpdate() {\n        if (\n            this.state.allChecked &&\n            this.props.checkedIds.length < this.props.messages.length\n        ) {\n            this.setState({ allChecked: false })\n        }\n    }\n\n    render() {\n        const displayExtendedChoices = this.props.displayExtendedChoices\n\n        return (\n            <Paper style={styles.canvas(theme.palette.canvasColor)}>\n                <Checkbox\n                    checked={this.state.allChecked}\n                    style={styles.checkBox}\n                    onCheck={() => {\n                        this.state.allChecked\n                            ? this.props.clearCheckedIds()\n                            : this.props.setAllChecked(\n                                  this.props.messages.map(child => ({\n                                      id: child.id,\n                                  }))\n                              )\n\n                        this.setState({ allChecked: !this.state.allChecked })\n                    }}\n                />\n                <div style={styles.sender}>{i18n.t('Sender')}</div>\n                <Subheader style={styles.subject}>\n                    {i18n.t('Subject')}\n                </Subheader>\n                {displayExtendedChoices && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Status')}\n                    </Subheader>\n                )}\n                {displayExtendedChoices && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Priority')}\n                    </Subheader>\n                )}\n                {this.props.notification && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Assignee')}\n                    </Subheader>\n                )}\n                <Subheader style={styles.extendedLabel}>\n                    {i18n.t('Date')}\n                </Subheader>\n            </Paper>\n        )\n    }\n}\n\nMessageConversationListItem.propTypes = {\n    checkedIds: propTypes.array,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    messages: propTypes.array,\n    notification: propTypes.bool,\n    setAllChecked: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    checkedIds: state.messaging.checkedIds,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n})\n\nexport default compose(\n    connect(mapStateToProps, {\n        setAllChecked,\n        clearCheckedIds,\n    })\n)(MessageConversationListItem)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport Checkbox from 'material-ui/Checkbox'\nimport Paper from 'material-ui/Paper'\nimport Flag from 'material-ui-icons/Flag'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport {\n    setChecked,\n    setSelectedMessageConversation,\n    markMessageConversations,\n    clearCheckedIds,\n    setFilter,\n    updateInputFields,\n    clearAttachments,\n} from '../../actions'\nimport ExtendedChoiceLabel from '../Common/ExtendedChoiceLabel'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\nimport moment from 'moment'\n\nconst styles = {\n    container(backgroundColor, wideview, cursor) {\n        return {\n            backgroundColor,\n            display: 'flex',\n            transition: 'all 0.2s ease-in-out',\n            cursor: cursor,\n            boxSizing: 'border-box',\n            position: 'relative',\n            whiteSpace: 'nowrap',\n            boxShadow: 'none',\n            borderBottom: '1px solid #dfdfdf',\n            flexWrap: wideview ? 'nowrap' : 'wrap',\n        }\n    },\n    checkBox(wideview) {\n        return {\n            flex: '0 0 32px',\n            display: 'flex',\n            alignSelf: 'center',\n            paddingLeft: wideview ? 12 : 6,\n        }\n    },\n    flag: {\n        color: theme.palette.followUp,\n        marginRight: 4,\n    },\n    sender(wideview, fontWeight) {\n        return {\n            fontFamily,\n            fontSize: '14px',\n            flex: 3,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            display: 'flex',\n            alignItems: 'center',\n            color: 'black',\n            paddingLeft: wideview ? 10 : 0,\n            fontWeight,\n        }\n    },\n    subject(wideview, fontColor, fontWeight) {\n        return {\n            flex: 8,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            paddingLeft: 10,\n            fontFamily,\n            color: fontColor,\n            fontWeight,\n            order: wideview ? 'inherit' : 10,\n            marginTop: wideview ? 0 : -10,\n            flexBasis: wideview ? '0%' : '100%',\n        }\n    },\n    dateFormat(wideview, fontColor, fontWeight) {\n        return {\n            flex: 2,\n            fontFamily,\n            paddingLeft: wideview ? 10 : 0,\n            paddingRight: wideview ? 0 : 10,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            textAlign: wideview ? '' : 'end',\n            color: fontColor,\n            fontWeight,\n        }\n    },\n}\n\nclass MessageConversationListItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            backgroundColor: theme.palette.canvasColor,\n            cursor: 'auto',\n        }\n    }\n\n    onClick = messageConversation => {\n        this.props.setSelectedMessageConversation(messageConversation)\n        if (messageConversation && !messageConversation.read) {\n            this.props.markMessageConversations(\n                'read',\n                [messageConversation.id],\n                this.props.selectedMessageType\n            )\n        }\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n        history.push(\n            `/${messageConversation.messageType}/${messageConversation.id}`\n        )\n    }\n\n    onMouseEnter = () =>\n        this.setState({\n            cursor: 'pointer',\n            backgroundColor: theme.palette.accent2Color,\n        })\n    onMouseLeave = () =>\n        this.setState({\n            cursor: 'auto',\n            backgroundColor: theme.palette.canvasColor,\n        })\n\n    getBackgroundColor = (messageConversation, checked) => {\n        const selectedMessageConversation =\n            this.props.selectedMessageConversation &&\n            messageConversation.id === this.props.selectedMessageConversation.id\n\n        if (checked && !selectedMessageConversation) {\n            return theme.palette.blue50\n        } else if (selectedMessageConversation) {\n            return theme.palette.accent3Color\n        }\n        return this.state.backgroundColor\n    }\n\n    render() {\n        const messageConversation = this.props.messageConversation\n        const title = messageConversation.lastSender\n            ? messageConversation.lastSender.displayName\n            : this.props.selectedMessageType.displayName\n        const checked = !!this.props.checkedIds.find(\n            x => x.id === messageConversation.id\n        )\n\n        const displayExtendedChoices = this.props.displayExtendedChoices\n\n        const displayTimeDiff = this.props.displayTimeDiff\n\n        const today = moment()\n        const messageDate = moment(messageConversation.lastMessage).add(\n            displayTimeDiff\n        )\n        const fontWeight = !messageConversation.read ? 'bold' : ''\n        const fontColor = this.props.messageConversation.read\n            ? 'black'\n            : theme.palette.darkGray\n\n        const containerBackgroundColor = this.getBackgroundColor(\n            messageConversation,\n            checked\n        )\n\n        return (\n            <Paper\n                style={styles.container(\n                    containerBackgroundColor,\n                    this.props.wideview,\n                    this.state.cursor\n                )}\n                onClick={event => {\n                    const onClick =\n                        event.target.innerText !== undefined &&\n                        event.target.innerText !== ''\n\n                    if (\n                        onClick &&\n                        !this.props.settingSelectedMessageConversation\n                    ) {\n                        this.onClick(messageConversation)\n                        this.props.checkedIds.length > 0 &&\n                            this.props.clearCheckedIds()\n                        if (\n                            this.props.wideview &&\n                            (this.props.messageFilter !== undefined ||\n                                this.props.priorityFilter !== undefined ||\n                                this.props.statusFilter !== undefined)\n                        ) {\n                            this.props.setFilter(undefined, 'MESSAGE')\n                        }\n                    }\n                }}\n                onMouseEnter={this.onMouseEnter}\n                onMouseLeave={this.onMouseLeave}\n            >\n                <Checkbox\n                    checked={checked}\n                    style={styles.checkBox(this.props.wideview)}\n                    onCheck={() => {\n                        this.props.setChecked(messageConversation, !checked)\n                    }}\n                />\n                <div style={styles.sender(this.props.wideview, fontWeight)}>\n                    {messageConversation.followUp && (\n                        <Flag style={styles.flag} />\n                    )}\n                    <span>{title}</span>\n                </div>\n                <Subheader\n                    style={styles.subject(\n                        this.props.wideview,\n                        fontColor,\n                        fontWeight\n                    )}\n                >\n                    {messageConversation.subject}\n                </Subheader>\n                {displayExtendedChoices && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Status')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={messageConversation.status}\n                    />\n                )}\n                {displayExtendedChoices && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Priority')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={messageConversation.priority}\n                    />\n                )}\n                {this.props.notification && this.props.wideview && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Assignee')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={\n                            messageConversation.assignee\n                                ? messageConversation.assignee.displayName\n                                : undefined\n                        }\n                    />\n                )}\n                <Subheader\n                    style={styles.dateFormat(\n                        this.props.wideview,\n                        fontColor,\n                        fontWeight\n                    )}\n                >\n                    {today.diff(messageDate, 'hours') < 72\n                        ? messageDate.from(today)\n                        : today.year() === messageDate.year()\n                        ? messageDate.format('MMM DD')\n                        : messageDate.format('ll')}\n                </Subheader>\n            </Paper>\n        )\n    }\n}\n\nMessageConversationListItem.propTypes = {\n    attachments: propTypes.array,\n    checkedIds: propTypes.array,\n    clearAttachments: propTypes.func,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    displayTimeDiff: propTypes.number,\n    markMessageConversations: propTypes.func,\n    messageConversation: propTypes.object,\n    messageFilter: propTypes.string,\n    notification: propTypes.bool,\n    priorityFilter: propTypes.string,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setChecked: propTypes.func,\n    setFilter: propTypes.func,\n    setSelectedMessageConversation: propTypes.func,\n    settingSelectedMessageConversation: propTypes.bool,\n    statusFilter: propTypes.string,\n    updateInputFields: propTypes.func,\n    wideview: propTypes.bool,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    settingSelectedMessageConversation:\n        state.messaging.settingSelectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n    checkedIds: state.messaging.checkedIds,\n    displayTimeDiff: state.messaging.displayTimeDiff,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    attachments: state.messaging.attachments,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            setChecked,\n            setSelectedMessageConversation,\n            markMessageConversations,\n            clearCheckedIds,\n            setFilter,\n            updateInputFields,\n            clearAttachments,\n        },\n        null,\n        { pure: false }\n    )\n)(MessageConversationListItem)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport CircularProgress from 'material-ui/CircularProgress'\nimport i18n from '@dhis2/d2-i18n'\nimport { loadMessageConversations } from '../../actions'\nimport { messagePanelContainer } from '../../styles/style'\nimport theme from '../../styles/theme'\nimport ListItemHeader from './ListItemHeader'\nimport MessageConversationListItem from './MessageConversationListItem'\nimport { dedupeById, debounce } from '../../utils/helpers'\n\nconst NOTIFICATIONS = ['VALIDATION_RESULT', 'TICKET']\nconst bottomEmptyHeight = 50\n\nconst styles = {\n    canvas(wideview) {\n        return {\n            flex: '1 0',\n            maxWidth: wideview ? 'none' : '350px',\n            minWidth: wideview ? 'none' : '250px',\n            borderRightStyle: wideview ? '' : 'solid',\n            ...messagePanelContainer,\n        }\n    },\n    loading: {\n        backgroundColor: theme.palette.accent2Color,\n        height: `${bottomEmptyHeight}px`,\n        transition: 'all 0.2s ease-in-out',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n}\n\nclass MessageConversationList extends Component {\n    onScroll = messageType => {\n        const messageList = document.getElementById('messagelist')\n        if (\n            !this.props.selectedMessageType.loading &&\n            this.isBottom(messageList) &&\n            messageType.loaded < messageType.total\n        ) {\n            this.props.loadMessageConversations(\n                messageType,\n                messageType.id,\n                true\n            )\n        }\n    }\n\n    debouncedOnScroll = debounce(this.onScroll, 150)\n    isBottom = el => el.scrollHeight - el.scrollTop < window.outerHeight\n\n    render() {\n        const messages = dedupeById(\n            this.props.messageConversations[this.props.selectedMessageType.id]\n        )\n\n        const messageType = this.props.selectedMessageType\n            ? this.props.selectedMessageType\n            : ''\n        const selectedValue = this.props.selectedMessageConversation\n            ? this.props.selectedMessageConversation.id\n            : ''\n\n        const notification = !!(NOTIFICATIONS.indexOf(messageType.id) + 1)\n        return (\n            <div\n                id={'messagelist'}\n                onScroll={() =>\n                    this.debouncedOnScroll(this.props.selectedMessageType)\n                }\n                style={styles.canvas(this.props.wideview)}\n            >\n                {this.props.wideview && (\n                    <ListItemHeader\n                        notification={notification}\n                        displayExtendedChoices={\n                            this.props.displayExtendedChoices\n                        }\n                        messages={messages}\n                    />\n                )}\n                {messages && messages.length !== 0\n                    ? messages.map(child => (\n                          <MessageConversationListItem\n                              key={child.id}\n                              messageConversation={child}\n                              wideview={this.props.wideview}\n                              selectedValue={selectedValue}\n                              notification={notification}\n                              displayExtendedChoices={\n                                  this.props.displayExtendedChoices\n                              }\n                          />\n                      ))\n                    : !this.props.selectedMessageType.loading && (\n                          <Subheader>\n                              {i18n.t(\n                                  `No ${messageType.displayName.toLowerCase()} messages`\n                              )}\n                          </Subheader>\n                      )}\n                {this.props.selectedMessageType.loading && (\n                    <div style={styles.loading}>\n                        <CircularProgress\n                            style={{ marginTop: '10px' }}\n                            color={theme.palette.primary1Color}\n                        />\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nMessageConversationList.propTypes = {\n    displayExtendedChoices: propTypes.bool,\n    loadMessageConversations: propTypes.func,\n    messageConversations: propTypes.object,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.shape({\n        id: propTypes.string,\n        loading: propTypes.bool,\n    }),\n    wideview: propTypes.bool,\n}\n\nconst mapStateToProps = state => ({\n    messageTypes: state.messaging.messageTypes,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    messageConversations: state.messaging.messageConversations,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            loadMessageConversations,\n        },\n        null,\n        { pure: false }\n    )\n)(MessageConversationList)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport i18n from '@dhis2/d2-i18n'\nimport { Card, CardActions, CardText } from 'material-ui/Card'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport TextField from 'material-ui/TextField'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport RadioButton from 'material-ui/RadioButton'\nimport {\n    sendMessage,\n    sendFeedbackMessage,\n    displaySnackMessage,\n    updateInputFields,\n    addAttachment,\n    removeAttachment,\n    cancelAttachment,\n    addRecipientByUserId,\n} from '../../actions'\nimport history from '../../utils/history'\nimport { supportsAttachments } from '../../utils/helpers'\nimport SuggestionField from '../Common/SuggestionField'\nimport AttachmentUploadButton from '../Attachments/AttachmentUploadButton'\nimport { NEGATIVE } from '../../constants/development'\nimport Attachments from '../Attachments/Attachments'\nimport { subheader } from '../../styles/style'\n\nconst styles = {\n    canvas: {\n        flex: '3 0',\n        margin: '10px',\n        overflowY: 'scroll',\n        overflowX: 'hidden',\n        height: 'calc(100vh - 110px)',\n    },\n    messageTypeField: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    messageType: { width: '300px', marginTop: '10px' },\n}\n\nclass CreateMessage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            isMessageFeedback: false,\n        }\n    }\n\n    componentDidMount() {\n        const { addRecipientByUserId } = this.props\n        const { messageId, recipientId } = this.props.match.params\n\n        if (messageId === 'create' && recipientId) {\n            addRecipientByUserId(recipientId)\n        }\n    }\n\n    subjectUpdate = (event, newValue) => {\n        this.props.updateInputFields(\n            newValue,\n            this.props.input,\n            this.props.recipients\n        )\n    }\n\n    inputUpdate = (event, newValue) => {\n        this.props.updateInputFields(\n            this.props.subject,\n            newValue,\n            this.props.recipients\n        )\n    }\n\n    updateRecipients = recipients => {\n        this.props.updateInputFields(\n            this.props.subject,\n            this.props.input,\n            recipients\n        )\n    }\n\n    sendMessage = () => {\n        const messageTypeId = this.state.isMessageFeedback\n            ? 'TICKET'\n            : 'PRIVATE'\n        const messageType = this.props.messageTypes.find(\n            messageType => messageType.id === messageTypeId\n        )\n\n        if (this.state.isMessageFeedback) {\n            this.props.sendFeedbackMessage(messageType)\n            history.push('/TICKET')\n        } else {\n            const users = this.props.recipients.filter(r => r.type === 'user')\n            const userGroups = this.props.recipients.filter(\n                r => r.type === 'userGroup'\n            )\n            const organisationUnits = this.props.recipients.filter(\n                r => r.type === 'organisationUnit'\n            )\n\n            this.props.sendMessage({\n                users,\n                userGroups,\n                organisationUnits,\n                messageType,\n            })\n            history.push('/PRIVATE')\n        }\n    }\n\n    wipeInput = () => {\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n    }\n\n    handleDiscard = () => {\n        const message = i18n.t('Message discarded')\n        const snackType = NEGATIVE\n        const onSnackActionClick = () => history.push('/PRIVATE/create')\n        const onSnackRequestClose = () => this.wipeInput()\n\n        this.props.displaySnackMessage({\n            message,\n            onSnackActionClick,\n            onSnackRequestClose,\n            snackType,\n        })\n\n        history.push('/PRIVATE')\n    }\n\n    render() {\n        const disabled =\n            this.props.subject === '' ||\n            this.props.input === '' ||\n            (!this.state.isMessageFeedback &&\n                this.props.recipients.length === 0)\n\n        const discardDisabled =\n            this.props.subject === '' &&\n            this.props.input === '' &&\n            !this.state.isMessageFeedback &&\n            this.props.recipients.length === 0\n\n        return (\n            <div style={styles.canvas}>\n                <Subheader style={subheader}> {i18n.t('Create')}</Subheader>\n                <Card>\n                    <CardText>\n                        <SuggestionField\n                            style={{ margin: '0px' }}\n                            label={i18n.t('To')}\n                            disabled={this.state.isMessageFeedback}\n                            recipients={\n                                this.state.isMessageFeedback\n                                    ? [\n                                          {\n                                              id: 'id',\n                                              displayName: i18n.t(\n                                                  'Feedback recipient group'\n                                              ),\n                                          },\n                                      ]\n                                    : this.props.recipients\n                            }\n                            updateRecipients={this.updateRecipients}\n                            inputHeight={'100px'}\n                        />\n                        <div style={styles.messageTypeField}>\n                            <div style={styles.messageType}>\n                                <RadioButton\n                                    label={i18n.t('Private message')}\n                                    checked={!this.state.isMessageFeedback}\n                                    onCheck={() => {\n                                        this.setState({\n                                            isMessageFeedback: !this.state\n                                                .isMessageFeedback,\n                                        })\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.messageType}>\n                                <RadioButton\n                                    label={i18n.t('Feedback message')}\n                                    checked={this.state.isMessageFeedback}\n                                    onCheck={() => {\n                                        this.setState({\n                                            isMessageFeedback: !this.state\n                                                .isMessageFeedback,\n                                        })\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <TextField\n                            floatingLabelText={i18n.t('Subject')}\n                            fullWidth\n                            value={this.props.subject}\n                            onChange={this.subjectUpdate}\n                        />\n                        <TextField\n                            key={'createMessage'}\n                            id={'createMessage'}\n                            rows={5}\n                            underlineShow={false}\n                            value={this.props.input}\n                            multiLine\n                            fullWidth\n                            floatingLabelText={i18n.t('Message')}\n                            onChange={this.inputUpdate}\n                        />\n                        {this.props.enableAttachments && (\n                            <Attachments\n                                dataDirection={'upload'}\n                                attachments={this.props.attachments}\n                                removeAttachment={attachment =>\n                                    this.props.removeAttachment(attachment.id)\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                            />\n                        )}\n                        <CardActions style={{ paddingLeft: '0px' }}>\n                            <RaisedButton\n                                primary\n                                disabled={disabled}\n                                label={i18n.t('Send')}\n                                onClick={() => this.sendMessage()}\n                            />\n                            <FlatButton\n                                label={i18n.t('Discard')}\n                                disabled={discardDisabled}\n                                onClick={this.handleDiscard}\n                            />\n                            {this.props.enableAttachments && (\n                                <AttachmentUploadButton\n                                    addAttachment={attachment => {\n                                        this.props.addAttachment(attachment)\n                                    }}\n                                />\n                            )}\n                        </CardActions>\n                    </CardText>\n                </Card>\n            </div>\n        )\n    }\n}\n\nCreateMessage.propTypes = {\n    addAttachment: propTypes.func,\n    addRecipientByUserId: propTypes.func,\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    clearAttachments: propTypes.func,\n    displaySnackMessage: propTypes.func,\n    enableAttachments: propTypes.bool,\n    input: propTypes.string,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    recipients: propTypes.array,\n    removeAttachment: propTypes.func,\n    sendFeedbackMessage: propTypes.func,\n    sendMessage: propTypes.func,\n    subject: propTypes.string,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    messageTypes: state.messaging.messageTypes,\n    subject: state.messaging.subject,\n    input: state.messaging.input,\n    recipients: state.messaging.recipients,\n    attachments: state.messaging.attachments,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            sendMessage,\n            sendFeedbackMessage,\n            displaySnackMessage,\n            updateInputFields,\n            addAttachment,\n            removeAttachment,\n            cancelAttachment,\n            addRecipientByUserId,\n        },\n        null,\n        { pure: false }\n    )\n)(CreateMessage)\n","import i18n from '@dhis2/d2-i18n';\nconst extendedChoices = {\n  STATUS: [{\n    key: 'NONE',\n    value: 'NONE',\n    primaryText: i18n.t('No status')\n  }, {\n    key: 'OPEN',\n    value: 'OPEN',\n    primaryText: i18n.t('Open')\n  }, {\n    key: 'PENDING',\n    value: 'PENDING',\n    primaryText: i18n.t('Pending')\n  }, {\n    key: 'INVALID',\n    value: 'INVALID',\n    primaryText: i18n.t('Invalid')\n  }, {\n    key: 'SOLVED',\n    value: 'SOLVED',\n    primaryText: i18n.t('Solved')\n  }],\n  PRIORITY: [{\n    key: 'NONE',\n    value: 'NONE',\n    primaryText: i18n.t('No priority')\n  }, {\n    key: 'HIGH',\n    value: 'HIGH',\n    primaryText: i18n.t('High')\n  }, {\n    key: 'MEDIUM',\n    value: 'MEDIUM',\n    primaryText: i18n.t('Medium')\n  }, {\n    key: 'LOW',\n    value: 'LOW',\n    primaryText: i18n.t('Low')\n  }]\n};\nexport default extendedChoices;","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport Dialog from 'material-ui/Dialog'\nimport i18n from '@dhis2/d2-i18n'\nimport SuggestionField from './SuggestionField'\n\nconst AssignToDialog = ({\n    open,\n    onRequestClose,\n    updateMessageConversations,\n    messageType,\n    feedbackRecipientsId,\n}) => (\n    <Dialog\n        open={open}\n        onRequestClose={() => {\n            onRequestClose()\n        }}\n    >\n        <SuggestionField\n            onSuggestionClick={chip => {\n                updateMessageConversations([chip.id])\n                onRequestClose()\n            }}\n            searchOnlyUsers\n            searchOnlyFeedbackRecipients={messageType.id === 'TICKET'}\n            feedbackRecipientsId={feedbackRecipientsId}\n            recipients={[]}\n            key={'suggestionField'}\n            label={i18n.t('Assignee')}\n        />\n    </Dialog>\n)\n\nAssignToDialog.propTypes = {\n    feedbackRecipientsId: propTypes.string,\n    messageType: propTypes.shape({ id: propTypes.string }),\n    open: propTypes.bool,\n    updateMessageConversations: propTypes.func,\n    onRequestClose: propTypes.func,\n}\n\nexport default AssignToDialog\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport FlatButton from 'material-ui/FlatButton'\nimport Dialog from 'material-ui/Dialog'\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert'\nimport ArrowDropRight from 'material-ui/svg-icons/navigation-arrow-drop-right'\nimport Assignment from 'material-ui-icons/Assignment'\nimport IconMenu from 'material-ui/IconMenu'\nimport MenuItem from 'material-ui/MenuItem'\nimport IconButton from 'material-ui/IconButton'\nimport Subheader from 'material-ui/Subheader'\nimport Divider from 'material-ui/Divider'\nimport Delete from 'material-ui-icons/Delete'\nimport MarkUnread from 'material-ui-icons/Markunread'\nimport Done from 'material-ui-icons/Done'\nimport i18n from '@dhis2/d2-i18n'\nimport {\n    clearCheckedIds,\n    clearSelectedMessageConversation,\n    deleteMessageConversations,\n    updateMessageConversations,\n    markMessageConversations,\n} from '../../actions'\nimport extendedChoices from '../../constants/extendedChoices'\nimport history from '../../utils/history'\nimport AssignToDialog from './AssignToDialog'\n\nconst multiSelectDisplayLimit = 99\n\nconst styles = {\n    canvas: {\n        width: '400px',\n        display: 'flex',\n    },\n    extendedChoices: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n    },\n    nrSelected: {\n        padding: '0px 0px',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n}\n\nclass ToolbarExtendedChoicePicker extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            checkedItems: false,\n            dialogOpen: false,\n            assignToOpen: false,\n        }\n    }\n\n    getIds = () =>\n        this.props.selectedMessageConversation &&\n        this.props.checkedIds.length === 0\n            ? [this.props.selectedMessageConversation.id]\n            : this.props.checkedIds.map(id => id.id)\n\n    updateMessageConversation = (identifier, value) => {\n        const {\n            selectedMessageType: messageType,\n            selectedMessageConversation,\n        } = this.props\n        const messageConversationIds = this.getIds()\n\n        this.props.updateMessageConversations({\n            messageConversationIds,\n            identifier,\n            value,\n            messageType,\n            selectedMessageConversation,\n        })\n        this.props.checkedIds.length > 0 && this.props.clearCheckedIds()\n    }\n\n    markMessageConversations = mode => {\n        const ids = this.getIds()\n        this.props.markMessageConversations(\n            mode,\n            ids,\n            this.props.selectedMessageType\n        )\n        this.props.checkedIds.length > 0 && this.props.clearCheckedIds()\n    }\n\n    toggleDialog = () => {\n        this.setState({ dialogOpen: !this.state.dialogOpen })\n    }\n\n    render() {\n        const messageConversation = this.props.selectedMessageConversation\n        const multiSelect = this.props.checkedIds.length > 0\n        const display = multiSelect || messageConversation !== undefined\n\n        const actionButtons = (\n            <>\n                <FlatButton\n                    label={i18n.t('Cancel')}\n                    primary\n                    onClick={() => this.toggleDialog()}\n                />\n                <FlatButton\n                    label={i18n.t('Submit')}\n                    primary\n                    keyboardFocused\n                    onClick={() => {\n                        this.props.deleteMessageConversations(\n                            this.getIds(),\n                            this.props.selectedMessageType\n                        )\n                        this.props.clearCheckedIds()\n                        this.toggleDialog()\n\n                        if (this.props.selectedMessageConversation) {\n                            this.props.clearSelectedMessageConversation()\n                            history.push(\n                                `/${this.props.selectedMessageType.id}`\n                            )\n                        }\n                    }}\n                />\n            </>\n        )\n\n        const displayNumberOfCheckedIds =\n            this.props.checkedIds.length > multiSelectDisplayLimit\n                ? `${multiSelectDisplayLimit}+`\n                : this.props.checkedIds.length\n\n        return display ? (\n            <div style={styles.canvas}>\n                <Dialog\n                    title={i18n.t(\n                        'Are you sure you want to delete selected message conversation(s)?'\n                    )}\n                    actions={actionButtons}\n                    modal={false}\n                    open={this.state.dialogOpen}\n                    onRequestClose={this.toggleDialog}\n                />\n                <AssignToDialog\n                    open={this.state.assignToOpen}\n                    onRequestClose={() =>\n                        this.setState({\n                            assignToOpen: !this.state.assignToOpen,\n                        })\n                    }\n                    updateMessageConversations={id =>\n                        this.updateMessageConversation('ASSIGNEE', id)\n                    }\n                    messageType={this.props.selectedMessageType}\n                    feedbackRecipientsId={this.props.feedbackRecipientsId}\n                />\n\n                <div style={styles.extendedChoices}>\n                    <IconButton\n                        tooltip={i18n.t('Delete selected')}\n                        onClick={() => {\n                            this.toggleDialog()\n                        }}\n                    >\n                        <Delete />\n                    </IconButton>\n\n                    <IconButton\n                        tooltip={i18n.t('Mark selected as unread')}\n                        onClick={() => {\n                            this.markMessageConversations('unread')\n                        }}\n                    >\n                        <MarkUnread />\n                    </IconButton>\n\n                    <IconButton\n                        tooltip={i18n.t('Mark selected as read')}\n                        onClick={() => {\n                            this.markMessageConversations('read')\n                        }}\n                    >\n                        <Done />\n                    </IconButton>\n                    {this.props.displayExtendedChoices && (\n                        <IconButton\n                            onClick={() =>\n                                this.setState({\n                                    assignToOpen: !this.state.assignToOpen,\n                                })\n                            }\n                            tooltip={i18n.t('Assign selected')}\n                        >\n                            <Assignment />\n                        </IconButton>\n                    )}\n                    {\n                        <IconMenu\n                            iconButtonElement={\n                                <IconButton>\n                                    <MoreVertIcon />\n                                </IconButton>\n                            }\n                            anchorOrigin={{\n                                horizontal: 'left',\n                                vertical: 'top',\n                            }}\n                            targetOrigin={{\n                                horizontal: 'left',\n                                vertical: 'top',\n                            }}\n                        >\n                            <MenuItem\n                                key={'markFollowUp'}\n                                value={'markFollowUp'}\n                                primaryText={i18n.t('Mark for followup')}\n                                onClick={() =>\n                                    this.updateMessageConversation(\n                                        'FOLLOW_UP',\n                                        true\n                                    )\n                                }\n                            />\n                            <MenuItem\n                                key={'clearFollowUp'}\n                                value={'clearFollowUp'}\n                                primaryText={i18n.t('Clear followup')}\n                                onClick={() =>\n                                    this.updateMessageConversation(\n                                        'FOLLOW_UP',\n                                        false\n                                    )\n                                }\n                            />\n                            {this.props.displayExtendedChoices && <Divider />}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    key={'clearAssigned'}\n                                    value={'clearAssigned'}\n                                    primaryText={i18n.t('Clear assignee')}\n                                    onClick={() =>\n                                        this.updateMessageConversation(\n                                            'ASSIGNEE',\n                                            undefined\n                                        )\n                                    }\n                                />\n                            )}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    primaryText={i18n.t('Set status')}\n                                    key={'setStatus'}\n                                    rightIcon={<ArrowDropRight />}\n                                    menuItems={extendedChoices.STATUS.map(\n                                        elem => (\n                                            <MenuItem\n                                                key={`${elem.key}_status`}\n                                                value={elem.value}\n                                                primaryText={elem.primaryText}\n                                                onClick={() =>\n                                                    this.updateMessageConversation(\n                                                        'STATUS',\n                                                        elem.key\n                                                    )\n                                                }\n                                            />\n                                        )\n                                    )}\n                                />\n                            )}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    primaryText={i18n.t('Set priority')}\n                                    key={'setPriority'}\n                                    rightIcon={<ArrowDropRight />}\n                                    menuItems={extendedChoices.PRIORITY.map(\n                                        elem => (\n                                            <MenuItem\n                                                key={`${elem.key}_priority`}\n                                                value={elem.value}\n                                                primaryText={elem.primaryText}\n                                                onClick={() =>\n                                                    this.updateMessageConversation(\n                                                        'PRIORITY',\n                                                        elem.key\n                                                    )\n                                                }\n                                            />\n                                        )\n                                    )}\n                                />\n                            )}\n                        </IconMenu>\n                    }\n                </div>\n                {multiSelect && (\n                    <Subheader style={styles.nrSelected}>\n                        {`${displayNumberOfCheckedIds} ${i18n.t('selected')}`}\n                    </Subheader>\n                )}\n            </div>\n        ) : (\n            <div />\n        )\n    }\n}\n\nToolbarExtendedChoicePicker.propTypes = {\n    checkedIds: propTypes.array,\n    clearCheckedIds: propTypes.func,\n    clearSelectedMessageConversation: propTypes.func,\n    deleteMessageConversations: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    feedbackRecipientsId: propTypes.string,\n    markMessageConversations: propTypes.func,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    updateMessageConversations: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageType: state.messaging.selectedMessageType,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    checkedIds: state.messaging.checkedIds,\n    feedbackRecipientsId: state.messaging.feedbackRecipientsId,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            clearCheckedIds,\n            clearSelectedMessageConversation,\n            deleteMessageConversations,\n            updateMessageConversations,\n            markMessageConversations,\n        },\n        null,\n        { pure: false }\n    )\n)(ToolbarExtendedChoicePicker)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport ViewFancy from 'material-ui-icons/ViewList'\nimport ViewList from 'material-ui-icons/ViewHeadline'\nimport FlatButton from 'material-ui/FlatButton'\nimport Paper from 'material-ui/Paper'\nimport CreateMessageIcon from 'material-ui-icons/Add'\nimport NavigationBack from 'material-ui-icons/ArrowBack'\nimport TextField from 'material-ui/TextField'\nimport SelectField from 'material-ui/SelectField'\nimport MenuItem from 'material-ui/MenuItem'\nimport Subheader from 'material-ui/Subheader'\nimport IconMenu from 'material-ui/IconMenu'\nimport IconButton from 'material-ui/IconButton'\nimport Checkbox from 'material-ui/Checkbox/Checkbox'\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport theme from '../../styles/theme'\nimport extendedChoices from '../../constants/extendedChoices'\nimport ToolbarExtendedChoicePicker from './ToolbarExtendedChoicePicker'\nimport { debounce } from '../../utils/helpers'\n\nconst headerHeight = '48px'\nconst searchDelay = 300\n\nconst styles = {\n    canvas(checkedOptions) {\n        return {\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            backgroundColor: checkedOptions\n                ? theme.palette.blue50\n                : theme.palette.accent2Color,\n            zIndex: 10,\n        }\n    },\n    checkedOption: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        minWidth: '200px',\n        margin: '6px 0',\n    },\n    filterControl: {\n        flex: 2,\n        height: headerHeight,\n        marginRight: 16,\n        maxWidth: 256,\n    },\n    rightHandCanvas: {\n        flex: '2 0',\n        display: 'flex',\n        paddingLeft: 16,\n    },\n    // IE11 has buggy support for `justifyContent: flex-end;`\n    // to achieve the same result we use a spacer div\n    ie11Spacer: {\n        flexGrow: 1,\n    },\n    iconMenu: {\n        width: '30px',\n        display: 'flex',\n    },\n}\n\nclass Toolbar extends Component {\n    state = {\n        lastMessageFilter: '',\n    }\n    debouncedSearch = debounce(this.search, searchDelay)\n\n    search(messageFilter) {\n        if (\n            this.props.selectedMessageType &&\n            this.state.lastMessageFilter !== messageFilter\n        ) {\n            this.props.loadMessageConversations(\n                this.props.selectedMessageType,\n                this.props.selectedMessageType.id\n            )\n            this.setState({ lastMessageFilter: messageFilter })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.selectedMessageType &&\n            this.props.selectedMessageType.id !==\n                prevProps.selectedMessageType.id\n        ) {\n            this.debouncedSearch('')\n            this.props.messageFilter !== undefined &&\n                this.props.setFilter(undefined, 'MESSAGE')\n            this.props.statusFilter !== undefined &&\n                this.props.setFilter(undefined, 'STATUS')\n            this.props.priorityFilter !== undefined &&\n                this.props.setFilter(undefined, 'PRIORITY')\n            this.props.assignedToMeFilter &&\n                this.props.setFilter(false, 'ASSIGNED_TO_ME')\n            this.props.markedForFollowUpFilter &&\n                this.props.setFilter(false, 'MARKED_FOR_FOLLOWUP')\n            this.props.unreadFilter && this.props.setFilter(false, 'UNREAD')\n        }\n\n        if (\n            this.props.selectedMessageType !== undefined &&\n            !this.props.selectedMessageType.loading &&\n            (prevProps.statusFilter !== this.props.statusFilter ||\n                prevProps.priorityFilter !== this.props.priorityFilter ||\n                prevProps.assignedToMeFilter !==\n                    this.props.assignedToMeFilter ||\n                prevProps.markedForFollowUpFilter !==\n                    this.props.markedForFollowUpFilter ||\n                prevProps.unreadFilter !== this.props.unreadFilter ||\n                prevProps.selectedMessageType === undefined ||\n                prevProps.selectedMessageType.id !==\n                    this.props.selectedMessageType.id)\n        ) {\n            this.props.loadMessageConversations(\n                this.props.selectedMessageType,\n                this.props.selectedMessageType.id\n            )\n        }\n    }\n\n    render() {\n        const id = this.props.id\n        const displayExtendedChoices = this.props.displayExtendedChoices\n        const checkedOptions = this.props.checkedOptions\n\n        const displaySearch =\n            !this.props.wideview ||\n            (this.props.selectedMessageConversation === undefined &&\n                id !== 'create')\n\n        return (\n            <Paper style={styles.canvas(checkedOptions)}>\n                <div>\n                    {!checkedOptions && (\n                        <FlatButton\n                            style={styles.checkedOption}\n                            icon={<CreateMessageIcon />}\n                            onClick={() => history.push('/PRIVATE/create')}\n                            label={i18n.t('Compose')}\n                        />\n                    )}\n\n                    {checkedOptions && (\n                        <FlatButton\n                            style={styles.checkedOption}\n                            icon={<NavigationBack />}\n                            onClick={() => this.props.clearCheckedIds()}\n                            label={i18n.t('Deselect all')}\n                        />\n                    )}\n                </div>\n\n                <ToolbarExtendedChoicePicker\n                    displayExtendedChoices={displayExtendedChoices}\n                />\n\n                <div style={styles.rightHandCanvas}>\n                    <div style={styles.ie11Spacer} />\n                    {displayExtendedChoices &&\n                        displaySearch &&\n                        !checkedOptions && (\n                            <SelectField\n                                style={styles.filterControl}\n                                labelStyle={{\n                                    color:\n                                        this.props.statusFilter === undefined\n                                            ? 'lightGray'\n                                            : 'black',\n                                    top:\n                                        this.props.statusFilter === undefined\n                                            ? '-15px'\n                                            : '-2px',\n                                }}\n                                selectedMenuItemStyle={{\n                                    color: theme.palette.primary1Color,\n                                }}\n                                floatingLabelText={\n                                    this.props.statusFilter === undefined\n                                        ? i18n.t('Status')\n                                        : ''\n                                }\n                                floatingLabelStyle={{\n                                    top: '15px',\n                                }}\n                                iconStyle={{\n                                    top:\n                                        this.props.statusFilter === undefined\n                                            ? '-15px'\n                                            : '0px',\n                                }}\n                                value={this.props.statusFilter}\n                                onChange={(event, key, payload) => {\n                                    this.props.setFilter(\n                                        payload === null ? undefined : payload,\n                                        'STATUS'\n                                    )\n                                }}\n                            >\n                                <MenuItem\n                                    key={null}\n                                    value={null}\n                                    primaryText={''}\n                                />\n                                {extendedChoices.STATUS.map(elem => (\n                                    <MenuItem\n                                        key={elem.key}\n                                        value={elem.value}\n                                        primaryText={elem.primaryText}\n                                    />\n                                ))}\n                            </SelectField>\n                        )}\n\n                    {displayExtendedChoices &&\n                        displaySearch &&\n                        !checkedOptions && (\n                            <SelectField\n                                style={styles.filterControl}\n                                labelStyle={{\n                                    color:\n                                        this.props.priorityFilter === undefined\n                                            ? 'lightGray'\n                                            : 'black',\n                                    top:\n                                        this.props.priorityFilter === undefined\n                                            ? '-15px'\n                                            : '-2px',\n                                }}\n                                selectedMenuItemStyle={{\n                                    color: theme.palette.primary1Color,\n                                }}\n                                floatingLabelText={\n                                    this.props.priorityFilter === undefined\n                                        ? i18n.t('Priority')\n                                        : ''\n                                }\n                                floatingLabelStyle={{\n                                    top: '15px',\n                                }}\n                                iconStyle={{\n                                    top:\n                                        this.props.priorityFilter === undefined\n                                            ? '-15px'\n                                            : '0px',\n                                }}\n                                value={this.props.priorityFilter}\n                                onChange={(event, key, payload) => {\n                                    this.props.setFilter(\n                                        payload === null ? undefined : payload,\n                                        'PRIORITY'\n                                    )\n                                }}\n                            >\n                                <MenuItem\n                                    key={null}\n                                    value={null}\n                                    primaryText={''}\n                                />\n                                {extendedChoices.PRIORITY.map(elem => (\n                                    <MenuItem\n                                        key={elem.key}\n                                        value={elem.value}\n                                        primaryText={elem.primaryText}\n                                    />\n                                ))}\n                            </SelectField>\n                        )}\n\n                    {!checkedOptions && displaySearch && (\n                        <TextField\n                            style={styles.filterControl}\n                            fullWidth\n                            hintText={i18n.t('Search')}\n                            value={this.props.messageFilter || ''}\n                            onChange={(event, messageFilter) => {\n                                this.debouncedSearch(messageFilter)\n                                this.props.setFilter(messageFilter, 'MESSAGE')\n                            }}\n                            type=\"search\"\n                        />\n                    )}\n\n                    {!checkedOptions && displaySearch && (\n                        <IconMenu\n                            iconButtonElement={\n                                <IconButton>\n                                    <MoreVertIcon />\n                                </IconButton>\n                            }\n                            anchorOrigin={{\n                                horizontal: 'right',\n                                vertical: 'top',\n                            }}\n                            targetOrigin={{\n                                horizontal: 'right',\n                                vertical: 'top',\n                            }}\n                            style={styles.iconMenu}\n                            menuStyle={{ overflowX: 'hidden' }}\n                        >\n                            <Subheader style={{ padding: '0px 16px' }}>\n                                {i18n.t('Set filter')}\n                            </Subheader>\n                            {this.props.displayExtendedChoices && (\n                                <Checkbox\n                                    style={{ padding: '0px 16px' }}\n                                    key={'assignedToMeFilter'}\n                                    label={i18n.t('Assigned to me')}\n                                    checked={this.props.assignedToMeFilter}\n                                    onClick={() => {\n                                        this.props.setFilter(\n                                            !this.props.assignedToMeFilter,\n                                            'ASSIGNED_TO_ME'\n                                        )\n                                    }}\n                                />\n                            )}\n                            <Checkbox\n                                style={{ padding: '0px 16px' }}\n                                key={'markedForFollowUpFilter'}\n                                label={i18n.t('Marked for followup')}\n                                checked={this.props.markedForFollowUpFilter}\n                                onClick={() => {\n                                    this.props.setFilter(\n                                        !this.props.markedForFollowUpFilter,\n                                        'MARKED_FOR_FOLLOWUP'\n                                    )\n                                }}\n                            />\n                            <Checkbox\n                                style={{ padding: '0px 16px' }}\n                                key={'unreadFilter'}\n                                label={i18n.t('Unread messages')}\n                                checked={this.props.unreadFilter}\n                                onClick={() => {\n                                    this.props.setFilter(\n                                        !this.props.unreadFilter,\n                                        'UNREAD'\n                                    )\n                                }}\n                            />\n                        </IconMenu>\n                    )}\n                    <FlatButton\n                        style={{\n                            width: '50px',\n                            alignSelf: 'center',\n                        }}\n                        icon={\n                            !this.props.wideview ? <ViewList /> : <ViewFancy />\n                        }\n                        onClick={() => this.props.toogleWideview()}\n                    />\n                </div>\n            </Paper>\n        )\n    }\n}\nToolbar.propTypes = {\n    assignedToMeFilter: propTypes.bool,\n    checkedOptions: propTypes.bool,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    id: propTypes.string,\n    loadMessageConversations: propTypes.func,\n    markedForFollowUpFilter: propTypes.bool,\n    messageFilter: propTypes.string,\n    priorityFilter: propTypes.string,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setFilter: propTypes.func,\n    statusFilter: propTypes.string,\n    toogleWideview: propTypes.func,\n    unreadFilter: propTypes.bool,\n    wideview: propTypes.bool,\n}\n\nexport default Toolbar\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport MailIcon from 'material-ui-icons/MailOutline'\nimport i18n from '@dhis2/d2-i18n'\nimport * as api from '../../api/api'\nimport {\n    loadMessageConversations,\n    setIsInFeedbackRecipientGroup,\n    clearCheckedIds,\n    setSelectedMessageConversation,\n    setSelectedMessageType,\n    clearSelectedMessageConversation,\n    updateInputFields,\n    setFilter,\n    setDisplayTimeDiff,\n    clearAttachments,\n    setDhis2CoreVersion,\n} from '../../actions'\nimport theme from '../../styles/theme'\nimport MessageConversation from '../MessageConversation/MessageConversation'\nimport SidebarList from '../List/SidebarList'\nimport MessageConversationList from '../List/MessageConversationList'\nimport CreateMessage from '../MessageConversation/CreateMessage'\nimport Toolbar from '../Common/Toolbar'\nimport { subheader } from '../../styles/style'\nimport './MessagingCenter.css'\n\nconst EXTENDED_CHOICES = ['TICKET', 'VALIDATION_RESULT']\nconst refreshTimerTotal = 300000 // 5 minutes\nconst refreshTimerInterval = 10000 // 10 seconds\n\nclass MessagingCenter extends Component {\n    constructor(props) {\n        super(props)\n\n        this.intervalId = null\n        this.state = {\n            autoRefresh: false,\n            checkedItems: false,\n            refreshTimer: refreshTimerTotal,\n            wideview: true,\n        }\n    }\n\n    componentDidMount() {\n        const selectedMessageType = this.props.match.params.messageType\n        const selectedId = this.props.match.params.messageId\n\n        this.props.setDhis2CoreVersion(this.context.d2.system.version.minor)\n\n        if (\n            selectedId &&\n            selectedId !== selectedMessageType &&\n            selectedId !== 'create'\n        ) {\n            const initialMessageConversation = { id: selectedId }\n            this.props.setSelectedMessageConversation(\n                initialMessageConversation\n            )\n        }\n\n        api.isInFeedbackRecipientGroup().then(result =>\n            this.props.setIsInFeedbackRecipientGroup(result)\n        )\n\n        this.props.messageTypes.map(messageType =>\n            this.props.loadMessageConversations(\n                messageType,\n                selectedMessageType\n            )\n        )\n\n        this.props.setDisplayTimeDiff()\n    }\n\n    componentDidUpdate() {\n        const selectedMessageType = this.props.match.params.messageType\n        const selectedId = this.props.match.params.messageId\n\n        if (\n            !this.props.settingSelectedMessageConversation &&\n            selectedId &&\n            selectedMessageType !== selectedId &&\n            selectedId !== 'create' &&\n            (this.props.selectedMessageConversation === undefined ||\n                selectedId !== this.props.selectedMessageConversation.id)\n        ) {\n            const initialMessageConversation = { id: selectedId }\n            this.props.setSelectedMessageConversation(\n                initialMessageConversation\n            )\n        }\n\n        if (\n            selectedMessageType === selectedId &&\n            selectedMessageType !== this.props.selectedMessageType.id\n        ) {\n            this.props.setSelectedMessageType(selectedMessageType)\n        }\n\n        if (\n            (selectedMessageType === selectedId || selectedId === 'create') &&\n            this.props.selectedMessageConversation !== undefined\n        ) {\n            this.props.clearSelectedMessageConversation()\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId)\n        }\n    }\n\n    setAutoRefresh = autoRefresh => {\n        // Cancel existing interval if it shouldn't autorefresh\n        if (!autoRefresh && this.intervalId) {\n            clearInterval(this.intervalId)\n            this.intervalId = null\n        }\n\n        if (autoRefresh) {\n            this.intervalId = setInterval(this.tick, refreshTimerInterval)\n        }\n\n        this.setState({\n            autoRefresh,\n            refreshTimer: refreshTimerTotal,\n        })\n    }\n\n    tick = () => {\n        const timerHasElapsed =\n            this.state.refreshTimer - refreshTimerInterval <= 0\n\n        if (timerHasElapsed) {\n            this.refresh()\n            this.setState({\n                refreshTimer: refreshTimerTotal,\n            })\n        } else {\n            this.setState(prevState => ({\n                refreshTimer: prevState.refreshTimer - refreshTimerInterval,\n            }))\n        }\n    }\n\n    refresh = () => {\n        this.props.messageTypes.map(messageType =>\n            this.props.loadMessageConversations(\n                messageType,\n                this.props.selectedMessageType\n            )\n        )\n\n        if (this.props.selectedMessageConversation) {\n            this.props.setSelectedMessageConversation(\n                this.props.selectedMessageConversation\n            )\n        }\n    }\n\n    toogleWideview = () => {\n        this.setState({ wideview: !this.state.wideview })\n    }\n\n    render() {\n        const id = this.props.match.params.messageId\n\n        const displayExtendedChoices =\n            (this.props.selectedMessageType\n                ? !!(\n                      EXTENDED_CHOICES.indexOf(\n                          this.props.selectedMessageType.id\n                      ) + 1\n                  )\n                : false) && this.props.isInFeedbackRecipientGroup\n\n        return (\n            <div className=\"messaging-center\">\n                <Toolbar\n                    {...this.props}\n                    id={id}\n                    wideview={this.state.wideview}\n                    displayExtendedChoices={displayExtendedChoices}\n                    toogleWideview={this.toogleWideview}\n                />\n                <div className=\"messaging-center__main-content\">\n                    <SidebarList\n                        {...this.props}\n                        drawerOpen={this.state.drawerOpen}\n                        messageTypes={this.props.messageTypes}\n                        autoRefresh={this.state.autoRefresh}\n                        refreshTimer={this.state.refreshTimer}\n                        setAutoRefresh={this.setAutoRefresh}\n                    />\n\n                    {this.props.selectedMessageConversation === undefined &&\n                        !(this.state.wideview && id === 'create') && (\n                            <MessageConversationList\n                                wideview={this.state.wideview}\n                                displayExtendedChoices={\n                                    displayExtendedChoices &&\n                                    this.state.wideview\n                                }\n                            />\n                        )}\n\n                    {id === 'create' && (\n                        <CreateMessage\n                            {...this.props}\n                            wideview={this.state.wideview}\n                        />\n                    )}\n\n                    {this.props.selectedMessageConversation !== undefined &&\n                        !this.state.wideview && (\n                            <MessageConversationList\n                                wideview={this.state.wideview}\n                                displayExtendedChoices={\n                                    displayExtendedChoices &&\n                                    this.state.wideview\n                                }\n                            />\n                        )}\n\n                    {this.props.selectedMessageConversation && id !== 'create'\n                        ? this.props.selectedMessageConversation !==\n                              undefined && (\n                              <MessageConversation\n                                  {...this.props}\n                                  messageConversation={\n                                      this.props.selectedMessageConversation\n                                  }\n                                  wideview={this.state.wideview}\n                                  disableLink\n                                  displayExtendedChoices={\n                                      displayExtendedChoices\n                                  }\n                              />\n                          )\n                        : !this.state.wideview &&\n                          id !== 'create' && (\n                              <div className=\"messaging-center__no-message-selected\">\n                                  <Subheader style={subheader}>\n                                      {i18n.t('Select a message')}\n                                  </Subheader>\n                                  <MailIcon\n                                      style={{\n                                          color: theme.palette.primary1Color,\n                                          width: 120,\n                                          height: 120,\n                                      }}\n                                  />\n                              </div>\n                          )}\n                </div>\n            </div>\n        )\n    }\n}\n\nMessagingCenter.propTypes = {\n    clearSelectedMessageConversation: propTypes.func,\n    isInFeedbackRecipientGroup: propTypes.bool,\n    loadMessageConversations: propTypes.func,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setDhis2CoreVersion: propTypes.func,\n    setDisplayTimeDiff: propTypes.func,\n    setIsInFeedbackRecipientGroup: propTypes.func,\n    setSelectedMessageConversation: propTypes.func,\n    setSelectedMessageType: propTypes.func,\n    settingSelectedMessageConversation: propTypes.bool,\n}\n\nMessagingCenter.contextTypes = {\n    d2: propTypes.object,\n}\n\nconst mapStateToProps = state => ({\n    snackMessage: state.messaging.snackMessage,\n    messageTypes: state.messaging.messageTypes,\n    messageConversations: state.messaging.messageConversations,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    assignedToMeFilter: state.messaging.assignedToMeFilter,\n    markedForFollowUpFilter: state.messaging.markedForFollowUpFilter,\n    unreadFilter: state.messaging.unreadFilter,\n    selectedMessageType: state.messaging.selectedMessageType,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    settingSelectedMessageConversation:\n        state.messaging.settingSelectedMessageConversation,\n    checkedIds: state.messaging.checkedIds,\n    checkedOptions: state.messaging.checkedIds.length > 0,\n    loaded: state.messaging.loaded,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n    attachments: state.messaging.attachments,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            loadMessageConversations,\n            setIsInFeedbackRecipientGroup,\n            clearCheckedIds,\n            setSelectedMessageConversation,\n            setSelectedMessageType,\n            clearSelectedMessageConversation,\n            updateInputFields,\n            setFilter,\n            setDisplayTimeDiff,\n            clearAttachments,\n            setDhis2CoreVersion,\n        },\n        null,\n        { pure: false }\n    )\n)(MessagingCenter)\n","import { Router, Route } from 'react-router-dom'\nimport { Redirect } from 'react-router'\nimport React from 'react'\nimport MessagingCenter from '../MessagingCenter/MessagingCenter'\nimport history from '../../utils/history'\n\nconst Routes = () => (\n    <Router history={history}>\n        <div>\n            <Route\n                exact\n                path=\"/\"\n                component={() => <Redirect to=\"/PRIVATE\" />}\n            />\n            <Route\n                path=\"/:messageType/:messageId?/:recipientId?\"\n                component={MessagingCenter}\n            />\n        </div>\n    </Router>\n)\n\nexport default Routes\n","import React from 'react'\n\nimport CustomSnackBar from '../Common/CustomSnackBar'\nimport Routes from './Routes'\n\nconst App = () => (\n    <div>\n        <CustomSnackBar />\n        <Routes />\n    </div>\n)\n\nexport default App\n","const messageTypes = [{\n  id: 'PRIVATE',\n  displayName: 'Inbox',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'VALIDATION_RESULT',\n  displayName: 'Validation',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'TICKET',\n  displayName: 'Ticket',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'SYSTEM',\n  displayName: 'System',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}];\nexport default messageTypes;","import i18n from '@dhis2/d2-i18n';\nimport log from 'loglevel';\nimport * as actions from '../constants/actions';\nimport messageTypes from '../constants/messageTypes';\nimport { POSITIVE, NEGATIVE, NEUTRAL } from '../constants/development';\nimport { findIndexOfId } from '../utils/helpers';\nexport const initialState = {\n  // Message conversation\n  messageConversations: {},\n  messageTypes,\n  selectedMessageType: undefined,\n  selectedMessageConversation: undefined,\n  settingSelectedMessageConversation: false,\n  checkedIds: [],\n  messageFilter: undefined,\n  statusFilter: undefined,\n  priorityFilter: undefined,\n  assignedToMeFilter: false,\n  markedForFollowUpFilter: false,\n  unreadFilter: false,\n  isInFeedbackRecipientGroup: false,\n  feedbackRecipientsId: undefined,\n  displayTimeDiff: 0,\n  // Input for create and reply\n  subject: '',\n  input: '',\n  recipients: [],\n  // Attachments\n  attachments: [],\n  // Snackbar\n  snackMessage: '',\n  onSnackActionClick: undefined,\n  onSnackRequestClose: undefined,\n  snackType: NEUTRAL\n};\n\nfunction messageReducer(state = initialState, action) {\n  const stateMessageTypes = state.messageTypes;\n  const oldAttachments = state.attachments;\n\n  switch (action.type) {\n    case actions.SET_DISPLAY_TIME_DIFF_SUCCESS:\n      return { ...state,\n        displayTimeDiff: action.payload\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_LOAD_SUCCESS:\n      {\n        const replaceMessageType = stateMessageTypes.find(type => type.id === action.payload.messageType.id);\n        replaceMessageType.loaded = action.payload.messageConversations.length;\n        replaceMessageType.total = action.payload.pager.total;\n        replaceMessageType.unread = action.payload.nrOfUnread;\n        replaceMessageType.page = action.payload.pager.page;\n        replaceMessageType.loading = false;\n        messageTypes.splice([findIndexOfId(stateMessageTypes, replaceMessageType.id)], 1, replaceMessageType);\n        const setSelectedMessageType = action.payload.selectedMessageType === replaceMessageType.id && (action.payload.selectedMessageType === state.selectedMessageType || state.selectedMessageType === undefined);\n        return { ...state,\n          messageTypes,\n          messageConversations: { ...state.messageConversations,\n            [replaceMessageType.id]: action.payload.messageConversations\n          },\n          selectedMessageType: setSelectedMessageType ? replaceMessageType : state.selectedMessageType\n        };\n      }\n\n    case actions.MESSAGE_CONVERSATION_UPDATE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS:\n      {\n        let snackMessage = '';\n\n        switch (action.payload.identifier) {\n          case 'STATUS':\n            snackMessage = i18n.t('Successfully updated status');\n            break;\n\n          case 'PRIORITY':\n            snackMessage = i18n.t('Successfully updated priority');\n            break;\n\n          case 'ASSIGNEE':\n            snackMessage = i18n.t('Successfully updated assignee');\n            break;\n\n          case 'FOLLOW_UP':\n            snackMessage = i18n.t('Successfully changed followup');\n            break;\n\n          default:\n            log.error('Unexpected identifier for updateMessageConversations success');\n            break;\n        }\n\n        return { ...state,\n          snackMessage,\n          snackType: POSITIVE\n        };\n      }\n\n    case actions.SEND_MESSAGE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_DELETE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_DELETE_SUCCESS:\n      return { ...state,\n        snackMessage: i18n.t('Successfully deleted message conversation(s)'),\n        snackType: POSITIVE\n      };\n\n    case actions.DISPLAY_SNACK_MESSAGE:\n      return { ...state,\n        snackMessage: action.payload.message,\n        snackType: action.payload.snackType,\n        onSnackActionClick: action.payload.onSnackActionClick,\n        onSnackRequestClose: action.payload.onSnackRequestClose\n      };\n\n    case actions.CLEAR_SNACK_MESSAGE:\n      return { ...state,\n        snackMessage: '',\n        snackType: NEUTRAL\n      };\n\n    case actions.SET_CHECKED:\n      {\n        const messageConversation = action.payload.messageConversation;\n        let checkedIds = state.checkedIds;\n\n        if (action.payload.selectedValue) {\n          checkedIds.push(messageConversation);\n        } else {\n          checkedIds = checkedIds.filter(element => element.id !== messageConversation.id);\n        }\n\n        return { ...state,\n          checkedIds\n        };\n      }\n\n    case actions.SET_ALL_CHECKED:\n      return { ...state,\n        checkedIds: action.payload.messageConversationIds\n      };\n\n    case actions.CLEAR_CHECKED:\n      return { ...state,\n        checkedIds: []\n      };\n\n    case actions.SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS:\n      return { ...state,\n        selectedMessageConversation: action.payload.messageConversation,\n        settingSelectedMessageConversation: false\n      };\n\n    case actions.SET_SELECTED_MESSAGE_CONVERSATION:\n      return { ...state,\n        settingSelectedMessageConversation: true\n      };\n\n    case actions.CLEAR_SELECTED_MESSAGE_CONVERSATION:\n      return { ...state,\n        selectedMessageConversation: undefined\n      };\n\n    case actions.SET_SELECTED_MESSAGE_TYPE:\n      return { ...state,\n        checkedIds: [],\n        selectedMessageType: stateMessageTypes.find(type => type.id === action.payload.messageTypeId),\n        selectedMessageConversations: state.messageConversations[action.payload.messageTypeId],\n        selectedMessageConversation: undefined\n      };\n\n    case actions.UPDATE_INPUT_FIELDS:\n      return { ...state,\n        subject: action.payload.subject,\n        input: action.payload.input,\n        recipients: action.payload.recipients\n      };\n\n    case actions.ADD_RECIPIENT_BY_ID_SUCCESS:\n      return { ...state,\n        recipients: [...state.recipients, action.payload]\n      };\n\n    case actions.SET_FILTER:\n      return { ...state,\n        messageFilter: action.payload.filterType === 'MESSAGE' ? action.payload.filter : state.messageFilter,\n        statusFilter: action.payload.filterType === 'STATUS' ? action.payload.filter : state.statusFilter,\n        priorityFilter: action.payload.filterType === 'PRIORITY' ? action.payload.filter : state.priorityFilter,\n        assignedToMeFilter: action.payload.filterType === 'ASSIGNED_TO_ME' ? action.payload.filter : state.assignedToMeFilter,\n        markedForFollowUpFilter: action.payload.filterType === 'MARKED_FOR_FOLLOWUP' ? action.payload.filter : state.markedForFollowUpFilter,\n        unreadFilter: action.payload.filterType === 'UNREAD' ? action.payload.filter : state.unreadFilter\n      };\n\n    case actions.LOAD_MESSAGE_CONVERSATIONS:\n      {\n        const loadingMessageType = action.payload.messageType;\n        loadingMessageType.loading = true;\n\n        if (action.payload.loadMore) {\n          loadingMessageType.page++;\n        }\n\n        messageTypes[findIndexOfId(messageTypes, loadingMessageType.id)] = loadingMessageType; // TODO: This can probably be removed because action.payload.messageType === state.selectedMessageType\n\n        const selectedMessageType = state.selectedMessageType;\n\n        if (selectedMessageType) {\n          selectedMessageType.loading = true;\n\n          if (action.payload.loadMore) {\n            selectedMessageType.page++;\n          }\n        }\n\n        return { ...state,\n          messageTypes,\n          selectedMessageType\n        };\n      }\n\n    case actions.SET_IN_FEEDBACK_RECIPIENT_GROUP:\n      return { ...state,\n        isInFeedbackRecipientGroup: action.payload.isInFeedbackRecipientGroup.authorized,\n        feedbackRecipientsId: action.payload.isInFeedbackRecipientGroup.feedbackRecipientsId\n      };\n\n    case actions.ADD_ATTACHMENT_SUCCESS:\n      return { ...state,\n        attachments: state.attachments.map(attachment => attachment.name === action.payload.name ? {\n          id: action.payload.id,\n          name: attachment.name,\n          contentLength: attachment.contentLength,\n          loading: false\n        } : attachment)\n      };\n\n    case actions.ADD_ATTACHMENT_ERROR:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.id !== action.payload.attachmentId),\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.ADD_ATTACHMENT:\n      return { ...state,\n        attachments: state.attachments.concat({\n          name: action.payload.name,\n          contentLength: action.payload.size,\n          loading: true\n        })\n      };\n\n    case actions.REMOVE_ATTACHMENT:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.id !== action.payload.attachmentId)\n      };\n\n    case actions.CANCEL_ATTACHMENT:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.name !== action.payload.attachmentName)\n      };\n\n    case actions.CLEAR_ATTACHMENTS:\n      return { ...state,\n        attachments: []\n      };\n\n    case actions.SET_DHIS2_CORE_VERSION:\n      return { ...state,\n        dhis2CoreVersion: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default messageReducer;","import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport messageReducer from './reducers/messageReducer';\nconst middlewares = [ReduxThunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nif (process.env.NODE_ENV === 'development') {\n  middlewares.push(createLogger());\n}\n\nconst reducer = combineReducers({\n  messaging: messageReducer\n});\nexport default createStore(reducer, composeEnhancers(applyMiddleware(...middlewares)));","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport theme from '../../styles/theme'\n\nclass AddD2Context extends React.Component {\n    getChildContext = () => ({\n        d2: this.props.d2,\n    })\n\n    render = () => (\n        <MuiThemeProvider muiTheme={theme}>\n            {this.props.children}\n        </MuiThemeProvider>\n    )\n}\n\nAddD2Context.propTypes = {\n    children: propTypes.object.isRequired,\n    d2: propTypes.object,\n}\n\nAddD2Context.childContextTypes = {\n    d2: propTypes.object,\n}\n\nexport default AddD2Context\n","import React from 'react'\nimport { useConfig } from '@dhis2/app-runtime'\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2'\nimport { CircularProgress } from 'material-ui'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport store from '../../store'\nimport AddD2Context from './AddD2Context'\n\nimport '../../index.css'\nimport 'typeface-roboto'\n\nconst AppWrapper = () => {\n    const { baseUrl } = useConfig()\n    const { d2 } = useD2({\n        d2Config: {\n            schemas: ['messageConversation'],\n            // This app prefers doing unversioned API calls\n            baseUrl: `${baseUrl}/api`,\n        },\n    })\n\n    if (!d2) {\n        return (\n            <AddD2Context>\n                <div className=\"page-loader-wrap\">\n                    <CircularProgress size={48} />\n                </div>\n            </AddD2Context>\n        )\n    }\n\n    return (\n        <Provider store={store}>\n            <AddD2Context d2={d2}>\n                <App />\n            </AddD2Context>\n        </Provider>\n    )\n}\n\nexport default AppWrapper\n"],"sourceRoot":""}