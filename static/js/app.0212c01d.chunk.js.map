{"version":3,"sources":["D2App/components/App/App.module.css","D2App/styles/theme.js","D2App/constants/development.js","D2App/utils/helpers.js","D2App/utils/createRecipientSearchQuery.js","D2App/api/api.js","D2App/actions/index.js","D2App/constants/actions.js","D2App/components/Common/CustomSnackBar.jsx","D2App/utils/history.js","D2App/components/Attachments/Attachments.jsx","D2App/components/MessageConversation/Message.jsx","D2App/components/Attachments/AttachmentUploadButton.jsx","D2App/components/MessageConversation/ReplyCard.jsx","D2App/components/Common/SuggestionField.jsx","D2App/components/Common/ExtendedChoiceLabel.jsx","D2App/styles/messageConversationStyles.js","D2App/components/MessageConversation/MessageConversation.jsx","D2App/components/List/MessageTypeItem.jsx","D2App/components/List/SidebarList.jsx","D2App/styles/style.js","D2App/components/List/ListItemHeader.jsx","D2App/components/List/MessageConversationListItem.jsx","D2App/components/List/MessageConversationList.jsx","D2App/components/MessageConversation/CreateMessage.jsx","D2App/constants/extendedChoices.js","D2App/components/Common/DialogWithReduxState.js","D2App/components/Common/AssignToDialog.jsx","D2App/components/Common/ToolbarExtendedChoicePicker.jsx","D2App/components/Common/Toolbar.jsx","D2App/components/MessagingCenter/MessagingCenter.jsx","D2App/components/App/Routes.jsx","D2App/components/App/App.jsx","D2App/constants/messageTypes.js","D2App/reducers/messageReducer.js","D2App/store.js","D2App/components/App/AppWrapper.jsx"],"names":["module","exports","getMuiTheme","palette","negative","pinkA200","blue50","primary1Color","primary2Color","blue100","primary3Color","blue300","primary4Color","blue500","accent1Color","grey50","accent2Color","grey100","accent3Color","grey300","accent4Color","grey500","followUp","orange500","darkGray","grey700","superDarkGray","grey900","textColor","darkBlack","alternateTextColor","white","canvasColor","borderColor","clockCircleColor","fade","shadowColor","fullBlack","fontFamily","findIndexOfId","list","id","len","length","index","debounce","fn","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","supportsAttachments","dhis2CoreVersion","createOrganisationUnitQuery","searchValue","resource","params","fields","pageSize","filter","createUserGroupQuery","initialMessageConversationFields","messageConversationFields","engine","getMessageConversations","async","messageType","page","messageFilter","status","priority","assignedToMeFilter","markedForFollowUpFilter","unreadFilter","currentUser","push","query","order","queryString","messageConversations","updateMessageConversationAssignee","messageConversationId","value","mutation","type","userId","mutate","searchRecipients","searchOnlyUsers","searchOnlyFeedbackRecipients","feedbackRecipientsId","userQuery","supportsUserLookupEndPoint","resouce","createUserQuery","users","organisationUnits","userGroups","createRecipientSearchQuery","results","addRecipients","data","createAction","payload","setSelectedMessageConversation","messageConversation","dispatch","result","api","error","loadMessageConversations","selectedMessageType","loadMore","getState","promises","state","statusFilter","priorityFilter","messaging","i","promise","then","pager","Promise","all","nrOfUnread","total","reduce","accumulated","r","concat","markMessageConversations","mode","markedConversations","markedReadConversations","markedUnreadConversations","addAttachment","attachment","domain","file","response","fileResource","name","contentLength","clearCheckedIds","clearSelectedMessageConversation","displaySnackMessage","message","onSnackActionClick","onSnackRequestClose","snackType","setFilter","filterType","updateInputFields","subject","input","recipients","clearAttachments","setSelectedMessageType","messageTypeId","removeAttachment","attachmentId","cancelAttachment","attachmentName","contentColorStyle","NEGATIVE","theme","NEUTRAL","POSITIVE","CustomSnackBar","Component","constructor","props","super","closeMessage","clearSnackMessage","setState","show","componentDidUpdate","_prevProps","prevState","render","open","autoHideDuration","onRequestClose","action","onActionClick","contentStyle","color","style","pointerEvents","whiteSpace","bodyStyle","maxWidth","compose","connect","snackMessage","pure","createHashHistory","Attachment","dataDirection","downloadAttachment","className","backgroundColor","label","parseFloat","parseInt","toFixed","labelPosition","onClick","loading","icon","Attachments","attachments","map","key","styles","canvas","padding","innerCanvas","margin","paddingBottom","cardText","wordBreak","fromFormat","datePlacement","display","justifyContent","marginRight","dateFormat","overflow","textOverflow","Message","displayTimeDiff","lastMessage","enableAttachments","fromTitle","sender","displayName","today","moment","messageDate","created","add","internal","i18n","t","placement","diff","from","format","year","paddingLeft","text","createHandleChange","event","files","target","AttachmentUploadButton","containerElement","onChange","ReplyCard","replyMessage","internalReply","selectedMessageConversation","wipeInput","inputError","texFieldUpdate","newValue","handleDiscard","discardState","expanded","componentWillUnmount","Card","marginTop","rows","underlineShow","multiLine","fullWidth","floatingLabelText","primary","disabled","isInFeedbackRecipientGroup","messageTypes","SuggestionField","searchResult","lastSearch","errorText","undefined","debouncedSearch","search","bind","onSuggestionClick","chip","find","recipient","updateRecipients","onRemoveChip","updateInput","addType","internalSearchResult","searchWarning","height","inputHeight","marginBottom","openOnFocus","searchText","dataSource","dataSourceConfig","onUpdateInput","onRequestAdd","onRequestDelete","subheaderTitle","paddingRight","subheader","fontWeight","ExtendedChoiceLabel","showTitle","title","displayLabel","charAt","toLowerCase","substr","flex","overflowY","overflowX","paddingTop","flexDirection","header","iconButton","alignSelf","subjectSubheader","fontSize","participantsCanvas","participants","flexWrap","participantAddRow","participantsSuggestionField","participantsAdd","messagesCanvas","messagesInnerCanvas","NOTIFICATIONS","MessageConversation","backToList","history","cursor","messages","notification","indexOf","userMessages","slice","userMessage","recipientsExpanded","user","userMessagesLength","tooltipPosition","tooltip","displayExtendedChoices","assignee","participant","limitSearchArray","messageId","filePath","link","baseUrl","apiPath","join","document","createElement","href","download","split","pop","body","appendChild","click","removeChild","MessageTypeItem","onMouseEnter","setHoverText","onMouseLeave","setNeutralText","setTextColor","getBackgroundColor","selectedValue","role","alignItems","marginLeft","size","unread","badgeContent","secondary","badgeStyle","borderLeftStyle","borderLeftWidth","borderLeftColor","borderRightStyle","borderRightWidth","borderRightColor","minWidth","SidebarList","match","List","width","refreshTimer","toggled","autoRefresh","onToggle","setAutoRefresh","messagePanelContainer","transition","boxSizing","position","boxShadow","borderBottom","checkBox","extendedLabel","MessageConversationListItem","allChecked","checkedIds","checked","onCheck","setAllChecked","child","messageConversationIds","container","wideview","flag","fontColor","flexBasis","textAlign","read","lastSender","x","containerBackgroundColor","innerText","settingSelectedMessageConversation","setChecked","MessageConversationList","onScroll","messageList","getElementById","isBottom","loaded","debouncedOnScroll","el","scrollHeight","scrollTop","window","outerHeight","Array","isArray","lookup","Set","item","has","dedupeById","ListItemHeader","messageTypeField","CreateMessage","subjectUpdate","inputUpdate","sendMessage","isMessageFeedback","sendFeedbackMessage","componentDidMount","addRecipientByUserId","recipientId","discardDisabled","console","extendedChoices","STATUS","primaryText","PRIORITY","DialogWithReduxState","Consumer","ctx","store","children","AssignToDialog","updateMessageConversations","nrSelected","ToolbarExtendedChoicePicker","getIds","updateMessageConversation","identifier","ids","toggleDialog","dialogOpen","checkedItems","assignToOpen","multiSelect","actionButtons","keyboardFocused","deleteMessageConversations","displayNumberOfCheckedIds","actions","modal","iconButtonElement","anchorOrigin","horizontal","vertical","targetOrigin","rightIcon","menuItems","elem","currentUserId","messageConversationStatus","messageConversationPriority","log","checkedOptions","zIndex","checkedOption","filterControl","rightHandCanvas","ie11Spacer","flexGrow","iconMenu","Toolbar","lastMessageFilter","prevProps","displaySearch","labelStyle","top","selectedMenuItemStyle","floatingLabelStyle","iconStyle","hintText","menuStyle","toogleWideview","EXTENDED_CHOICES","MessagingCenter","intervalId","clearInterval","setInterval","tick","refresh","selectedId","initialMessageConversation","configuration","feedbackRecipients","authorized","authorities","includes","some","setIsInFeedbackRecipientGroup","setDisplayTimeDiff","drawerOpen","disableLink","serverDate","systemInfo","Routes","exact","path","component","to","setCurrentUser","setDhis2CoreVersion","version","serverVersion","useConfig","useEffect","minor","classes","center","cx","initialState","messageReducer","stateMessageTypes","oldAttachments","replaceMessageType","splice","element","selectedMessageConversations","loadingMessageType","middlewares","ReduxThunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducer","combineReducers","createStore","applyMiddleware","AppWrapper","useDataEngine","muiTheme"],"mappings":"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","file":"static/js/app.0212c01d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"center\":\"App_center__1snml\",\"error\":\"App_error__1usCm\"};","import getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport { fade } from 'material-ui/utils/colorManipulator';\nimport { blue50, blue100, blue300, blue500, pinkA200, grey50, grey100, grey300, grey500, grey700, grey900, orange500, white, darkBlack, fullBlack } from 'material-ui/styles/colors';\nexport default getMuiTheme({\n  palette: {\n    negative: pinkA200,\n    blue50,\n    primary1Color: '#1D8BF1',\n    primary2Color: blue100,\n    primary3Color: blue300,\n    primary4Color: blue500,\n    accent1Color: grey50,\n    accent2Color: grey100,\n    accent3Color: grey300,\n    accent4Color: grey500,\n    followUp: orange500,\n    darkGray: grey700,\n    superDarkGray: grey900,\n    textColor: darkBlack,\n    alternateTextColor: white,\n    canvasColor: white,\n    borderColor: grey300,\n    clockCircleColor: fade(darkBlack, 0.07),\n    shadowColor: fullBlack\n  }\n});","export const pageSize = 35;\nexport const fontFamily = 'Roboto, Helvetica, Arial, sans-serif';\nexport const NEUTRAL = 'NEUTRAL';\nexport const POSITIVE = 'POSITIVE';\nexport const NEGATIVE = 'NEGATIVE';","export function dedupeById(list) {\n  if (!Array.isArray(list)) {\n    return undefined;\n  }\n\n  const lookup = new Set();\n  return list.filter(item => {\n    if (lookup.has(item.id)) {\n      return false;\n    }\n\n    lookup.add(item.id);\n    return true;\n  });\n}\nexport function findIndexOfId(list, id) {\n  const len = list.length;\n\n  for (let index = 0; index < len; index++) {\n    if (list[index].id === id) {\n      return index;\n    }\n  }\n\n  return undefined;\n}\nexport function debounce(fn, delay) {\n  let timer = null;\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n}\nexport function supportsAttachments(dhis2CoreVersion) {\n  return dhis2CoreVersion > 30;\n}\nexport function supportsUserLookupEndPoint(dhis2CoreVersion) {\n  return dhis2CoreVersion > 34;\n}","import { supportsUserLookupEndPoint } from './helpers.js';\nconst MAX_RECIPIENT = 10;\n\nfunction createUserQuery({\n  searchValue,\n  searchOnlyFeedbackRecipients,\n  feedbackRecipientsId,\n  dhis2CoreVersion\n}) {\n  if (supportsUserLookupEndPoint(dhis2CoreVersion)) {\n    // version >= v2.35\n    return {\n      resource: searchOnlyFeedbackRecipients ? 'userLookup/feedbackRecipients' : 'userLookup',\n      params: {\n        query: searchValue\n      }\n    };\n  } else {\n    // version < 2.35\n    const filter = [`displayName:token:${searchValue}`];\n\n    if (searchOnlyFeedbackRecipients) {\n      filter.push(`userGroups.id:eq:${feedbackRecipientsId}`);\n    }\n\n    return {\n      resouce: 'users',\n      params: {\n        filter,\n        pageSize: MAX_RECIPIENT\n      }\n    };\n  }\n}\n\nfunction createOrganisationUnitQuery(searchValue) {\n  return {\n    resource: 'organisationUnits',\n    params: {\n      fields: ['id', 'displayName'],\n      pageSize: MAX_RECIPIENT,\n      filter: [`displayName:token:${searchValue}`, 'users:gte:1']\n    }\n  };\n}\n\nfunction createUserGroupQuery(searchValue) {\n  return {\n    resource: 'userGroups',\n    params: {\n      fields: 'id, displayName',\n      pageSize: MAX_RECIPIENT,\n      filter: [`displayName:token:${searchValue}`]\n    }\n  };\n}\n\nexport default function createRecipientSearchQuery({\n  searchValue,\n  searchOnlyUsers,\n  searchOnlyFeedbackRecipients,\n  feedbackRecipientsId,\n  dhis2CoreVersion\n}) {\n  const userQuery = createUserQuery({\n    searchValue,\n    searchOnlyFeedbackRecipients,\n    feedbackRecipientsId,\n    dhis2CoreVersion\n  });\n  return searchOnlyUsers ? {\n    users: userQuery\n  } : {\n    users: userQuery,\n    organisationUnits: createOrganisationUnitQuery(searchValue),\n    userGroups: createUserGroupQuery(searchValue)\n  };\n}","import { pageSize } from '../constants/development';\nimport createRecipientSearchQuery from '../utils/createRecipientSearchQuery';\nconst initialMessageConversationFields = ['id', 'displayName', 'subject', 'messageType', 'lastSender[id, displayName]', 'assignee[id, displayName]', 'status', 'priority', 'lastUpdated', 'read', 'lastMessage', 'followUp'];\nconst messageConversationFields = ['*', 'assignee[id, displayName]', 'messages[*,sender[id,displayName]', 'attachments[id, name, contentLength]]', 'userMessages[user[id, displayName]]'];\nconst order = 'lastMessage:desc'; // The rest of the code in this module will expect that\n// engine has been set and can use it safely\n\nlet engine = null;\nexport const setEngine = engineInstance => {\n  engine = engineInstance;\n};\nexport const getCurrentUser = () => {\n  return engine.query({\n    currentUser: {\n      resource: 'me',\n      params: {\n        fields: ['id', 'authorities', 'userGroups[id]']\n      }\n    }\n  });\n};\nexport const getMessageConversations = async ({\n  messageType,\n  page,\n  messageFilter,\n  status,\n  priority,\n  assignedToMeFilter,\n  markedForFollowUpFilter,\n  unreadFilter,\n  currentUser\n}) => {\n  const filter = [`messageType:eq:${messageType}`];\n\n  if (status) {\n    filter.push(`status:eq:${status}`);\n  }\n\n  if (priority) {\n    filter.push(`priority:eq:${priority}`);\n  }\n\n  if (markedForFollowUpFilter) {\n    filter.push('followUp:eq:true');\n  }\n\n  if (unreadFilter) {\n    filter.push('read:eq:false');\n  }\n\n  if (assignedToMeFilter) {\n    filter.push(`assignee.id:eq:${currentUser.id}`);\n  }\n\n  const query = {\n    resource: 'messageConversations',\n    params: {\n      filter,\n      pageSize,\n      page,\n      fields: initialMessageConversationFields,\n      order\n    }\n  };\n\n  if (messageFilter) {\n    query.params.queryString = messageFilter;\n  }\n\n  const {\n    messageConversations\n  } = await engine.query({\n    messageConversations: query\n  });\n  return messageConversations;\n};\nexport const getMessageConversation = async ({\n  id\n}) => {\n  const {\n    messageConversation\n  } = await engine.query({\n    messageConversation: {\n      resource: 'messageConversations',\n      id,\n      params: {\n        fields: messageConversationFields\n      }\n    }\n  });\n  return messageConversation;\n};\nexport const getServerDate = async () => {\n  const {\n    systemInfo\n  } = await engine.query({\n    systemInfo: {\n      resource: 'system/info'\n    }\n  });\n  return systemInfo.serverDate;\n};\nexport const updateMessageConversationStatus = async (messageConversationId, value) => {\n  return await engine.mutate({\n    resource: `messageConversations/${messageConversationId}/status`,\n    type: 'create',\n    params: {\n      messageConversationStatus: value\n    }\n  });\n};\nexport const updateMessageConversationPriority = async (messageConversationId, value) => await engine.mutate({\n  resource: `messageConversations/${messageConversationId}/priority`,\n  type: 'create',\n  params: {\n    messageConversationPriority: value\n  }\n});\nexport const updateMessageConversationAssignee = async (messageConversationId, value) => {\n  const mutation = value ? {\n    resource: `messageConversations/${messageConversationId}/assign`,\n    type: 'create',\n    params: {\n      userId: value\n    }\n  } : {\n    resource: `messageConversations`,\n    id: `${messageConversationId}/assign`,\n    type: 'delete'\n  };\n  return await engine.mutate(mutation);\n};\nexport const updateMessageConversationFollowup = async (messageConversationIds, value) => {\n  return await engine.mutate({\n    resource: `messageConversations/${value ? 'followup' : 'unfollowup'}`,\n    type: 'create',\n    data: messageConversationIds\n  });\n};\nexport const getNrOfUnread = async messageType => {\n  const {\n    messageConversations\n  } = await engine.query({\n    messageConversations: {\n      resource: 'messageConversations',\n      params: {\n        fields: ['read'],\n        filter: ['read:eq:false', `messageType:eq:${messageType}`],\n        pageSize: 1\n      }\n    }\n  });\n  return messageConversations.pager.total;\n};\nexport const sendMessage = async ({\n  subject,\n  users,\n  userGroups,\n  organisationUnits,\n  text,\n  attachments\n}) => await engine.mutate({\n  resource: 'messageConversations',\n  type: 'create',\n  data: {\n    subject,\n    users,\n    userGroups,\n    organisationUnits,\n    text,\n    attachments\n  }\n});\nexport const sendFeedbackMessage = async (subject, text) => await engine.mutate({\n  resource: 'messageConversations/feedback',\n  type: 'create',\n  params: {\n    subject\n  },\n  data: text\n});\nexport const replyMessage = async ({\n  message,\n  internalReply,\n  attachments,\n  id\n}) => {\n  const params = {\n    internal: internalReply\n  };\n\n  if (attachments.length > 0) {\n    params.attachments = attachments;\n  }\n\n  return await engine.mutate({\n    resource: `messageConversations/${id}`,\n    type: 'create',\n    params,\n    data: message\n  });\n};\nexport const deleteMessageConversation = async (messageConversationId, currentUserId) => await engine.mutate({\n  resource: `messageConversations/${messageConversationId}/${currentUserId}`,\n  type: 'delete'\n});\nexport const markRead = async (markedReadConversations) => await engine.mutate({\n  resource: 'messageConversations/read',\n  type: 'create',\n  data: markedReadConversations\n});\nexport const markUnread = async (markedUnreadConversations) => await engine.mutate({\n  resource: 'messageConversations/unread',\n  type: 'create',\n  data: markedUnreadConversations\n});\nexport const isInFeedbackRecipientGroup = async currentUser => {\n  const {\n    configuration: {\n      feedbackRecipients\n    }\n  } = await engine.query({\n    configuration: {\n      resource: 'configuration'\n    }\n  });\n  const authorized = currentUser.authorities.includes('ALL') || currentUser.userGroups.some(({\n    id\n  }) => id === feedbackRecipients.id);\n  const feedbackRecipientsId = feedbackRecipients.id;\n  return {\n    authorized,\n    feedbackRecipientsId\n  };\n};\nexport const searchRecipients = async ({\n  searchValue,\n  searchOnlyUsers,\n  searchOnlyFeedbackRecipients,\n  feedbackRecipientsId,\n  dhis2CoreVersion\n}) => {\n  const query = createRecipientSearchQuery({\n    searchValue,\n    searchOnlyUsers,\n    searchOnlyFeedbackRecipients,\n    feedbackRecipientsId,\n    dhis2CoreVersion\n  });\n  const results = await engine.query(query);\n  return {\n    users: results.users.users,\n    organisationUnits: results.organisationUnits && results.organisationUnits.organisationUnits,\n    userGroups: results.userGroups && results.userGroups.userGroups\n  };\n};\nexport const addRecipients = async ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageConversationId\n}) => await engine.mutate({\n  resource: `messageConversations/${messageConversationId}/recipients`,\n  type: 'create',\n  data: {\n    users,\n    userGroups,\n    organisationUnits\n  }\n});\nexport const getUserById = async id => {\n  const {\n    user\n  } = await engine.query({\n    user: {\n      resource: 'users',\n      id,\n      params: {\n        fields: 'id,displayName'\n      }\n    }\n  });\n  return { ...user,\n    type: 'user'\n  };\n};\nexport const addAttachment = async (attachment) => await engine.mutate({\n  resource: 'fileResources',\n  type: 'create',\n  params: {\n    domain: 'MESSAGE_ATTACHMENT'\n  },\n  data: {\n    file: attachment\n  }\n});\nexport const downloadAttachment = (messageConversationId, messageId, attachmentId) => {\n  const filePath = [engine.link.baseUrl, engine.link.apiPath, 'messageConversations', messageConversationId, messageId, 'attachments', attachmentId].join('/');\n  const link = document.createElement('a');\n  link.href = filePath;\n  link.download = filePath.split('/').pop();\n  link.target = '_blank';\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n};","import * as actions from '../constants/actions';\nimport log from 'loglevel';\nimport * as api from '../api/api';\nimport moment from 'moment'; // Simple hack to solve negative time difference\n\nconst FUTURE_HACK = 5000;\n\nconst createAction = (type, payload) => ({\n  type,\n  payload\n});\n/******************\n * THUNKS SECTION *\n ******************/\n\n\nexport const setCurrentUser = () => async dispatch => {\n  dispatch(createAction(actions.SET_CURRENT_USER));\n\n  try {\n    const {\n      currentUser\n    } = await api.getCurrentUser();\n    dispatch(createAction(actions.SET_CURRENT_USER_SUCCESS, currentUser));\n  } catch {\n    dispatch(createAction(actions.SET_CURRENT_USER_ERROR, 'Could not load current user'));\n  }\n};\nexport const setDisplayTimeDiff = () => async dispatch => {\n  try {\n    const serverDate = await api.getServerDate();\n    const displayTimeDiff = moment().diff(moment(serverDate)) - FUTURE_HACK;\n    dispatch(createAction(actions.SET_DISPLAY_TIME_DIFF_SUCCESS, displayTimeDiff));\n  } catch (error) {\n    dispatch(createAction(actions.SET_DISPLAY_TIME_DIFF_ERROR, {\n      error\n    }));\n  }\n};\nexport const setSelectedMessageConversation = messageConversation => async dispatch => {\n  dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION));\n\n  try {\n    const result = await api.getMessageConversation(messageConversation);\n    dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS, {\n      messageConversation: result\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION_ERROR, {\n      error\n    }));\n  }\n};\nexport const updateMessageConversations = ({\n  messageConversationIds,\n  identifier,\n  value,\n  messageType,\n  selectedMessageConversation\n}) => async dispatch => {\n  if (identifier === 'FOLLOW_UP') {\n    try {\n      await api.updateMessageConversationFollowup(messageConversationIds, value);\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS, {\n        messageType: messageType,\n        page: 1,\n        identifier: identifier\n      }));\n      dispatch(loadMessageConversations());\n    } catch (error) {\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_ERROR, {\n        error\n      }));\n    }\n  } else {\n    const promises = messageConversationIds.map(messageConversationId => {\n      let promise;\n\n      switch (identifier) {\n        case 'STATUS':\n          promise = api.updateMessageConversationStatus(messageConversationId, value);\n          break;\n\n        case 'PRIORITY':\n          promise = api.updateMessageConversationPriority(messageConversationId, value);\n          break;\n\n        case 'ASSIGNEE':\n          if (value !== undefined && messageType.id === 'VALIDATION_RESULT') {\n            promise = api.addRecipients({\n              users: value.map(value => ({\n                id: value\n              })),\n              userGroups: [],\n              organisationUnits: [],\n              messageConversationId\n            }).then(() => api.updateMessageConversationAssignee(messageConversationId, value));\n          } else {\n            promise = api.updateMessageConversationAssignee(messageConversationId, value);\n          }\n\n          break;\n\n        default:\n          log.error('Unexpected identifier for updateMessageConversations');\n          break;\n      }\n\n      return promise;\n    });\n\n    try {\n      await Promise.all(promises);\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS, {\n        messageType: messageType,\n        page: 1,\n        identifier: identifier\n      }));\n      dispatch(loadMessageConversations());\n    } catch (error) {\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_ERROR, {\n        error\n      }));\n    }\n  }\n\n  if (selectedMessageConversation) {\n    dispatch(setSelectedMessageConversation(selectedMessageConversation));\n  }\n};\nexport const loadMessageConversations = (messageType, selectedMessageType, loadMore = false) => async (dispatch, getState) => {\n  const promises = [];\n  const state = getState();\n  const {\n    messageFilter,\n    statusFilter: status,\n    priorityFilter: priority,\n    assignedToMeFilter,\n    markedForFollowUpFilter,\n    unreadFilter,\n    currentUser\n  } = state.messaging; // Default fallback values so this action can be called without arguments\n\n  messageType = messageType || state.messaging.selectedMessageType;\n  selectedMessageType = selectedMessageType || state.messaging.selectedMessageType.id;\n  dispatch(createAction(actions.LOAD_MESSAGE_CONVERSATIONS, {\n    messageType,\n    loadMore\n  }));\n\n  try {\n    for (let i = 1; i <= messageType.page; i++) {\n      const promise = api.getMessageConversations({\n        messageType: messageType.id,\n        page: i,\n        messageFilter,\n        status,\n        priority,\n        assignedToMeFilter,\n        markedForFollowUpFilter,\n        unreadFilter,\n        currentUser\n      }).then(result => ({\n        messageConversations: result.messageConversations,\n        pager: result.pager\n      }));\n      promises.push(promise);\n    }\n\n    const result = await Promise.all(promises);\n    const nrOfUnread = await api.getNrOfUnread(messageType.id);\n    const messageConversations = result.reduce((accumulated, r) => accumulated.concat(r.messageConversations), []);\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_LOAD_SUCCESS, {\n      messageConversations,\n      pager: result[result.length - 1].pager,\n      messageType,\n      selectedMessageType,\n      nrOfUnread\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_LOAD_ERROR, {\n      error\n    }));\n  }\n};\nexport const deleteMessageConversations = (messageConversationIds, messageType) => async (dispatch, getState) => {\n  try {\n    const state = getState();\n    const {\n      currentUser\n    } = state.messaging;\n    const promises = messageConversationIds.map(messageConversationId => api.deleteMessageConversation(messageConversationId, currentUser.id));\n    await Promise.all(promises);\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_DELETE_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_DELETE_ERROR, {\n      error\n    }));\n  }\n};\nexport const sendMessage = ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageType\n}) => async (dispatch, getState) => {\n  try {\n    const {\n      messaging: {\n        subject,\n        input,\n        attachments\n      }\n    } = getState();\n    await api.sendMessage({\n      subject,\n      users,\n      userGroups,\n      organisationUnits,\n      text: input,\n      attachments\n    });\n    dispatch(createAction(actions.SEND_MESSAGE_SUCCESS, {\n      messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.SEND_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const sendFeedbackMessage = messageType => async (dispatch, getState) => {\n  const state = getState();\n\n  try {\n    await api.sendFeedbackMessage(state.messaging.subject, state.messaging.input);\n    dispatch(createAction(actions.SEND_MESSAGE_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.SEND_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const replyMessage = ({\n  message,\n  internalReply,\n  messageConversation,\n  messageType\n}) => async (dispatch, getState) => {\n  try {\n    const {\n      id\n    } = messageConversation;\n    const state = getState();\n    const attachments = state.messaging.attachments.map(attachment => attachment.id);\n    await api.replyMessage({\n      message,\n      internalReply,\n      attachments,\n      id\n    });\n    dispatch(createAction(actions.REPLY_MESSAGE_SUCCESS, {\n      messageConversation: messageConversation,\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n    dispatch(setSelectedMessageConversation(messageConversation));\n  } catch (error) {\n    dispatch(createAction(actions.REPLY_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const markMessageConversations = (mode, markedConversations, messageType) => async dispatch => {\n  try {\n    await (mode === 'read' ? api.markRead(markedConversations) : api.markUnread(markedConversations));\n    dispatch(createAction(actions.MARK_MESSAGE_CONVERSATIONS_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.MARK_MESSAGE_CONVERSATIONS_ERROR, {\n      error\n    }));\n  }\n};\nexport const addRecipients = ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageConversation,\n  messageType\n}) => async dispatch => {\n  try {\n    const {\n      id: messageConversationId\n    } = messageConversation;\n    await api.addRecipients({\n      users,\n      userGroups,\n      organisationUnits,\n      messageConversationId\n    });\n    dispatch(createAction(actions.ADD_RECIPIENTS_SUCCESS, {\n      messageConversation: messageConversation,\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(setSelectedMessageConversation(messageConversation));\n  } catch (error) {\n    dispatch(createAction(actions.ADD_RECIPIENTS_ERROR, {\n      error\n    }));\n  }\n};\nexport const addRecipientByUserId = id => async dispatch => {\n  try {\n    const user = await api.getUserById(id);\n    dispatch(createAction(actions.ADD_RECIPIENT_BY_ID_SUCCESS, user));\n  } catch (error) {\n    console.error(error); // No action required, the field will just be empty\n  }\n};\nexport const addAttachment = attachment => async dispatch => {\n  dispatch(createAction(actions.ADD_ATTACHMENT, attachment));\n\n  try {\n    const result = await api.addAttachment(attachment);\n    dispatch(createAction(actions.ADD_ATTACHMENT_SUCCESS, {\n      id: result.response.fileResource.id,\n      name: attachment.name,\n      contentLength: result.response.fileResource.contentLength\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.ADD_ATTACHMENT_ERROR, {\n      error\n    }));\n  }\n}; // This is calling a synchronous function in the api module ¯\\_(ツ)_/¯\n\nexport const downloadAttachment = (messageConversationId, messageId, attachmentId) => dispatch => {\n  api.downloadAttachment(messageConversationId, messageId, attachmentId);\n  dispatch(createAction(actions.DOWNLOAD_ATTACHMENT_SUCCESS));\n};\n/************************\n * PLAIN ACTION SECTION *\n ************************/\n\nexport const clearSnackMessage = () => createAction(actions.CLEAR_SNACK_MESSAGE);\nexport const clearCheckedIds = () => createAction(actions.CLEAR_CHECKED);\nexport const clearSelectedMessageConversation = () => createAction(actions.CLEAR_SELECTED_MESSAGE_CONVERSATION);\nexport const displaySnackMessage = ({\n  message,\n  onSnackActionClick,\n  onSnackRequestClose,\n  snackType\n}) => createAction(actions.DISPLAY_SNACK_MESSAGE, {\n  message,\n  onSnackActionClick,\n  onSnackRequestClose,\n  snackType\n});\nexport const setAllChecked = messageConversationIds => createAction(actions.SET_ALL_CHECKED, {\n  messageConversationIds\n});\nexport const setChecked = (messageConversation, selectedValue) => createAction(actions.SET_CHECKED, {\n  messageConversation,\n  selectedValue\n});\nexport const setFilter = (filter, filterType) => createAction(actions.SET_FILTER, {\n  filter,\n  filterType\n});\nexport const updateInputFields = (subject, input, recipients) => createAction(actions.UPDATE_INPUT_FIELDS, {\n  subject,\n  input,\n  recipients\n});\nexport const clearAttachments = () => createAction(actions.CLEAR_ATTACHMENTS);\nexport const setSelectedMessageType = messageTypeId => createAction(actions.SET_SELECTED_MESSAGE_TYPE, {\n  messageTypeId\n});\nexport const removeAttachment = attachmentId => createAction(actions.REMOVE_ATTACHMENT, {\n  attachmentId\n});\nexport const cancelAttachment = attachmentName => createAction(actions.CANCEL_ATTACHMENT, {\n  attachmentName\n});\nexport const setIsInFeedbackRecipientGroup = isInFeedbackRecipientGroup => createAction(actions.SET_IN_FEEDBACK_RECIPIENT_GROUP, {\n  isInFeedbackRecipientGroup\n});\nexport const setDhis2CoreVersion = version => createAction(actions.SET_DHIS2_CORE_VERSION, version);","export const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const SET_CURRENT_USER_SUCCESS = 'SET_CURRENT_USER_SUCCESS';\nexport const SET_CURRENT_USER_ERROR = 'SET_CURRENT_USER_ERROR';\nexport const LOAD_MESSAGE_CONVERSATIONS = 'LOAD_MESSAGE_CONVERSATIONS';\nexport const LOAD_MORE_MESSAGE_CONVERSATIONS = 'LOAD_MORE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATIONS_LOAD_SUCCESS = 'MESSAGE_CONVERSATIONS_LOAD_SUCCESS';\nexport const MESSAGE_CONVERSATIONS_LOAD_ERROR = 'MESSAGE_CONVERSATIONS_LOAD_ERROR';\nexport const DELETE_MESSAGE_CONVERSATIONS = 'DELETE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATIONS_DELETE_SUCCESS = 'MESSAGE_CONVERSATIONS_DELETE_SUCCESS';\nexport const MESSAGE_CONVERSATIONS_DELETE_ERROR = 'MESSAGE_CONVERSATIONS_DELETE_ERROR';\nexport const UPDATE_MESSAGE_CONVERSATIONS = 'UPDATE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATION_UPDATE_SUCCESS = 'MESSAGE_CONVERSATION_UPDATE_SUCCESS';\nexport const MESSAGE_CONVERSATION_UPDATE_ERROR = 'MESSAGE_CONVERSATION_UPDATE_ERROR';\nexport const MARK_MESSAGE_CONVERSATIONS = 'MARK_MESSAGE_CONVERSATIONS';\nexport const MARK_MESSAGE_CONVERSATIONS_SUCCESS = 'MARK_MESSAGE_CONVERSATIONS_SUCCESS';\nexport const MARK_MESSAGE_CONVERSATIONS_ERROR = 'MARK_MESSAGE_CONVERSATIONS_ERROR';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const SEND_MESSAGE_SUCCESS = 'SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_ERROR = 'SEND_MESSAGE_ERROR';\nexport const SEND_FEEDBACK_MESSAGE = 'SEND_FEEDBACK_MESSAGE';\nexport const REPLY_MESSAGE = 'REPLY_MESSAGE';\nexport const REPLY_MESSAGE_SUCCESS = 'REPLY_MESSAGE_SUCCESS';\nexport const REPLY_MESSAGE_ERROR = 'REPLY_MESSAGE_ERROR';\nexport const SET_FILTER = 'SET_FILTER';\nexport const DISPLAY_SNACK_MESSAGE = 'DISPLAY_SNACK_MESSAGE;';\nexport const CLEAR_SNACK_MESSAGE = 'CLEAR_SNACK_MESSAGE';\nexport const SET_CHECKED = 'SET_CHECKED';\nexport const SET_ALL_CHECKED = 'SET_ALL_CHECKED';\nexport const CLEAR_CHECKED = 'CLEAR_CHECKED';\nexport const SET_SELECTED_MESSAGE_TYPE = 'SET_SELECTED_MESSAGE_TYPE';\nexport const CLEAR_SELECTED_MESSAGE_CONVERSATION = 'CLEAR_SELECTED_MESSAGE_CONVERSATION';\nexport const SET_SELECTED_MESSAGE_CONVERSATION = 'SET_SELECTED_MESSAGE_CONVERSATION';\nexport const SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS = 'SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS';\nexport const SET_SELECTED_MESSAGE_CONVERSATION_ERROR = 'SET_SELECTED_MESSAGE_CONVERSATION_ERROR';\nexport const UPDATE_INPUT_FIELDS = 'UPDATE_INPUT_FIELDS';\nexport const SET_IN_FEEDBACK_RECIPIENT_GROUP = 'SET_IN_FEEDBACK_RECIPIENT_GROUP';\nexport const SET_DISPLAY_TIME_DIFF = 'SET_DISPLAY_TIME_DIFF';\nexport const SET_DISPLAY_TIME_DIFF_SUCCESS = 'SET_DISPLAY_TIME_DIFF_SUCCESS';\nexport const SET_DISPLAY_TIME_DIFF_ERROR = 'SET_DISPLAY_TIME_DIFF_ERROR';\n/* Recipient actions */\n\nexport const RECIPIENT_SEARCH = 'RECIPIENT_SEARCH';\nexport const RECIPIENT_SEARCH_SUCCESS = 'RECIPIENT_SEARCH_SUCCESS';\nexport const RECIPIENT_SEARCH_ERROR = 'RECIPIENT_SEARCH_ERROR';\nexport const ADD_RECIPIENTS = 'ADD_RECIPIENTS';\nexport const ADD_RECIPIENTS_SUCCESS = 'ADD_RECIPIENTS_SUCCESS';\nexport const ADD_RECIPIENTS_ERROR = 'ADD_RECIPIENTS_ERROR';\nexport const ADD_RECIPIENT_BY_ID_SUCCESS = 'ADD_RECIPIENT_BY_ID_SUCCESS';\n/* Attachments */\n\nexport const ADD_ATTACHMENT = 'ADD_ATTACHMENT';\nexport const ADD_ATTACHMENT_SUCCESS = 'ADD_ATTACHMENT_SUCCESS';\nexport const ADD_ATTACHMENT_ERROR = 'ADD_ATTACHMENT_ERROR';\nexport const DOWNLOAD_ATTACHMENT = 'DOWNLOAD_ATTACHMENT';\nexport const DOWNLOAD_ATTACHMENT_SUCCESS = 'DOWNLOAD_ATTACHMENT_SUCCESS';\nexport const DOWNLOAD_ATTACHMENT_ERROR = 'DOWNLOAD_ATTACHMENT_ERROR';\nexport const REMOVE_ATTACHMENT = 'REMOVE_ATTACHMENT';\nexport const CLEAR_ATTACHMENTS = 'CLEAR_ATTACHMENTS';\nexport const CANCEL_ATTACHMENT = 'CANCEL_ATTACHMENT';\n/* DHIS2 CORE VERSION */\n\nexport const SET_DHIS2_CORE_VERSION = 'SET_DHIS2_CORE_VERSION';","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport Snackbar from 'material-ui/Snackbar'\nimport { clearSnackMessage } from '../../actions'\nimport { compose, pure } from 'recompose'\nimport theme from '../../styles/theme'\n\nconst DEFAULT_MESSAGE_DURATION = 4000\nconst contentColorStyle = {\n    NEGATIVE: theme.palette.negative,\n    NEUTRAL: theme.palette.primary1Color,\n    POSITIVE: theme.palette.alternateTextColor,\n}\n\nclass CustomSnackBar extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            show: false,\n        }\n    }\n\n    componentDidUpdate(_prevProps, prevState) {\n        if (!prevState.show && this.props.message) {\n            this.setState({\n                show: true,\n            })\n        }\n    }\n\n    closeMessage = () => {\n        this.props.clearSnackMessage()\n        this.setState({\n            show: false,\n        })\n        this.props.onSnackRequestClose && this.props.onSnackRequestClose()\n    }\n\n    render() {\n        return (\n            <Snackbar\n                open={this.props.message !== '' && this.state.show}\n                message={this.props.message || 'Missing snackbar message'}\n                autoHideDuration={DEFAULT_MESSAGE_DURATION}\n                onRequestClose={this.closeMessage}\n                action={this.props.onSnackActionClick && 'undo'}\n                onActionClick={() => {\n                    this.props.onSnackActionClick()\n                    this.setState({\n                        show: false,\n                    })\n                }}\n                contentStyle={{ color: contentColorStyle[this.props.type] }}\n                style={{ pointerEvents: 'none', whiteSpace: 'nowrap' }}\n                bodyStyle={{ pointerEvents: 'initial', maxWidth: 'none' }}\n            />\n        )\n    }\n}\n\nCustomSnackBar.propTypes = {\n    clearSnackMessage: propTypes.func,\n    message: propTypes.string,\n    type: propTypes.oneOf(['NEGATIVE', 'NEUTRAL', 'POSITIVE']),\n    onSnackActionClick: propTypes.func,\n    onSnackRequestClose: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    message: state.messaging.snackMessage,\n    type: state.messaging.snackType,\n    onSnackActionClick: state.messaging.onSnackActionClick,\n    onSnackRequestClose: state.messaging.onSnackRequestClose,\n})\n\nexport default compose(\n    connect(mapStateToProps, {\n        clearSnackMessage,\n    }),\n    pure\n)(CustomSnackBar)\n","import { createHashHistory } from 'history';\nexport default createHashHistory();","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport FlatButton from 'material-ui/FlatButton'\nimport LinearProgress from 'material-ui/LinearProgress'\nimport Clear from 'material-ui-icons/Clear'\nimport Download from 'material-ui-icons/CloudDownload'\nimport theme from '../../styles/theme'\nimport './Attachments.css'\n\nconst Attachments = ({\n    dataDirection,\n    attachments,\n    style,\n    removeAttachment,\n    downloadAttachment,\n    cancelAttachment,\n}) => (\n    <div className=\"attachment\" style={{ ...style }}>\n        {attachments.map((attachment, index) => (\n            <Attachment\n                // combining name with index prevents errors when user uploads files with duplicate names\n                key={`${attachment.name}-${index}`}\n                dataDirection={dataDirection}\n                attachment={attachment}\n                removeAttachment={removeAttachment}\n                downloadAttachment={downloadAttachment}\n                cancelAttachment={cancelAttachment}\n            />\n        ))}\n    </div>\n)\n\nAttachments.propTypes = {\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    dataDirection: propTypes.string,\n    downloadAttachment: propTypes.func,\n    removeAttachment: propTypes.func,\n    style: propTypes.object,\n}\n\nconst Attachment = ({\n    dataDirection,\n    attachment,\n    removeAttachment,\n    downloadAttachment,\n    cancelAttachment,\n}) => {\n    return (\n        <FlatButton\n            className=\"attachment__button\"\n            backgroundColor={theme.palette.accent2Color}\n            label={`${attachment.name} (${parseFloat(\n                parseInt(attachment.contentLength, 10) / 1000000\n            ).toFixed(2)} MB)`}\n            labelPosition=\"after\"\n            onClick={() => {\n                dataDirection === 'download'\n                    ? downloadAttachment(attachment)\n                    : attachment.loading\n                    ? cancelAttachment(attachment.name)\n                    : removeAttachment(attachment)\n            }}\n            icon={dataDirection === 'download' ? <Download /> : <Clear />}\n        >\n            {attachment.loading && (\n                <LinearProgress\n                    className={'attachment__progress'}\n                    mode=\"indeterminate\"\n                />\n            )}\n        </FlatButton>\n    )\n}\n\nAttachment.propTypes = {\n    attachment: propTypes.object,\n    cancelAttachment: propTypes.func,\n    dataDirection: propTypes.string,\n    downloadAttachment: propTypes.func,\n    removeAttachment: propTypes.func,\n}\n\nexport default Attachments\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport Divider from 'material-ui/Divider'\nimport CardText from 'material-ui/Card/CardText'\nimport Attachments from '../Attachments/Attachments'\nimport i18n from '@dhis2/d2-i18n'\nimport Linkify from 'react-linkify'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\nimport moment from 'moment'\n\nconst styles = {\n    canvas(backgroundColor) {\n        return {\n            backgroundColor,\n            padding: '16px 16px 16px 16px',\n        }\n    },\n    innerCanvas: {\n        margin: '',\n        paddingBottom: '0px',\n    },\n    cardText: {\n        padding: '16px 0px 16px 0px',\n        fontFamily,\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word',\n    },\n    fromFormat: {\n        fontFamily,\n    },\n    datePlacement: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: '10px',\n    },\n    dateFormat: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        fontFamily,\n    },\n}\n\nconst Message = ({\n    displayTimeDiff,\n    message,\n    currentUser,\n    lastMessage,\n    downloadAttachment,\n    cancelAttachment,\n    enableAttachments,\n}) => {\n    const fromTitle = message.sender\n        ? currentUser && currentUser.id === message.sender.id\n            ? 'me'\n            : message.sender.displayName\n        : 'system'\n    const today = moment()\n    const messageDate = moment(message.created).add(displayTimeDiff)\n\n    return (\n        <div style={styles.canvas(theme.palette.canvasColor)}>\n            <div style={styles.innerCanvas}>\n                <div style={styles.fromFormat}>\n                    {message.internal\n                        ? i18n.t(`Internal message from ${fromTitle}`)\n                        : i18n.t(`Message from ${fromTitle}`)}\n                </div>\n\n                <div placement={'bottom'} style={styles.datePlacement}>\n                    <div style={styles.dateFormat}>\n                        {today.diff(messageDate, 'hours') < 72\n                            ? `${messageDate.from(today)}, ${messageDate.format(\n                                  'HH:mm'\n                              )}`\n                            : today.year() === messageDate.year()\n                            ? messageDate.format('MMM DD, HH:mm')\n                            : messageDate.format('MMM DD, YYYY HH:mm')}\n                    </div>\n                </div>\n\n                {enableAttachments && (\n                    <Attachments\n                        dataDirection={'download'}\n                        style={{ paddingLeft: 0 }}\n                        attachments={message.attachments}\n                        downloadAttachment={downloadAttachment}\n                        cancelAttachment={cancelAttachment}\n                    />\n                )}\n\n                <CardText style={styles.cardText}>\n                    <Linkify>{message.text}</Linkify>\n                </CardText>\n            </div>\n            {!lastMessage && <Divider />}\n        </div>\n    )\n}\n\nMessage.propTypes = {\n    cancelAttachment: propTypes.func,\n    currentUser: propTypes.object,\n    displayTimeDiff: propTypes.number,\n    downloadAttachment: propTypes.func,\n    enableAttachments: propTypes.bool,\n    lastMessage: propTypes.bool,\n    message: propTypes.object,\n}\n\nexport default Message\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport FlatButton from 'material-ui/FlatButton'\nimport AttachFile from 'material-ui-icons/AttachFile'\nimport i18n from '@dhis2/d2-i18n'\nimport './AttachmentUploadButton.css'\n\nconst createHandleChange = addAttachment => event => {\n    const files = event.target.files\n    const hasFile = files.length > 0\n\n    if (hasFile) {\n        addAttachment(files[0])\n    }\n}\n\nconst AttachmentUploadButton = ({ addAttachment }) => (\n    <FlatButton\n        className=\"attachment__upload-button\"\n        label={i18n.t('Upload attachment')}\n        labelPosition=\"after\"\n        containerElement=\"label\"\n        icon={<AttachFile />}\n    >\n        <input\n            className=\"attachment__upload-button--input\"\n            type=\"file\"\n            onChange={createHandleChange(addAttachment)}\n        />\n    </FlatButton>\n)\n\nAttachmentUploadButton.propTypes = {\n    addAttachment: propTypes.func,\n}\n\nexport default AttachmentUploadButton\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Card, CardActions, CardText } from 'material-ui/Card'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport TextField from 'material-ui/TextField'\nimport AttachmentUploadButton from '../Attachments/AttachmentUploadButton'\nimport Attachments from '../Attachments/Attachments'\nimport { supportsAttachments } from '../../utils/helpers'\nimport i18n from '@dhis2/d2-i18n'\nimport {\n    replyMessage,\n    setSelectedMessageType,\n    updateInputFields,\n    displaySnackMessage,\n    addAttachment,\n    removeAttachment,\n    cancelAttachment,\n} from '../../actions'\nimport { NEGATIVE } from '../../constants/development'\n\nclass ReplyCard extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            discardState: false,\n        }\n    }\n\n    componentWillUnmount() {\n        this.wipeInput()\n    }\n\n    replyMessage = internalReply => {\n        const {\n            input: message,\n            selectedMessageConversation: messageConversation,\n            selectedMessageType: messageType,\n        } = this.props\n\n        this.props.replyMessage({\n            message,\n            internalReply,\n            messageConversation,\n            messageType,\n        })\n\n        this.wipeInput()\n    }\n\n    wipeInput = () => {\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n        this.setState({\n            inputError: false,\n        })\n    }\n\n    texFieldUpdate = (event, newValue) => {\n        this.props.updateInputFields('', newValue, [])\n    }\n\n    handleDiscard = () => {\n        const message = i18n.t('Reply discarded')\n        const snackType = NEGATIVE\n        const onSnackActionClick = () => this.setState({ discardState: false })\n        const onSnackRequestClose = () => {\n            this.setState({ discardState: false })\n            this.wipeInput()\n        }\n\n        this.setState({ discardState: true })\n        this.props.displaySnackMessage({\n            message,\n            onSnackActionClick,\n            onSnackRequestClose,\n            snackType,\n        })\n        this.setState({\n            expanded: false,\n        })\n    }\n\n    render() {\n        return (\n            <Card style={{ marginTop: '5px' }} expanded>\n                <CardText style={{ padding: '0px 0px 0px 16px' }}>\n                    <TextField\n                        key={this.props.messageConversation.id}\n                        id={this.props.messageConversation.id}\n                        rows={5}\n                        underlineShow={false}\n                        value={this.state.discardState ? '' : this.props.input}\n                        multiLine\n                        fullWidth\n                        floatingLabelText={i18n.t('Message')}\n                        onChange={this.texFieldUpdate}\n                    />\n                    {this.props.enableAttachments &&\n                        !this.state.discardState && (\n                            <Attachments\n                                dataDirection={'upload'}\n                                attachments={this.props.attachments}\n                                removeAttachment={attachment =>\n                                    this.props.removeAttachment(attachment.id)\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                            />\n                        )}\n\n                    <CardActions style={{ paddingLeft: '0px' }}>\n                        <RaisedButton\n                            primary\n                            label={i18n.t('Reply')}\n                            disabled={\n                                this.props.input === '' ||\n                                this.state.discardState\n                            }\n                            onClick={() => this.replyMessage(false)}\n                        />\n                        {this.props.isInFeedbackRecipientGroup &&\n                            this.props.selectedMessageType.id === 'TICKET' && (\n                                <FlatButton\n                                    primary\n                                    label={i18n.t('Internal reply')}\n                                    disabled={\n                                        this.props.input === '' ||\n                                        this.state.discardState\n                                    }\n                                    onClick={() => this.replyMessage(true)}\n                                />\n                            )}\n                        <FlatButton\n                            label={i18n.t('Discard')}\n                            disabled={\n                                this.props.input === '' ||\n                                this.state.discardState\n                            }\n                            onClick={this.handleDiscard}\n                        />\n                        {this.props.enableAttachments && (\n                            <AttachmentUploadButton\n                                addAttachment={attachment => {\n                                    this.props.addAttachment(attachment)\n                                }}\n                            />\n                        )}\n                        )\n                    </CardActions>\n                </CardText>\n            </Card>\n        )\n    }\n}\n\nReplyCard.propTypes = {\n    addAttachment: propTypes.func,\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    clearAttachments: propTypes.func,\n    displaySnackMessage: propTypes.func,\n    enableAttachments: propTypes.bool,\n    input: propTypes.string,\n    isInFeedbackRecipientGroup: propTypes.bool,\n    messageConversation: propTypes.object,\n    removeAttachment: propTypes.func,\n    replyMessage: propTypes.func,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n    messageTypes: state.messaging.messageTypes,\n    input: state.messaging.input,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n    attachments: state.messaging.attachments,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            replyMessage,\n            setSelectedMessageType,\n            updateInputFields,\n            displaySnackMessage,\n            addAttachment,\n            removeAttachment,\n            cancelAttachment,\n        },\n        null,\n        { pure: false }\n    )\n)(ReplyCard)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport propTypes from '@dhis2/prop-types'\nimport ChipInput from 'material-ui-chip-input'\nimport { debounce } from '../../utils/helpers'\nimport i18n from '@dhis2/d2-i18n'\nimport * as api from '../../api/api'\n\nconst searchDelay = 300\nconst minCharLength = 2\n\n/*\n * An AutoComplete text field with suggestions from a given list of\n * identifiable objects. Selected objects are shown as chips in the text field.\n */\n\nclass SuggestionField extends Component {\n    state = {\n        input: '',\n        searchResult: [],\n        searchOnlyUsers: this.props.searchOnlyUsers,\n        searchOnlyFeedbackRecipients: this.props.searchOnlyFeedbackRecipients,\n        lastSearch: '',\n        errorText: undefined,\n    }\n\n    debouncedSearch = debounce(this.search.bind(this), searchDelay)\n\n    search(input) {\n        const doSearch =\n            !this.state.searchResult.find(\n                result => result.displayName === input\n            ) &&\n            input !== '' &&\n            input.length >= minCharLength\n\n        if (doSearch) {\n            const {\n                feedbackRecipientsId,\n                searchOnlyUsers,\n                searchOnlyFeedbackRecipients,\n                dhis2CoreVersion,\n            } = this.props\n\n            api.searchRecipients({\n                searchValue: input,\n                searchOnlyUsers,\n                searchOnlyFeedbackRecipients,\n                feedbackRecipientsId,\n                dhis2CoreVersion,\n            }).then(({ users, userGroups, organisationUnits }) => {\n                const addType = type => result => ({ ...result, type })\n                let internalSearchResult = users.map(addType('user'))\n\n                if (!this.state.searchOnlyUsers) {\n                    internalSearchResult = internalSearchResult\n                        .concat(userGroups.map(addType('userGroup')))\n                        .concat(\n                            organisationUnits.map(addType('organisationUnit'))\n                        )\n                }\n\n                this.setState({\n                    searchResult: internalSearchResult,\n                    errorText:\n                        internalSearchResult.length === 0\n                            ? i18n.t('No results found')\n                            : undefined,\n                })\n            })\n        } else {\n            this.setState({\n                lastSearch: input,\n                searchResult:\n                    (this.state.lastSearch !== '' && input === '') ||\n                    input.length < minCharLength\n                        ? []\n                        : this.state.searchResult,\n                errorText:\n                    input !== '' && input.length < minCharLength\n                        ? i18n.t(\n                              `Please enter at least ${minCharLength} characters`\n                          )\n                        : this.state.searchWarning,\n            })\n        }\n    }\n\n    onSuggestionClick = chip => {\n        if (this.props.onSuggestionClick !== undefined) {\n            this.props.onSuggestionClick(chip)\n        } else {\n            this.wipeInput()\n            this.debouncedSearch('')\n\n            const doInsert = !this.props.recipients.find(\n                recipient => recipient.id === chip.id\n            )\n\n            doInsert &&\n                this.props.updateRecipients([\n                    ...this.props.recipients,\n                    this.state.searchResult.find(\n                        result => result.id === chip.id\n                    ),\n                ])\n        }\n    }\n\n    onRemoveChip = id => {\n        this.props.updateRecipients(\n            this.props.recipients.filter(recipient => recipient.id !== id)\n        )\n    }\n\n    wipeInput = () => {\n        this.setState({\n            input: '',\n            searchResult: [],\n        })\n    }\n\n    updateInput = input => {\n        this.debouncedSearch(input)\n        this.setState({\n            input,\n        })\n    }\n\n    render() {\n        return (\n            <div\n                style={{ ...this.props.style, height: this.props.inputHeight }}\n            >\n                <ChipInput\n                    style={{ marginBottom: 16 }}\n                    disabled={\n                        this.props.disabled === undefined\n                            ? false\n                            : this.props.disabled\n                    }\n                    errorText={this.props.errorText || this.state.errorText}\n                    value={this.props.recipients}\n                    fullWidth\n                    openOnFocus\n                    searchText={this.state.input}\n                    floatingLabelText={this.props.label}\n                    dataSource={this.state.searchResult}\n                    dataSourceConfig={{ text: 'displayName', value: 'id' }}\n                    onUpdateInput={this.updateInput}\n                    onRequestAdd={chip => this.onSuggestionClick(chip)}\n                    onRequestDelete={id => this.onRemoveChip(id)}\n                />\n            </div>\n        )\n    }\n}\n\nSuggestionField.propTypes = {\n    dhis2CoreVersion: propTypes.number,\n    disabled: propTypes.bool,\n    errorText: propTypes.string,\n    feedbackRecipientsId: propTypes.string,\n    inputHeight: propTypes.string,\n    label: propTypes.string,\n    recipients: propTypes.array,\n    searchOnlyFeedbackRecipients: propTypes.bool,\n    searchOnlyUsers: propTypes.bool,\n    style: propTypes.object,\n    updateRecipients: propTypes.func,\n    onSuggestionClick: propTypes.func,\n}\n\nexport default connect(state => ({\n    dhis2CoreVersion: state.messaging.dhis2CoreVersion,\n}))(SuggestionField)\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport Subheader from 'material-ui/Subheader/Subheader'\n\nconst styles = {\n    subheaderTitle: {\n        height: '32px',\n        color: 'black',\n        paddingLeft: 0,\n        paddingRight: 16,\n    },\n    subheader(color, fontWeight) {\n        return {\n            height: '32px',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            padding: 0,\n            color,\n            fontWeight,\n        }\n    },\n}\n\nconst ExtendedChoiceLabel = ({\n    showTitle,\n    title,\n    label,\n    color,\n    fontWeight,\n}) => {\n    const displayLabel =\n        label && label !== 'NONE'\n            ? title === 'Assignee'\n                ? label\n                : `${label.charAt(0)}${label\n                      .toLowerCase()\n                      .substr(1, label.length)}`\n            : '-'\n\n    return (\n        <div style={{ flex: 2, paddingLeft: 10, maxWidth: 200 }}>\n            {showTitle && (\n                <Subheader style={styles.subheaderTitle}> {title} </Subheader>\n            )}\n            <Subheader style={styles.subheader(color, fontWeight)}>\n                {displayLabel}\n            </Subheader>\n        </div>\n    )\n}\n\nExtendedChoiceLabel.propTypes = {\n    color: propTypes.string,\n    fontWeight: propTypes.string,\n    label: propTypes.string,\n    showTitle: propTypes.bool,\n    title: propTypes.string,\n}\n\nexport default ExtendedChoiceLabel\n","import theme from '../styles/theme';\nimport { fontFamily } from '../constants/development';\nexport const styles = {\n  canvas: {\n    flex: '3 0',\n    overflowY: 'scroll',\n    overflowX: 'hidden',\n    height: 'calc(100vh - 110px)',\n    paddingTop: '10px'\n  },\n  innerCanvas: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0px 10px 0px 10px'\n  },\n  header: {\n    display: 'flex'\n  },\n  iconButton: {\n    display: 'flex',\n    alignSelf: 'center'\n  },\n  subjectSubheader: {\n    display: 'flex',\n    alignSelf: 'center',\n    fontSize: '20px',\n    fontFamily\n  },\n  participantsCanvas: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  participants: {\n    paddingLeft: '12px',\n    paddingTop: '10px',\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  chip: {\n    height: '32px',\n    marginRight: '3px',\n    marginBottom: '3px'\n  },\n  participantAddRow: {\n    display: 'flex'\n  },\n  participantsSuggestionField: {\n    paddingLeft: '12px',\n    marginBottom: '0px',\n    flex: 1\n  },\n  participantsAdd: {\n    alignSelf: 'flex-end',\n    marginBottom: '28px',\n    paddingLeft: '12px'\n  },\n  messagesCanvas: {\n    marginBottom: '50px',\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.accent2Color,\n    margin: '0px 10px 10px 10px'\n  },\n  messagesInnerCanvas: {\n    padding: '0px'\n  }\n};\nexport default styles;","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\n\nimport history from '../../utils/history'\nimport {\n    addRecipients,\n    downloadAttachment,\n    cancelAttachment,\n    clearSelectedMessageConversation,\n} from '../../actions'\nimport { supportsAttachments } from '../../utils/helpers'\n\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport AddIcon from 'material-ui-icons/Add'\nimport NavigationBack from 'material-ui-icons/ArrowBack'\nimport FlatButton from 'material-ui/FlatButton'\nimport IconButton from 'material-ui/IconButton'\nimport Chip from 'material-ui/Chip'\nimport Paper from 'material-ui/Paper'\nimport i18n from '@dhis2/d2-i18n'\nimport Message from './Message'\nimport ReplyCard from './ReplyCard'\nimport SuggestionField from '../Common/SuggestionField'\nimport ExtendedChoiceLabel from '../Common/ExtendedChoiceLabel'\nimport { styles } from '../../styles/messageConversationStyles'\nimport theme from '../../styles/theme'\n\nconst NOTIFICATIONS = ['TICKET', 'VALIDATION_RESULT']\nconst maxParticipantsDisplay = 30\n\nclass MessageConversation extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            recipients: [],\n            cursor: 'auto',\n        }\n    }\n\n    backToList = () => {\n        const {\n            clearSelectedMessageConversation,\n            messageConversation,\n        } = this.props\n        history.push(`/${messageConversation.messageType}`)\n        clearSelectedMessageConversation()\n    }\n\n    addRecipients = () => {\n        const users = this.state.recipients.filter(r => r.type === 'user')\n        const userGroups = this.state.recipients.filter(\n            r => r.type === 'userGroup'\n        )\n        const organisationUnits = this.state.recipients.filter(\n            r => r.type === 'organisationUnit'\n        )\n        const {\n            messageConversation,\n            selectedMessageType: messageType,\n        } = this.props\n\n        this.props.addRecipients({\n            users,\n            userGroups,\n            organisationUnits,\n            messageConversation,\n            messageType,\n        })\n\n        this.setState({\n            recipients: [],\n        })\n    }\n\n    updateRecipients = recipients => {\n        this.setState({\n            recipients,\n        })\n    }\n\n    render() {\n        const { messageConversation, currentUser } = this.props\n        const messages = messageConversation.messages\n        const notification = !!(\n            NOTIFICATIONS.indexOf(messageConversation.messageType) + 1\n        )\n        const participants = messageConversation.userMessages\n            .slice(0, maxParticipantsDisplay)\n            .map(userMessage =>\n                !currentUser.id ||\n                this.state.recipientsExpanded ||\n                currentUser.id !== userMessage.user.id\n                    ? userMessage.user.displayName\n                    : i18n.t('me')\n            )\n        const userMessagesLength = messageConversation.userMessages.length\n\n        if (userMessagesLength > maxParticipantsDisplay) {\n            participants.push(\n                ' + '.concat(userMessagesLength - maxParticipantsDisplay)\n            )\n        }\n\n        return (\n            <div id=\"messageconversation\" style={styles.canvas}>\n                <div style={styles.innerCanvas}>\n                    <div style={styles.header}>\n                        <IconButton\n                            style={styles.iconButton}\n                            tooltipPosition=\"bottom-right\"\n                            onClick={this.backToList}\n                            tooltip={i18n.t('Show all messages')}\n                        >\n                            <NavigationBack />\n                        </IconButton>\n                        <Subheader style={styles.subjectSubheader}>\n                            {messageConversation.subject}\n                        </Subheader>\n                        {this.props.displayExtendedChoices && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Status')}\n                                label={messageConversation.status}\n                            />\n                        )}\n                        {this.props.displayExtendedChoices && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Priority')}\n                                label={messageConversation.priority}\n                            />\n                        )}\n                        {notification && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Assignee')}\n                                label={\n                                    messageConversation.assignee\n                                        ? messageConversation.assignee\n                                              .displayName\n                                        : undefined\n                                }\n                            />\n                        )}\n                    </div>\n                    <div style={styles.participantsCanvas}>\n                        <Subheader\n                            style={{\n                                paddingLeft: '12px',\n                                paddingTop: '10px',\n                            }}\n                        >\n                            {i18n.t('Participants')}\n                        </Subheader>\n                        <div style={styles.participants}>\n                            {participants.map(participant => (\n                                <Chip key={participant} style={styles.chip}>\n                                    {participant}\n                                </Chip>\n                            ))}\n                        </div>\n                    </div>\n                    <div style={styles.participantAddRow}>\n                        <SuggestionField\n                            style={styles.participantsSuggestionField}\n                            label={i18n.t('Add participants to conversation')}\n                            messageConversation={messageConversation}\n                            recipients={this.state.recipients}\n                            updateRecipients={this.updateRecipients}\n                            limitSearchArray={messageConversation.userMessages}\n                        />\n                        <div style={styles.participantsAdd}>\n                            <FlatButton\n                                icon={<AddIcon />}\n                                onClick={() => this.addRecipients()}\n                                label={i18n.t('Add')}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div style={styles.messagesCanvas}>\n                    <Paper style={styles.messagesInnerCanvas}>\n                        {messages.map((message, i) => (\n                            <Message\n                                key={message.id}\n                                displayTimeDiff={this.props.displayTimeDiff}\n                                message={message}\n                                messageConversation={messageConversation}\n                                notification={notification}\n                                currentUser={this.state.currentUser}\n                                lastMessage={i + 1 === messages.length}\n                                downloadAttachment={attachment =>\n                                    this.props.downloadAttachment(\n                                        messageConversation.id,\n                                        message.id,\n                                        attachment.id\n                                    )\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                                enableAttachments={this.props.enableAttachments}\n                            />\n                        ))}\n                    </Paper>\n                    <ReplyCard\n                        {...this.props}\n                        messageConversation={messageConversation}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nMessageConversation.propTypes = {\n    addRecipients: propTypes.func,\n    cancelAttachment: propTypes.func,\n    clearSelectedMessageConversation: propTypes.func,\n    currentUser: propTypes.object,\n    displayExtendedChoices: propTypes.bool,\n    displayTimeDiff: propTypes.number,\n    downloadAttachment: propTypes.func,\n    enableAttachments: propTypes.bool,\n    messageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n}\n\nconst mapStateToProps = state => ({\n    currentUser: state.messaging.currentUser,\n    selectedMessageType: state.messaging.selectedMessageType,\n    displayTimeDiff: state.messaging.displayTimeDiff,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default connect(mapStateToProps, {\n    addRecipients,\n    downloadAttachment,\n    cancelAttachment,\n    clearSelectedMessageConversation,\n})(MessageConversation)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\n\nimport CircularProgress from 'material-ui/CircularProgress'\nimport Badge from 'material-ui/Badge'\nimport Subheader from 'material-ui/Subheader/Subheader'\n\nimport i18n from '@dhis2/d2-i18n'\n\nimport theme from '../../styles/theme'\n\nclass MessageTypeItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            backgroundColor: theme.palette.accent2Color,\n            textColor: theme.palette.darkGray,\n        }\n    }\n\n    onClick = () => {\n        this.props.onClick()\n    }\n\n    onMouseEnter = () => {\n        this.setHoverText()\n        this.setState({ cursor: 'pointer' })\n    }\n    onMouseLeave = () => {\n        this.setNeutralText()\n        this.setState({ cursor: 'auto' })\n    }\n\n    setNeutralText = () => this.setTextColor(theme.palette.accent2Color)\n    setHoverText = () => this.setTextColor(theme.palette.accent3Color)\n\n    setTextColor = color => {\n        this.setState({\n            backgroundColor: color,\n        })\n    }\n\n    getBackgroundColor = (selectedValue, id) =>\n        selectedValue && id === selectedValue.id\n            ? theme.palette.accent3Color\n            : this.state.backgroundColor\n\n    render() {\n        return (\n            <div\n                role=\"presentation\"\n                style={{\n                    ...this.state,\n                    backgroundColor: this.getBackgroundColor(\n                        this.props.selectedMessageType,\n                        this.props.messageType.id\n                    ),\n                    cursor: this.state.cursor,\n                    alignItems: 'center',\n                    height: '49px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-between',\n                }}\n                onMouseEnter={this.onMouseEnter}\n                onMouseLeave={this.onMouseLeave}\n                onClick={() => this.onClick()}\n            >\n                <Subheader\n                    style={{\n                        marginLeft: '5px',\n                        fontSize:\n                            this.props.selectedMessageType &&\n                            this.props.messageType.id ===\n                                this.props.selectedMessageType.id\n                                ? '18px'\n                                : '16px',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        color:\n                            this.props.selectedMessageType &&\n                            this.props.messageType.id ===\n                                this.props.selectedMessageType.id\n                                ? theme.palette.primary1Color\n                                : this.state.textColor,\n                    }}\n                >\n                    {i18n.t(this.props.messageType.displayName)}\n                </Subheader>\n                {this.props.loading ? (\n                    <CircularProgress\n                        style={{ marginRight: '10px' }}\n                        color={theme.palette.primary1Color}\n                        size={24}\n                    />\n                ) : (\n                    this.props.messageType.unread > 0 && (\n                        <Badge\n                            style={{ marginTop: '12px', marginRight: '5px' }}\n                            badgeContent={\n                                this.props.messageType.unread > 100\n                                    ? '99+'\n                                    : this.props.messageType.unread\n                            }\n                            secondary\n                            badgeStyle={{ backgroundColor: '#439E8E' }}\n                        />\n                    )\n                )}\n            </div>\n        )\n    }\n}\n\nMessageTypeItem.propTypes = {\n    loading: propTypes.bool,\n    messageType: propTypes.object,\n    selectedMessageType: propTypes.object,\n    onClick: propTypes.func,\n}\n\nexport default MessageTypeItem\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { List } from 'material-ui/List'\nimport Divider from 'material-ui/Divider'\nimport Toggle from 'material-ui/Toggle'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport { setSelectedMessageType, clearCheckedIds } from '../../actions'\nimport MessageTypeItem from './MessageTypeItem'\nimport theme from '../../styles/theme'\nimport moment from 'moment'\n\nconst styles = {\n    canvas: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: 'calc(100vh - 95px)',\n        borderLeftStyle: 'solid',\n        borderLeftWidth: '0.5px',\n        borderLeftColor: theme.palette.accent4Color,\n        borderRightStyle: 'solid',\n        borderRightWidth: '1px',\n        borderRightColor: theme.palette.accent4Color,\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        minWidth: '200px',\n    },\n}\n\nclass SidebarList extends Component {\n    constructor(props) {\n        super(props)\n        this.props.setSelectedMessageType(this.props.match.params.messageType)\n    }\n\n    render() {\n        const messageTypes = this.props.messageTypes\n\n        return (\n            <div style={styles.canvas}>\n                <List\n                    style={{\n                        padding: '0px',\n                    }}\n                >\n                    {messageTypes &&\n                        messageTypes.map(messageType => (\n                            <div key={messageType.id}>\n                                <MessageTypeItem\n                                    messageType={messageType}\n                                    onClick={() => {\n                                        this.props.setSelectedMessageType(\n                                            messageType.id\n                                        )\n                                        this.props.updateInputFields('', '', [])\n                                        this.props.attachments.length > 0 &&\n                                            this.props.clearAttachments()\n                                        history.push(`/${messageType.id}`)\n                                    }}\n                                    selectedMessageType={\n                                        this.props.selectedMessageType\n                                    }\n                                    loading={messageType.loading}\n                                />\n                                <Divider />\n                            </div>\n                        ))}\n                </List>\n                <Toggle\n                    style={{ width: '', margin: '20px' }}\n                    label={`${i18n.t('Auto refresh')} (${moment(\n                        this.props.refreshTimer\n                    ).format('mm:ss')})`}\n                    toggled={this.props.autoRefresh}\n                    onToggle={() =>\n                        this.props.setAutoRefresh(!this.props.autoRefresh)\n                    }\n                />\n            </div>\n        )\n    }\n}\n\nSidebarList.propTypes = {\n    attachments: propTypes.array,\n    autoRefresh: propTypes.bool,\n    clearAttachments: propTypes.func,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    refreshTimer: propTypes.number,\n    selectedMessageType: propTypes.object,\n    setAutoRefresh: propTypes.func,\n    setSelectedMessageType: propTypes.func,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageType: state.messaging.selectedMessageType,\n    messageTypes: state.messaging.messageTypes,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            setSelectedMessageType,\n            clearCheckedIds,\n        },\n        null,\n        { pure: false }\n    )\n)(SidebarList)\n","import theme from '../styles/theme';\nexport const messagePanelContainer = {\n  overflowY: 'scroll',\n  overflowX: 'hidden',\n  borderRightWidth: '1px',\n  borderRightColor: theme.palette.accent4Color,\n  height: 'calc(100vh - 95px)'\n};\nexport const subheader = {\n  paddingLeft: '0px',\n  fontSize: '20px'\n};","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport Checkbox from 'material-ui/Checkbox'\nimport Paper from 'material-ui/Paper'\nimport i18n from '@dhis2/d2-i18n'\nimport { setAllChecked, clearCheckedIds } from '../../actions'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\n\nconst fontSize = '16px'\n\nconst styles = {\n    canvas(backgroundColor) {\n        return {\n            backgroundColor,\n            display: 'flex',\n            transition: 'all 0.2s ease-in-out',\n            boxSizing: 'border-box',\n            position: 'relative',\n            whiteSpace: 'nowrap',\n            alignSelf: 'center',\n            boxShadow: 'none',\n            borderBottom: '1px solid #dfdfdf',\n        }\n    },\n    checkBox: {\n        flex: '0 0 32px',\n        display: 'flex',\n        alignSelf: 'center',\n        paddingLeft: '12px',\n    },\n    sender: {\n        fontFamily,\n        fontSize,\n        flex: 3,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        color: 'black',\n        paddingLeft: 10,\n        alignSelf: 'center',\n    },\n    subject: {\n        flex: 8,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        fontFamily,\n        fontSize,\n        color: 'black',\n        paddingLeft: 10,\n    },\n    extendedLabel: {\n        flex: 2,\n        color: 'black',\n        fontSize,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        padding: '0 0 0 10px',\n    },\n}\n\nclass MessageConversationListItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            cursor: 'auto',\n            allChecked: false,\n        }\n    }\n\n    componentDidUpdate() {\n        if (\n            this.state.allChecked &&\n            this.props.checkedIds.length < this.props.messages.length\n        ) {\n            this.setState({ allChecked: false })\n        }\n    }\n\n    render() {\n        const displayExtendedChoices = this.props.displayExtendedChoices\n\n        return (\n            <Paper style={styles.canvas(theme.palette.canvasColor)}>\n                <Checkbox\n                    checked={this.state.allChecked}\n                    style={styles.checkBox}\n                    onCheck={() => {\n                        this.state.allChecked\n                            ? this.props.clearCheckedIds()\n                            : this.props.setAllChecked(\n                                  this.props.messages.map(child => ({\n                                      id: child.id,\n                                  }))\n                              )\n\n                        this.setState({ allChecked: !this.state.allChecked })\n                    }}\n                />\n                <div style={styles.sender}>{i18n.t('Sender')}</div>\n                <Subheader style={styles.subject}>\n                    {i18n.t('Subject')}\n                </Subheader>\n                {displayExtendedChoices && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Status')}\n                    </Subheader>\n                )}\n                {displayExtendedChoices && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Priority')}\n                    </Subheader>\n                )}\n                {this.props.notification && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Assignee')}\n                    </Subheader>\n                )}\n                <Subheader style={styles.extendedLabel}>\n                    {i18n.t('Date')}\n                </Subheader>\n            </Paper>\n        )\n    }\n}\n\nMessageConversationListItem.propTypes = {\n    checkedIds: propTypes.array,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    messages: propTypes.array,\n    notification: propTypes.bool,\n    setAllChecked: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    checkedIds: state.messaging.checkedIds,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n})\n\nexport default compose(\n    connect(mapStateToProps, {\n        setAllChecked,\n        clearCheckedIds,\n    })\n)(MessageConversationListItem)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport Checkbox from 'material-ui/Checkbox'\nimport Paper from 'material-ui/Paper'\nimport Flag from 'material-ui-icons/Flag'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport {\n    setChecked,\n    setSelectedMessageConversation,\n    markMessageConversations,\n    clearCheckedIds,\n    setFilter,\n    updateInputFields,\n    clearAttachments,\n} from '../../actions'\nimport ExtendedChoiceLabel from '../Common/ExtendedChoiceLabel'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\nimport moment from 'moment'\n\nconst styles = {\n    container(backgroundColor, wideview, cursor) {\n        return {\n            backgroundColor,\n            display: 'flex',\n            transition: 'all 0.2s ease-in-out',\n            cursor: cursor,\n            boxSizing: 'border-box',\n            position: 'relative',\n            whiteSpace: 'nowrap',\n            boxShadow: 'none',\n            borderBottom: '1px solid #dfdfdf',\n            flexWrap: wideview ? 'nowrap' : 'wrap',\n        }\n    },\n    checkBox(wideview) {\n        return {\n            flex: '0 0 32px',\n            display: 'flex',\n            alignSelf: 'center',\n            paddingLeft: wideview ? 12 : 6,\n        }\n    },\n    flag: {\n        color: theme.palette.followUp,\n        marginRight: 4,\n    },\n    sender(wideview, fontWeight) {\n        return {\n            fontFamily,\n            fontSize: '14px',\n            flex: 3,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            display: 'flex',\n            alignItems: 'center',\n            color: 'black',\n            paddingLeft: wideview ? 10 : 0,\n            fontWeight,\n        }\n    },\n    subject(wideview, fontColor, fontWeight) {\n        return {\n            flex: 8,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            paddingLeft: 10,\n            fontFamily,\n            color: fontColor,\n            fontWeight,\n            order: wideview ? 'inherit' : 10,\n            marginTop: wideview ? 0 : -10,\n            flexBasis: wideview ? '0%' : '100%',\n        }\n    },\n    dateFormat(wideview, fontColor, fontWeight) {\n        return {\n            flex: 2,\n            fontFamily,\n            paddingLeft: wideview ? 10 : 0,\n            paddingRight: wideview ? 0 : 10,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            textAlign: wideview ? '' : 'end',\n            color: fontColor,\n            fontWeight,\n        }\n    },\n}\n\nclass MessageConversationListItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            backgroundColor: theme.palette.canvasColor,\n            cursor: 'auto',\n        }\n    }\n\n    onClick = messageConversation => {\n        this.props.setSelectedMessageConversation(messageConversation)\n        if (messageConversation && !messageConversation.read) {\n            this.props.markMessageConversations(\n                'read',\n                [messageConversation.id],\n                this.props.selectedMessageType\n            )\n        }\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n        history.push(\n            `/${messageConversation.messageType}/${messageConversation.id}`\n        )\n    }\n\n    onMouseEnter = () =>\n        this.setState({\n            cursor: 'pointer',\n            backgroundColor: theme.palette.accent2Color,\n        })\n    onMouseLeave = () =>\n        this.setState({\n            cursor: 'auto',\n            backgroundColor: theme.palette.canvasColor,\n        })\n\n    getBackgroundColor = (messageConversation, checked) => {\n        const selectedMessageConversation =\n            this.props.selectedMessageConversation &&\n            messageConversation.id === this.props.selectedMessageConversation.id\n\n        if (checked && !selectedMessageConversation) {\n            return theme.palette.blue50\n        } else if (selectedMessageConversation) {\n            return theme.palette.accent3Color\n        }\n        return this.state.backgroundColor\n    }\n\n    render() {\n        const messageConversation = this.props.messageConversation\n        const title = messageConversation.lastSender\n            ? messageConversation.lastSender.displayName\n            : this.props.selectedMessageType.displayName\n        const checked = !!this.props.checkedIds.find(\n            x => x.id === messageConversation.id\n        )\n\n        const displayExtendedChoices = this.props.displayExtendedChoices\n\n        const displayTimeDiff = this.props.displayTimeDiff\n\n        const today = moment()\n        const messageDate = moment(messageConversation.lastMessage).add(\n            displayTimeDiff\n        )\n        const fontWeight = !messageConversation.read ? 'bold' : ''\n        const fontColor = this.props.messageConversation.read\n            ? 'black'\n            : theme.palette.darkGray\n\n        const containerBackgroundColor = this.getBackgroundColor(\n            messageConversation,\n            checked\n        )\n\n        return (\n            <Paper\n                style={styles.container(\n                    containerBackgroundColor,\n                    this.props.wideview,\n                    this.state.cursor\n                )}\n                onClick={event => {\n                    const onClick =\n                        event.target.innerText !== undefined &&\n                        event.target.innerText !== ''\n\n                    if (\n                        onClick &&\n                        !this.props.settingSelectedMessageConversation\n                    ) {\n                        this.onClick(messageConversation)\n                        this.props.checkedIds.length > 0 &&\n                            this.props.clearCheckedIds()\n                        if (\n                            this.props.wideview &&\n                            (this.props.messageFilter !== undefined ||\n                                this.props.priorityFilter !== undefined ||\n                                this.props.statusFilter !== undefined)\n                        ) {\n                            this.props.setFilter(undefined, 'MESSAGE')\n                        }\n                    }\n                }}\n                onMouseEnter={this.onMouseEnter}\n                onMouseLeave={this.onMouseLeave}\n            >\n                <Checkbox\n                    checked={checked}\n                    style={styles.checkBox(this.props.wideview)}\n                    onCheck={() => {\n                        this.props.setChecked(messageConversation, !checked)\n                    }}\n                />\n                <div style={styles.sender(this.props.wideview, fontWeight)}>\n                    {messageConversation.followUp && (\n                        <Flag style={styles.flag} />\n                    )}\n                    <span>{title}</span>\n                </div>\n                <Subheader\n                    style={styles.subject(\n                        this.props.wideview,\n                        fontColor,\n                        fontWeight\n                    )}\n                >\n                    {messageConversation.subject}\n                </Subheader>\n                {displayExtendedChoices && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Status')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={messageConversation.status}\n                    />\n                )}\n                {displayExtendedChoices && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Priority')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={messageConversation.priority}\n                    />\n                )}\n                {this.props.notification && this.props.wideview && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Assignee')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={\n                            messageConversation.assignee\n                                ? messageConversation.assignee.displayName\n                                : undefined\n                        }\n                    />\n                )}\n                <Subheader\n                    style={styles.dateFormat(\n                        this.props.wideview,\n                        fontColor,\n                        fontWeight\n                    )}\n                >\n                    {today.diff(messageDate, 'hours') < 72\n                        ? messageDate.from(today)\n                        : today.year() === messageDate.year()\n                        ? messageDate.format('MMM DD')\n                        : messageDate.format('ll')}\n                </Subheader>\n            </Paper>\n        )\n    }\n}\n\nMessageConversationListItem.propTypes = {\n    attachments: propTypes.array,\n    checkedIds: propTypes.array,\n    clearAttachments: propTypes.func,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    displayTimeDiff: propTypes.number,\n    markMessageConversations: propTypes.func,\n    messageConversation: propTypes.object,\n    messageFilter: propTypes.string,\n    notification: propTypes.bool,\n    priorityFilter: propTypes.string,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setChecked: propTypes.func,\n    setFilter: propTypes.func,\n    setSelectedMessageConversation: propTypes.func,\n    settingSelectedMessageConversation: propTypes.bool,\n    statusFilter: propTypes.string,\n    updateInputFields: propTypes.func,\n    wideview: propTypes.bool,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    settingSelectedMessageConversation:\n        state.messaging.settingSelectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n    checkedIds: state.messaging.checkedIds,\n    displayTimeDiff: state.messaging.displayTimeDiff,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    attachments: state.messaging.attachments,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            setChecked,\n            setSelectedMessageConversation,\n            markMessageConversations,\n            clearCheckedIds,\n            setFilter,\n            updateInputFields,\n            clearAttachments,\n        },\n        null,\n        { pure: false }\n    )\n)(MessageConversationListItem)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport CircularProgress from 'material-ui/CircularProgress'\nimport i18n from '@dhis2/d2-i18n'\nimport { loadMessageConversations } from '../../actions'\nimport { messagePanelContainer } from '../../styles/style'\nimport theme from '../../styles/theme'\nimport ListItemHeader from './ListItemHeader'\nimport MessageConversationListItem from './MessageConversationListItem'\nimport { dedupeById, debounce } from '../../utils/helpers'\n\nconst NOTIFICATIONS = ['VALIDATION_RESULT', 'TICKET']\nconst bottomEmptyHeight = 50\n\nconst styles = {\n    canvas(wideview) {\n        return {\n            flex: '1 0',\n            maxWidth: wideview ? 'none' : '350px',\n            minWidth: wideview ? 'none' : '250px',\n            borderRightStyle: wideview ? '' : 'solid',\n            ...messagePanelContainer,\n        }\n    },\n    loading: {\n        backgroundColor: theme.palette.accent2Color,\n        height: `${bottomEmptyHeight}px`,\n        transition: 'all 0.2s ease-in-out',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n}\n\nclass MessageConversationList extends Component {\n    onScroll = messageType => {\n        const messageList = document.getElementById('messagelist')\n        if (\n            !this.props.selectedMessageType.loading &&\n            this.isBottom(messageList) &&\n            messageType.loaded < messageType.total\n        ) {\n            this.props.loadMessageConversations(\n                messageType,\n                messageType.id,\n                true\n            )\n        }\n    }\n\n    debouncedOnScroll = debounce(this.onScroll, 150)\n    isBottom = el => el.scrollHeight - el.scrollTop < window.outerHeight\n\n    render() {\n        const messages = dedupeById(\n            this.props.messageConversations[this.props.selectedMessageType.id]\n        )\n\n        const messageType = this.props.selectedMessageType\n            ? this.props.selectedMessageType\n            : ''\n        const selectedValue = this.props.selectedMessageConversation\n            ? this.props.selectedMessageConversation.id\n            : ''\n\n        const notification = !!(NOTIFICATIONS.indexOf(messageType.id) + 1)\n        return (\n            <div\n                id={'messagelist'}\n                onScroll={() =>\n                    this.debouncedOnScroll(this.props.selectedMessageType)\n                }\n                style={styles.canvas(this.props.wideview)}\n            >\n                {this.props.wideview && (\n                    <ListItemHeader\n                        notification={notification}\n                        displayExtendedChoices={\n                            this.props.displayExtendedChoices\n                        }\n                        messages={messages}\n                    />\n                )}\n                {messages && messages.length !== 0\n                    ? messages.map(child => (\n                          <MessageConversationListItem\n                              key={child.id}\n                              messageConversation={child}\n                              wideview={this.props.wideview}\n                              selectedValue={selectedValue}\n                              notification={notification}\n                              displayExtendedChoices={\n                                  this.props.displayExtendedChoices\n                              }\n                          />\n                      ))\n                    : !this.props.selectedMessageType.loading && (\n                          <Subheader>\n                              {i18n.t(\n                                  `No ${messageType.displayName.toLowerCase()} messages`\n                              )}\n                          </Subheader>\n                      )}\n                {this.props.selectedMessageType.loading && (\n                    <div style={styles.loading}>\n                        <CircularProgress\n                            style={{ marginTop: '10px' }}\n                            color={theme.palette.primary1Color}\n                        />\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nMessageConversationList.propTypes = {\n    displayExtendedChoices: propTypes.bool,\n    loadMessageConversations: propTypes.func,\n    messageConversations: propTypes.object,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.shape({\n        id: propTypes.string,\n        loading: propTypes.bool,\n    }),\n    wideview: propTypes.bool,\n}\n\nconst mapStateToProps = state => ({\n    messageTypes: state.messaging.messageTypes,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    messageConversations: state.messaging.messageConversations,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            loadMessageConversations,\n        },\n        null,\n        { pure: false }\n    )\n)(MessageConversationList)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport i18n from '@dhis2/d2-i18n'\nimport { Card, CardActions, CardText } from 'material-ui/Card'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport TextField from 'material-ui/TextField'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport RadioButton from 'material-ui/RadioButton'\nimport {\n    sendMessage,\n    sendFeedbackMessage,\n    displaySnackMessage,\n    updateInputFields,\n    addAttachment,\n    removeAttachment,\n    cancelAttachment,\n    addRecipientByUserId,\n} from '../../actions'\nimport history from '../../utils/history'\nimport { supportsAttachments } from '../../utils/helpers'\nimport SuggestionField from '../Common/SuggestionField'\nimport AttachmentUploadButton from '../Attachments/AttachmentUploadButton'\nimport { NEGATIVE } from '../../constants/development'\nimport Attachments from '../Attachments/Attachments'\nimport { subheader } from '../../styles/style'\n\nconst styles = {\n    canvas: {\n        flex: '3 0',\n        margin: '10px',\n        overflowY: 'scroll',\n        overflowX: 'hidden',\n        height: 'calc(100vh - 110px)',\n    },\n    messageTypeField: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    messageType: { width: '300px', marginTop: '10px' },\n}\n\nclass CreateMessage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            isMessageFeedback: false,\n        }\n    }\n\n    componentDidMount() {\n        const { addRecipientByUserId } = this.props\n        const { messageId, recipientId } = this.props.match.params\n\n        // This happens when the \"Send message\" button in the user-app is clicked\n        if (messageId === 'create' && recipientId) {\n            addRecipientByUserId(recipientId)\n        }\n    }\n\n    subjectUpdate = (event, newValue) => {\n        this.props.updateInputFields(\n            newValue,\n            this.props.input,\n            this.props.recipients\n        )\n    }\n\n    inputUpdate = (event, newValue) => {\n        this.props.updateInputFields(\n            this.props.subject,\n            newValue,\n            this.props.recipients\n        )\n    }\n\n    updateRecipients = recipients => {\n        this.props.updateInputFields(\n            this.props.subject,\n            this.props.input,\n            recipients\n        )\n    }\n\n    sendMessage = () => {\n        const messageTypeId = this.state.isMessageFeedback\n            ? 'TICKET'\n            : 'PRIVATE'\n        const messageType = this.props.messageTypes.find(\n            messageType => messageType.id === messageTypeId\n        )\n\n        if (this.state.isMessageFeedback) {\n            this.props.sendFeedbackMessage(messageType)\n            history.push('/TICKET')\n        } else {\n            const users = this.props.recipients.filter(r => r.type === 'user')\n            const userGroups = this.props.recipients.filter(\n                r => r.type === 'userGroup'\n            )\n            const organisationUnits = this.props.recipients.filter(\n                r => r.type === 'organisationUnit'\n            )\n\n            this.props.sendMessage({\n                users,\n                userGroups,\n                organisationUnits,\n                messageType,\n            })\n            history.push('/PRIVATE')\n        }\n    }\n\n    wipeInput = () => {\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n    }\n\n    handleDiscard = () => {\n        const message = i18n.t('Message discarded')\n        const snackType = NEGATIVE\n        const onSnackActionClick = () => history.push('/PRIVATE/create')\n        const onSnackRequestClose = () => this.wipeInput()\n\n        this.props.displaySnackMessage({\n            message,\n            onSnackActionClick,\n            onSnackRequestClose,\n            snackType,\n        })\n\n        history.push('/PRIVATE')\n    }\n\n    render() {\n        const disabled =\n            this.props.subject === '' ||\n            this.props.input === '' ||\n            (!this.state.isMessageFeedback &&\n                this.props.recipients.length === 0)\n\n        const discardDisabled =\n            this.props.subject === '' &&\n            this.props.input === '' &&\n            !this.state.isMessageFeedback &&\n            this.props.recipients.length === 0\n\n        return (\n            <div style={styles.canvas}>\n                <Subheader style={subheader}> {i18n.t('Create')}</Subheader>\n                <Card>\n                    <CardText>\n                        <SuggestionField\n                            style={{ margin: '0px' }}\n                            label={i18n.t('To')}\n                            disabled={this.state.isMessageFeedback}\n                            recipients={\n                                this.state.isMessageFeedback\n                                    ? [\n                                          {\n                                              id: 'id',\n                                              displayName: i18n.t(\n                                                  'Feedback recipient group'\n                                              ),\n                                          },\n                                      ]\n                                    : this.props.recipients\n                            }\n                            updateRecipients={this.updateRecipients}\n                            inputHeight={'100px'}\n                        />\n                        <div style={styles.messageTypeField}>\n                            <div style={styles.messageType}>\n                                <RadioButton\n                                    label={i18n.t('Private message')}\n                                    checked={!this.state.isMessageFeedback}\n                                    onCheck={() => {\n                                        this.setState({\n                                            isMessageFeedback: !this.state\n                                                .isMessageFeedback,\n                                        })\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.messageType}>\n                                <RadioButton\n                                    label={i18n.t('Feedback message')}\n                                    checked={this.state.isMessageFeedback}\n                                    onCheck={() => {\n                                        this.setState({\n                                            isMessageFeedback: !this.state\n                                                .isMessageFeedback,\n                                        })\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <TextField\n                            floatingLabelText={i18n.t('Subject')}\n                            fullWidth\n                            value={this.props.subject}\n                            onChange={this.subjectUpdate}\n                        />\n                        <TextField\n                            key={'createMessage'}\n                            id={'createMessage'}\n                            rows={5}\n                            underlineShow={false}\n                            value={this.props.input}\n                            multiLine\n                            fullWidth\n                            floatingLabelText={i18n.t('Message')}\n                            onChange={this.inputUpdate}\n                        />\n                        {this.props.enableAttachments && (\n                            <Attachments\n                                dataDirection={'upload'}\n                                attachments={this.props.attachments}\n                                removeAttachment={attachment =>\n                                    this.props.removeAttachment(attachment.id)\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                            />\n                        )}\n                        <CardActions style={{ paddingLeft: '0px' }}>\n                            <RaisedButton\n                                primary\n                                disabled={disabled}\n                                label={i18n.t('Send')}\n                                onClick={() => this.sendMessage()}\n                            />\n                            <FlatButton\n                                label={i18n.t('Discard')}\n                                disabled={discardDisabled}\n                                onClick={this.handleDiscard}\n                            />\n                            {this.props.enableAttachments && (\n                                <AttachmentUploadButton\n                                    addAttachment={attachment => {\n                                        this.props.addAttachment(attachment)\n                                    }}\n                                />\n                            )}\n                        </CardActions>\n                    </CardText>\n                </Card>\n            </div>\n        )\n    }\n}\n\nCreateMessage.propTypes = {\n    addAttachment: propTypes.func,\n    addRecipientByUserId: propTypes.func,\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    clearAttachments: propTypes.func,\n    displaySnackMessage: propTypes.func,\n    enableAttachments: propTypes.bool,\n    input: propTypes.string,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    recipients: propTypes.array,\n    removeAttachment: propTypes.func,\n    sendFeedbackMessage: propTypes.func,\n    sendMessage: propTypes.func,\n    subject: propTypes.string,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    messageTypes: state.messaging.messageTypes,\n    subject: state.messaging.subject,\n    input: state.messaging.input,\n    recipients: state.messaging.recipients,\n    attachments: state.messaging.attachments,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            sendMessage,\n            sendFeedbackMessage,\n            displaySnackMessage,\n            updateInputFields,\n            addAttachment,\n            removeAttachment,\n            cancelAttachment,\n            addRecipientByUserId,\n        },\n        null,\n        { pure: false }\n    )\n)(CreateMessage)\n","import i18n from '@dhis2/d2-i18n';\nconst extendedChoices = {\n  STATUS: [{\n    key: 'NONE',\n    value: 'NONE',\n    primaryText: i18n.t('No status')\n  }, {\n    key: 'OPEN',\n    value: 'OPEN',\n    primaryText: i18n.t('Open')\n  }, {\n    key: 'PENDING',\n    value: 'PENDING',\n    primaryText: i18n.t('Pending')\n  }, {\n    key: 'INVALID',\n    value: 'INVALID',\n    primaryText: i18n.t('Invalid')\n  }, {\n    key: 'SOLVED',\n    value: 'SOLVED',\n    primaryText: i18n.t('Solved')\n  }],\n  PRIORITY: [{\n    key: 'NONE',\n    value: 'NONE',\n    primaryText: i18n.t('No priority')\n  }, {\n    key: 'HIGH',\n    value: 'HIGH',\n    primaryText: i18n.t('High')\n  }, {\n    key: 'MEDIUM',\n    value: 'MEDIUM',\n    primaryText: i18n.t('Medium')\n  }, {\n    key: 'LOW',\n    value: 'LOW',\n    primaryText: i18n.t('Low')\n  }]\n};\nexport default extendedChoices;","import React from 'react';\nimport propTypes from '@dhis2/prop-types';\nimport { Provider, ReactReduxContext } from 'react-redux';\nimport Dialog from 'material-ui/Dialog';\nexport default function DialogWithReduxState(props) {\n  return <ReactReduxContext.Consumer>\n            {ctx => <Dialog {...props}>\n                    <Provider store={ctx.store}>{props.children}</Provider>\n                </Dialog>}\n        </ReactReduxContext.Consumer>;\n}\nDialogWithReduxState.propTypes = {\n  children: propTypes.node\n};","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport i18n from '@dhis2/d2-i18n'\nimport SuggestionField from './SuggestionField'\nimport DialogWithReduxState from './DialogWithReduxState'\n\nconst AssignToDialog = ({\n    open,\n    onRequestClose,\n    updateMessageConversations,\n    messageType,\n    feedbackRecipientsId,\n}) => (\n    <DialogWithReduxState\n        open={open}\n        onRequestClose={() => {\n            onRequestClose()\n        }}\n    >\n        <SuggestionField\n            onSuggestionClick={chip => {\n                updateMessageConversations([chip.id])\n                onRequestClose()\n            }}\n            searchOnlyUsers\n            searchOnlyFeedbackRecipients={messageType.id === 'TICKET'}\n            feedbackRecipientsId={feedbackRecipientsId}\n            recipients={[]}\n            key={'suggestionField'}\n            label={i18n.t('Assignee')}\n        />\n    </DialogWithReduxState>\n)\n\nAssignToDialog.propTypes = {\n    feedbackRecipientsId: propTypes.string,\n    messageType: propTypes.shape({ id: propTypes.string }),\n    open: propTypes.bool,\n    updateMessageConversations: propTypes.func,\n    onRequestClose: propTypes.func,\n}\n\nexport default AssignToDialog\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport FlatButton from 'material-ui/FlatButton'\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert'\nimport ArrowDropRight from 'material-ui/svg-icons/navigation-arrow-drop-right'\nimport Assignment from 'material-ui-icons/Assignment'\nimport IconMenu from 'material-ui/IconMenu'\nimport MenuItem from 'material-ui/MenuItem'\nimport IconButton from 'material-ui/IconButton'\nimport Subheader from 'material-ui/Subheader'\nimport Divider from 'material-ui/Divider'\nimport Delete from 'material-ui-icons/Delete'\nimport MarkUnread from 'material-ui-icons/Markunread'\nimport Done from 'material-ui-icons/Done'\nimport i18n from '@dhis2/d2-i18n'\nimport {\n    clearCheckedIds,\n    clearSelectedMessageConversation,\n    deleteMessageConversations,\n    updateMessageConversations,\n    markMessageConversations,\n} from '../../actions'\nimport extendedChoices from '../../constants/extendedChoices'\nimport history from '../../utils/history'\nimport AssignToDialog from './AssignToDialog'\nimport DialogWithReduxState from './DialogWithReduxState'\n\nconst multiSelectDisplayLimit = 99\n\nconst styles = {\n    canvas: {\n        width: '400px',\n        display: 'flex',\n    },\n    extendedChoices: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n    },\n    nrSelected: {\n        padding: '0px 0px',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n}\n\nclass ToolbarExtendedChoicePicker extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            checkedItems: false,\n            dialogOpen: false,\n            assignToOpen: false,\n        }\n    }\n\n    getIds = () =>\n        this.props.selectedMessageConversation &&\n        this.props.checkedIds.length === 0\n            ? [this.props.selectedMessageConversation.id]\n            : this.props.checkedIds.map(id => id.id)\n\n    updateMessageConversation = (identifier, value) => {\n        const {\n            selectedMessageType: messageType,\n            selectedMessageConversation,\n        } = this.props\n        const messageConversationIds = this.getIds()\n\n        this.props.updateMessageConversations({\n            messageConversationIds,\n            identifier,\n            value,\n            messageType,\n            selectedMessageConversation,\n        })\n        this.props.checkedIds.length > 0 && this.props.clearCheckedIds()\n    }\n\n    markMessageConversations = mode => {\n        const ids = this.getIds()\n        this.props.markMessageConversations(\n            mode,\n            ids,\n            this.props.selectedMessageType\n        )\n        this.props.checkedIds.length > 0 && this.props.clearCheckedIds()\n    }\n\n    toggleDialog = () => {\n        this.setState({ dialogOpen: !this.state.dialogOpen })\n    }\n\n    render() {\n        const messageConversation = this.props.selectedMessageConversation\n        const multiSelect = this.props.checkedIds.length > 0\n        const display = multiSelect || messageConversation !== undefined\n\n        const actionButtons = (\n            <>\n                <FlatButton\n                    label={i18n.t('Cancel')}\n                    primary\n                    onClick={() => this.toggleDialog()}\n                />\n                <FlatButton\n                    label={i18n.t('Submit')}\n                    primary\n                    keyboardFocused\n                    onClick={() => {\n                        this.props.deleteMessageConversations(\n                            this.getIds(),\n                            this.props.selectedMessageType\n                        )\n                        this.props.clearCheckedIds()\n                        this.toggleDialog()\n\n                        if (this.props.selectedMessageConversation) {\n                            this.props.clearSelectedMessageConversation()\n                            history.push(\n                                `/${this.props.selectedMessageType.id}`\n                            )\n                        }\n                    }}\n                />\n            </>\n        )\n\n        const displayNumberOfCheckedIds =\n            this.props.checkedIds.length > multiSelectDisplayLimit\n                ? `${multiSelectDisplayLimit}+`\n                : this.props.checkedIds.length\n\n        return display ? (\n            <div style={styles.canvas}>\n                <DialogWithReduxState\n                    title={i18n.t(\n                        'Are you sure you want to delete selected message conversation(s)?'\n                    )}\n                    actions={actionButtons}\n                    modal={false}\n                    open={this.state.dialogOpen}\n                    onRequestClose={this.toggleDialog}\n                />\n                <AssignToDialog\n                    open={this.state.assignToOpen}\n                    onRequestClose={() =>\n                        this.setState({\n                            assignToOpen: !this.state.assignToOpen,\n                        })\n                    }\n                    updateMessageConversations={id =>\n                        this.updateMessageConversation('ASSIGNEE', id)\n                    }\n                    messageType={this.props.selectedMessageType}\n                    feedbackRecipientsId={this.props.feedbackRecipientsId}\n                />\n\n                <div style={styles.extendedChoices}>\n                    <IconButton\n                        tooltip={i18n.t('Delete selected')}\n                        onClick={() => {\n                            this.toggleDialog()\n                        }}\n                    >\n                        <Delete />\n                    </IconButton>\n\n                    <IconButton\n                        tooltip={i18n.t('Mark selected as unread')}\n                        onClick={() => {\n                            this.markMessageConversations('unread')\n                        }}\n                    >\n                        <MarkUnread />\n                    </IconButton>\n\n                    <IconButton\n                        tooltip={i18n.t('Mark selected as read')}\n                        onClick={() => {\n                            this.markMessageConversations('read')\n                        }}\n                    >\n                        <Done />\n                    </IconButton>\n                    {this.props.displayExtendedChoices && (\n                        <IconButton\n                            onClick={() =>\n                                this.setState({\n                                    assignToOpen: !this.state.assignToOpen,\n                                })\n                            }\n                            tooltip={i18n.t('Assign selected')}\n                        >\n                            <Assignment />\n                        </IconButton>\n                    )}\n                    {\n                        <IconMenu\n                            iconButtonElement={\n                                <IconButton>\n                                    <MoreVertIcon />\n                                </IconButton>\n                            }\n                            anchorOrigin={{\n                                horizontal: 'left',\n                                vertical: 'top',\n                            }}\n                            targetOrigin={{\n                                horizontal: 'left',\n                                vertical: 'top',\n                            }}\n                        >\n                            <MenuItem\n                                key={'markFollowUp'}\n                                value={'markFollowUp'}\n                                primaryText={i18n.t('Mark for followup')}\n                                onClick={() =>\n                                    this.updateMessageConversation(\n                                        'FOLLOW_UP',\n                                        true\n                                    )\n                                }\n                            />\n                            <MenuItem\n                                key={'clearFollowUp'}\n                                value={'clearFollowUp'}\n                                primaryText={i18n.t('Clear followup')}\n                                onClick={() =>\n                                    this.updateMessageConversation(\n                                        'FOLLOW_UP',\n                                        false\n                                    )\n                                }\n                            />\n                            {this.props.displayExtendedChoices && <Divider />}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    key={'clearAssigned'}\n                                    value={'clearAssigned'}\n                                    primaryText={i18n.t('Clear assignee')}\n                                    onClick={() =>\n                                        this.updateMessageConversation(\n                                            'ASSIGNEE',\n                                            undefined\n                                        )\n                                    }\n                                />\n                            )}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    primaryText={i18n.t('Set status')}\n                                    key={'setStatus'}\n                                    rightIcon={<ArrowDropRight />}\n                                    menuItems={extendedChoices.STATUS.map(\n                                        elem => (\n                                            <MenuItem\n                                                key={`${elem.key}_status`}\n                                                value={elem.value}\n                                                primaryText={elem.primaryText}\n                                                onClick={() =>\n                                                    this.updateMessageConversation(\n                                                        'STATUS',\n                                                        elem.key\n                                                    )\n                                                }\n                                            />\n                                        )\n                                    )}\n                                />\n                            )}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    primaryText={i18n.t('Set priority')}\n                                    key={'setPriority'}\n                                    rightIcon={<ArrowDropRight />}\n                                    menuItems={extendedChoices.PRIORITY.map(\n                                        elem => (\n                                            <MenuItem\n                                                key={`${elem.key}_priority`}\n                                                value={elem.value}\n                                                primaryText={elem.primaryText}\n                                                onClick={() =>\n                                                    this.updateMessageConversation(\n                                                        'PRIORITY',\n                                                        elem.key\n                                                    )\n                                                }\n                                            />\n                                        )\n                                    )}\n                                />\n                            )}\n                        </IconMenu>\n                    }\n                </div>\n                {multiSelect && (\n                    <Subheader style={styles.nrSelected}>\n                        {`${displayNumberOfCheckedIds} ${i18n.t('selected')}`}\n                    </Subheader>\n                )}\n            </div>\n        ) : (\n            <div />\n        )\n    }\n}\n\nToolbarExtendedChoicePicker.propTypes = {\n    checkedIds: propTypes.array,\n    clearCheckedIds: propTypes.func,\n    clearSelectedMessageConversation: propTypes.func,\n    deleteMessageConversations: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    feedbackRecipientsId: propTypes.string,\n    markMessageConversations: propTypes.func,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    updateMessageConversations: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageType: state.messaging.selectedMessageType,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    checkedIds: state.messaging.checkedIds,\n    feedbackRecipientsId: state.messaging.feedbackRecipientsId,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            clearCheckedIds,\n            clearSelectedMessageConversation,\n            deleteMessageConversations,\n            updateMessageConversations,\n            markMessageConversations,\n        },\n        null,\n        { pure: false }\n    )\n)(ToolbarExtendedChoicePicker)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport ViewFancy from 'material-ui-icons/ViewList'\nimport ViewList from 'material-ui-icons/ViewHeadline'\nimport FlatButton from 'material-ui/FlatButton'\nimport Paper from 'material-ui/Paper'\nimport CreateMessageIcon from 'material-ui-icons/Add'\nimport NavigationBack from 'material-ui-icons/ArrowBack'\nimport TextField from 'material-ui/TextField'\nimport SelectField from 'material-ui/SelectField'\nimport MenuItem from 'material-ui/MenuItem'\nimport Subheader from 'material-ui/Subheader'\nimport IconMenu from 'material-ui/IconMenu'\nimport IconButton from 'material-ui/IconButton'\nimport Checkbox from 'material-ui/Checkbox/Checkbox'\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport theme from '../../styles/theme'\nimport extendedChoices from '../../constants/extendedChoices'\nimport ToolbarExtendedChoicePicker from './ToolbarExtendedChoicePicker'\nimport { debounce } from '../../utils/helpers'\n\nconst headerHeight = '48px'\nconst searchDelay = 300\n\nconst styles = {\n    canvas(checkedOptions) {\n        return {\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            backgroundColor: checkedOptions\n                ? theme.palette.blue50\n                : theme.palette.accent2Color,\n            zIndex: 10,\n        }\n    },\n    checkedOption: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        minWidth: '200px',\n        margin: '6px 0',\n    },\n    filterControl: {\n        flex: 2,\n        height: headerHeight,\n        marginRight: 16,\n        maxWidth: 256,\n    },\n    rightHandCanvas: {\n        flex: '2 0',\n        display: 'flex',\n        paddingLeft: 16,\n    },\n    // IE11 has buggy support for `justifyContent: flex-end;`\n    // to achieve the same result we use a spacer div\n    ie11Spacer: {\n        flexGrow: 1,\n    },\n    iconMenu: {\n        width: '30px',\n        display: 'flex',\n    },\n}\n\nclass Toolbar extends Component {\n    state = {\n        lastMessageFilter: '',\n    }\n    debouncedSearch = debounce(this.search, searchDelay)\n\n    search(messageFilter) {\n        if (\n            this.props.selectedMessageType &&\n            this.state.lastMessageFilter !== messageFilter\n        ) {\n            this.props.loadMessageConversations(\n                this.props.selectedMessageType,\n                this.props.selectedMessageType.id\n            )\n            this.setState({ lastMessageFilter: messageFilter })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.selectedMessageType &&\n            this.props.selectedMessageType.id !==\n                prevProps.selectedMessageType.id\n        ) {\n            this.debouncedSearch('')\n            this.props.messageFilter !== undefined &&\n                this.props.setFilter(undefined, 'MESSAGE')\n            this.props.statusFilter !== undefined &&\n                this.props.setFilter(undefined, 'STATUS')\n            this.props.priorityFilter !== undefined &&\n                this.props.setFilter(undefined, 'PRIORITY')\n            this.props.assignedToMeFilter &&\n                this.props.setFilter(false, 'ASSIGNED_TO_ME')\n            this.props.markedForFollowUpFilter &&\n                this.props.setFilter(false, 'MARKED_FOR_FOLLOWUP')\n            this.props.unreadFilter && this.props.setFilter(false, 'UNREAD')\n        }\n\n        if (\n            this.props.selectedMessageType !== undefined &&\n            !this.props.selectedMessageType.loading &&\n            (prevProps.statusFilter !== this.props.statusFilter ||\n                prevProps.priorityFilter !== this.props.priorityFilter ||\n                prevProps.assignedToMeFilter !==\n                    this.props.assignedToMeFilter ||\n                prevProps.markedForFollowUpFilter !==\n                    this.props.markedForFollowUpFilter ||\n                prevProps.unreadFilter !== this.props.unreadFilter ||\n                prevProps.selectedMessageType === undefined ||\n                prevProps.selectedMessageType.id !==\n                    this.props.selectedMessageType.id)\n        ) {\n            this.props.loadMessageConversations(\n                this.props.selectedMessageType,\n                this.props.selectedMessageType.id\n            )\n        }\n    }\n\n    render() {\n        const id = this.props.id\n        const displayExtendedChoices = this.props.displayExtendedChoices\n        const checkedOptions = this.props.checkedOptions\n\n        const displaySearch =\n            !this.props.wideview ||\n            (this.props.selectedMessageConversation === undefined &&\n                id !== 'create')\n\n        return (\n            <Paper style={styles.canvas(checkedOptions)}>\n                <div>\n                    {!checkedOptions && (\n                        <FlatButton\n                            style={styles.checkedOption}\n                            icon={<CreateMessageIcon />}\n                            onClick={() => history.push('/PRIVATE/create')}\n                            label={i18n.t('Compose')}\n                        />\n                    )}\n\n                    {checkedOptions && (\n                        <FlatButton\n                            style={styles.checkedOption}\n                            icon={<NavigationBack />}\n                            onClick={() => this.props.clearCheckedIds()}\n                            label={i18n.t('Deselect all')}\n                        />\n                    )}\n                </div>\n\n                <ToolbarExtendedChoicePicker\n                    displayExtendedChoices={displayExtendedChoices}\n                />\n\n                <div style={styles.rightHandCanvas}>\n                    <div style={styles.ie11Spacer} />\n                    {displayExtendedChoices &&\n                        displaySearch &&\n                        !checkedOptions && (\n                            <SelectField\n                                style={styles.filterControl}\n                                labelStyle={{\n                                    color:\n                                        this.props.statusFilter === undefined\n                                            ? 'lightGray'\n                                            : 'black',\n                                    top:\n                                        this.props.statusFilter === undefined\n                                            ? '-15px'\n                                            : '-2px',\n                                }}\n                                selectedMenuItemStyle={{\n                                    color: theme.palette.primary1Color,\n                                }}\n                                floatingLabelText={\n                                    this.props.statusFilter === undefined\n                                        ? i18n.t('Status')\n                                        : ''\n                                }\n                                floatingLabelStyle={{\n                                    top: '15px',\n                                }}\n                                iconStyle={{\n                                    top:\n                                        this.props.statusFilter === undefined\n                                            ? '-15px'\n                                            : '0px',\n                                }}\n                                value={this.props.statusFilter}\n                                onChange={(event, key, payload) => {\n                                    this.props.setFilter(\n                                        payload === null ? undefined : payload,\n                                        'STATUS'\n                                    )\n                                }}\n                            >\n                                <MenuItem\n                                    key={null}\n                                    value={null}\n                                    primaryText={''}\n                                />\n                                {extendedChoices.STATUS.map(elem => (\n                                    <MenuItem\n                                        key={elem.key}\n                                        value={elem.value}\n                                        primaryText={elem.primaryText}\n                                    />\n                                ))}\n                            </SelectField>\n                        )}\n\n                    {displayExtendedChoices &&\n                        displaySearch &&\n                        !checkedOptions && (\n                            <SelectField\n                                style={styles.filterControl}\n                                labelStyle={{\n                                    color:\n                                        this.props.priorityFilter === undefined\n                                            ? 'lightGray'\n                                            : 'black',\n                                    top:\n                                        this.props.priorityFilter === undefined\n                                            ? '-15px'\n                                            : '-2px',\n                                }}\n                                selectedMenuItemStyle={{\n                                    color: theme.palette.primary1Color,\n                                }}\n                                floatingLabelText={\n                                    this.props.priorityFilter === undefined\n                                        ? i18n.t('Priority')\n                                        : ''\n                                }\n                                floatingLabelStyle={{\n                                    top: '15px',\n                                }}\n                                iconStyle={{\n                                    top:\n                                        this.props.priorityFilter === undefined\n                                            ? '-15px'\n                                            : '0px',\n                                }}\n                                value={this.props.priorityFilter}\n                                onChange={(event, key, payload) => {\n                                    this.props.setFilter(\n                                        payload === null ? undefined : payload,\n                                        'PRIORITY'\n                                    )\n                                }}\n                            >\n                                <MenuItem\n                                    key={null}\n                                    value={null}\n                                    primaryText={''}\n                                />\n                                {extendedChoices.PRIORITY.map(elem => (\n                                    <MenuItem\n                                        key={elem.key}\n                                        value={elem.value}\n                                        primaryText={elem.primaryText}\n                                    />\n                                ))}\n                            </SelectField>\n                        )}\n\n                    {!checkedOptions && displaySearch && (\n                        <TextField\n                            style={styles.filterControl}\n                            fullWidth\n                            hintText={i18n.t('Search')}\n                            value={this.props.messageFilter || ''}\n                            onChange={(event, messageFilter) => {\n                                this.debouncedSearch(messageFilter)\n                                this.props.setFilter(messageFilter, 'MESSAGE')\n                            }}\n                            type=\"search\"\n                        />\n                    )}\n\n                    {!checkedOptions && displaySearch && (\n                        <IconMenu\n                            iconButtonElement={\n                                <IconButton>\n                                    <MoreVertIcon />\n                                </IconButton>\n                            }\n                            anchorOrigin={{\n                                horizontal: 'right',\n                                vertical: 'top',\n                            }}\n                            targetOrigin={{\n                                horizontal: 'right',\n                                vertical: 'top',\n                            }}\n                            style={styles.iconMenu}\n                            menuStyle={{ overflowX: 'hidden' }}\n                        >\n                            <Subheader style={{ padding: '0px 16px' }}>\n                                {i18n.t('Set filter')}\n                            </Subheader>\n                            {this.props.displayExtendedChoices && (\n                                <Checkbox\n                                    style={{ padding: '0px 16px' }}\n                                    key={'assignedToMeFilter'}\n                                    label={i18n.t('Assigned to me')}\n                                    checked={this.props.assignedToMeFilter}\n                                    onClick={() => {\n                                        this.props.setFilter(\n                                            !this.props.assignedToMeFilter,\n                                            'ASSIGNED_TO_ME'\n                                        )\n                                    }}\n                                />\n                            )}\n                            <Checkbox\n                                style={{ padding: '0px 16px' }}\n                                key={'markedForFollowUpFilter'}\n                                label={i18n.t('Marked for followup')}\n                                checked={this.props.markedForFollowUpFilter}\n                                onClick={() => {\n                                    this.props.setFilter(\n                                        !this.props.markedForFollowUpFilter,\n                                        'MARKED_FOR_FOLLOWUP'\n                                    )\n                                }}\n                            />\n                            <Checkbox\n                                style={{ padding: '0px 16px' }}\n                                key={'unreadFilter'}\n                                label={i18n.t('Unread messages')}\n                                checked={this.props.unreadFilter}\n                                onClick={() => {\n                                    this.props.setFilter(\n                                        !this.props.unreadFilter,\n                                        'UNREAD'\n                                    )\n                                }}\n                            />\n                        </IconMenu>\n                    )}\n                    <FlatButton\n                        style={{\n                            width: '50px',\n                            alignSelf: 'center',\n                        }}\n                        icon={\n                            !this.props.wideview ? <ViewList /> : <ViewFancy />\n                        }\n                        onClick={() => this.props.toogleWideview()}\n                    />\n                </div>\n            </Paper>\n        )\n    }\n}\nToolbar.propTypes = {\n    assignedToMeFilter: propTypes.bool,\n    checkedOptions: propTypes.bool,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    id: propTypes.string,\n    loadMessageConversations: propTypes.func,\n    markedForFollowUpFilter: propTypes.bool,\n    messageFilter: propTypes.string,\n    priorityFilter: propTypes.string,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setFilter: propTypes.func,\n    statusFilter: propTypes.string,\n    toogleWideview: propTypes.func,\n    unreadFilter: propTypes.bool,\n    wideview: propTypes.bool,\n}\n\nexport default Toolbar\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport MailIcon from 'material-ui-icons/MailOutline'\nimport i18n from '@dhis2/d2-i18n'\nimport * as api from '../../api/api'\nimport {\n    loadMessageConversations,\n    setIsInFeedbackRecipientGroup,\n    clearCheckedIds,\n    setSelectedMessageConversation,\n    setSelectedMessageType,\n    clearSelectedMessageConversation,\n    updateInputFields,\n    setFilter,\n    setDisplayTimeDiff,\n    clearAttachments,\n} from '../../actions'\nimport theme from '../../styles/theme'\nimport MessageConversation from '../MessageConversation/MessageConversation'\nimport SidebarList from '../List/SidebarList'\nimport MessageConversationList from '../List/MessageConversationList'\nimport CreateMessage from '../MessageConversation/CreateMessage'\nimport Toolbar from '../Common/Toolbar'\nimport { subheader } from '../../styles/style'\nimport './MessagingCenter.css'\n\nconst EXTENDED_CHOICES = ['TICKET', 'VALIDATION_RESULT']\nconst refreshTimerTotal = 300000 // 5 minutes\nconst refreshTimerInterval = 10000 // 10 seconds\n\nclass MessagingCenter extends Component {\n    constructor(props) {\n        super(props)\n\n        this.intervalId = null\n        this.state = {\n            autoRefresh: false,\n            checkedItems: false,\n            refreshTimer: refreshTimerTotal,\n            wideview: true,\n        }\n    }\n\n    componentDidMount() {\n        const selectedMessageType = this.props.match.params.messageType\n        const selectedId = this.props.match.params.messageId\n\n        if (\n            selectedId &&\n            selectedId !== selectedMessageType &&\n            selectedId !== 'create'\n        ) {\n            const initialMessageConversation = { id: selectedId }\n            this.props.setSelectedMessageConversation(\n                initialMessageConversation\n            )\n        }\n\n        api.isInFeedbackRecipientGroup(this.props.currentUser).then(result =>\n            this.props.setIsInFeedbackRecipientGroup(result)\n        )\n\n        this.props.messageTypes.map(messageType =>\n            this.props.loadMessageConversations(\n                messageType,\n                selectedMessageType\n            )\n        )\n\n        this.props.setDisplayTimeDiff()\n    }\n\n    componentDidUpdate() {\n        const selectedMessageType = this.props.match.params.messageType\n        const selectedId = this.props.match.params.messageId\n\n        if (\n            !this.props.settingSelectedMessageConversation &&\n            selectedId &&\n            selectedMessageType !== selectedId &&\n            selectedId !== 'create' &&\n            (this.props.selectedMessageConversation === undefined ||\n                selectedId !== this.props.selectedMessageConversation.id)\n        ) {\n            const initialMessageConversation = { id: selectedId }\n            this.props.setSelectedMessageConversation(\n                initialMessageConversation\n            )\n        }\n\n        if (\n            selectedMessageType === selectedId &&\n            selectedMessageType !== this.props.selectedMessageType.id\n        ) {\n            this.props.setSelectedMessageType(selectedMessageType)\n        }\n\n        if (\n            (selectedMessageType === selectedId || selectedId === 'create') &&\n            this.props.selectedMessageConversation !== undefined\n        ) {\n            this.props.clearSelectedMessageConversation()\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId)\n        }\n    }\n\n    setAutoRefresh = autoRefresh => {\n        // Cancel existing interval if it shouldn't autorefresh\n        if (!autoRefresh && this.intervalId) {\n            clearInterval(this.intervalId)\n            this.intervalId = null\n        }\n\n        if (autoRefresh) {\n            this.intervalId = setInterval(this.tick, refreshTimerInterval)\n        }\n\n        this.setState({\n            autoRefresh,\n            refreshTimer: refreshTimerTotal,\n        })\n    }\n\n    tick = () => {\n        const timerHasElapsed =\n            this.state.refreshTimer - refreshTimerInterval <= 0\n\n        if (timerHasElapsed) {\n            this.refresh()\n            this.setState({\n                refreshTimer: refreshTimerTotal,\n            })\n        } else {\n            this.setState(prevState => ({\n                refreshTimer: prevState.refreshTimer - refreshTimerInterval,\n            }))\n        }\n    }\n\n    refresh = () => {\n        this.props.messageTypes.map(messageType =>\n            this.props.loadMessageConversations(\n                messageType,\n                this.props.selectedMessageType\n            )\n        )\n\n        if (this.props.selectedMessageConversation) {\n            this.props.setSelectedMessageConversation(\n                this.props.selectedMessageConversation\n            )\n        }\n    }\n\n    toogleWideview = () => {\n        this.setState({ wideview: !this.state.wideview })\n    }\n\n    render() {\n        const id = this.props.match.params.messageId\n\n        const displayExtendedChoices =\n            (this.props.selectedMessageType\n                ? !!(\n                      EXTENDED_CHOICES.indexOf(\n                          this.props.selectedMessageType.id\n                      ) + 1\n                  )\n                : false) && this.props.isInFeedbackRecipientGroup\n\n        return (\n            <div className=\"messaging-center\">\n                <Toolbar\n                    {...this.props}\n                    id={id}\n                    wideview={this.state.wideview}\n                    displayExtendedChoices={displayExtendedChoices}\n                    toogleWideview={this.toogleWideview}\n                />\n                <div className=\"messaging-center__main-content\">\n                    <SidebarList\n                        {...this.props}\n                        drawerOpen={this.state.drawerOpen}\n                        messageTypes={this.props.messageTypes}\n                        autoRefresh={this.state.autoRefresh}\n                        refreshTimer={this.state.refreshTimer}\n                        setAutoRefresh={this.setAutoRefresh}\n                    />\n\n                    {this.props.selectedMessageConversation === undefined &&\n                        !(this.state.wideview && id === 'create') && (\n                            <MessageConversationList\n                                wideview={this.state.wideview}\n                                displayExtendedChoices={\n                                    displayExtendedChoices &&\n                                    this.state.wideview\n                                }\n                            />\n                        )}\n\n                    {id === 'create' && (\n                        <CreateMessage\n                            {...this.props}\n                            wideview={this.state.wideview}\n                        />\n                    )}\n\n                    {this.props.selectedMessageConversation !== undefined &&\n                        !this.state.wideview && (\n                            <MessageConversationList\n                                wideview={this.state.wideview}\n                                displayExtendedChoices={\n                                    displayExtendedChoices &&\n                                    this.state.wideview\n                                }\n                            />\n                        )}\n\n                    {this.props.selectedMessageConversation && id !== 'create'\n                        ? this.props.selectedMessageConversation !==\n                              undefined && (\n                              <MessageConversation\n                                  {...this.props}\n                                  messageConversation={\n                                      this.props.selectedMessageConversation\n                                  }\n                                  wideview={this.state.wideview}\n                                  disableLink\n                                  displayExtendedChoices={\n                                      displayExtendedChoices\n                                  }\n                              />\n                          )\n                        : !this.state.wideview &&\n                          id !== 'create' && (\n                              <div className=\"messaging-center__no-message-selected\">\n                                  <Subheader style={subheader}>\n                                      {i18n.t('Select a message')}\n                                  </Subheader>\n                                  <MailIcon\n                                      style={{\n                                          color: theme.palette.primary1Color,\n                                          width: 120,\n                                          height: 120,\n                                      }}\n                                  />\n                              </div>\n                          )}\n                </div>\n            </div>\n        )\n    }\n}\n\nMessagingCenter.propTypes = {\n    clearSelectedMessageConversation: propTypes.func,\n    currentUser: propTypes.object,\n    isInFeedbackRecipientGroup: propTypes.bool,\n    loadMessageConversations: propTypes.func,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setDisplayTimeDiff: propTypes.func,\n    setIsInFeedbackRecipientGroup: propTypes.func,\n    setSelectedMessageConversation: propTypes.func,\n    setSelectedMessageType: propTypes.func,\n    settingSelectedMessageConversation: propTypes.bool,\n}\n\nconst mapStateToProps = state => ({\n    currentUser: state.messaging.currentUser,\n    snackMessage: state.messaging.snackMessage,\n    messageTypes: state.messaging.messageTypes,\n    messageConversations: state.messaging.messageConversations,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    assignedToMeFilter: state.messaging.assignedToMeFilter,\n    markedForFollowUpFilter: state.messaging.markedForFollowUpFilter,\n    unreadFilter: state.messaging.unreadFilter,\n    selectedMessageType: state.messaging.selectedMessageType,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    settingSelectedMessageConversation:\n        state.messaging.settingSelectedMessageConversation,\n    checkedIds: state.messaging.checkedIds,\n    checkedOptions: state.messaging.checkedIds.length > 0,\n    loaded: state.messaging.loaded,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n    attachments: state.messaging.attachments,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            loadMessageConversations,\n            setIsInFeedbackRecipientGroup,\n            clearCheckedIds,\n            setSelectedMessageConversation,\n            setSelectedMessageType,\n            clearSelectedMessageConversation,\n            updateInputFields,\n            setFilter,\n            setDisplayTimeDiff,\n            clearAttachments,\n        },\n        null,\n        { pure: false }\n    )\n)(MessagingCenter)\n","import { Router, Route } from 'react-router-dom'\nimport { Redirect } from 'react-router'\nimport React from 'react'\nimport MessagingCenter from '../MessagingCenter/MessagingCenter'\nimport history from '../../utils/history'\n\nconst Routes = () => (\n    <Router history={history}>\n        <div>\n            <Route\n                exact\n                path=\"/\"\n                component={() => <Redirect to=\"/PRIVATE\" />}\n            />\n            <Route\n                path=\"/:messageType/:messageId?/:recipientId?\"\n                component={MessagingCenter}\n            />\n        </div>\n    </Router>\n)\n\nexport default Routes\n","import React, { useEffect } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { useConfig } from '@dhis2/app-runtime'\nimport cx from 'classnames'\nimport { connect } from 'react-redux'\nimport { CircularProgress } from 'material-ui'\n\nimport CustomSnackBar from '../Common/CustomSnackBar'\nimport Routes from './Routes'\nimport { setCurrentUser, setDhis2CoreVersion } from '../../actions'\n\nimport classes from './App.module.css'\n\nconst App = ({ currentUser, setCurrentUser, setDhis2CoreVersion }) => {\n    const { loading, error } = currentUser\n    const { serverVersion } = useConfig()\n\n    useEffect(() => {\n        setDhis2CoreVersion(serverVersion.minor)\n        setCurrentUser()\n    }, [])\n\n    if (loading) {\n        return (\n            <div className={classes.center}>\n                <CircularProgress size={48} />\n            </div>\n        )\n    }\n\n    if (error) {\n        return <div className={cx(classes.center, classes.error)}>{error}</div>\n    }\n\n    return (\n        <div>\n            <CustomSnackBar />\n            <Routes />\n        </div>\n    )\n}\n\nApp.propTypes = {\n    currentUser: propTypes.object.isRequired,\n    setCurrentUser: propTypes.func.isRequired,\n    setDhis2CoreVersion: propTypes.func.isRequired,\n}\n\nexport default connect(\n    state => ({\n        currentUser: state.messaging.currentUser,\n    }),\n    {\n        setCurrentUser,\n        setDhis2CoreVersion,\n    }\n)(App)\n","const messageTypes = [{\n  id: 'PRIVATE',\n  displayName: 'Inbox',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'VALIDATION_RESULT',\n  displayName: 'Validation',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'TICKET',\n  displayName: 'Ticket',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'SYSTEM',\n  displayName: 'System',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}];\nexport default messageTypes;","import i18n from '@dhis2/d2-i18n';\nimport log from 'loglevel';\nimport * as actions from '../constants/actions';\nimport messageTypes from '../constants/messageTypes';\nimport { POSITIVE, NEGATIVE, NEUTRAL } from '../constants/development';\nimport { findIndexOfId } from '../utils/helpers';\nexport const initialState = {\n  currentUser: {\n    loading: true,\n    error: null,\n    id: null,\n    authorities: null,\n    userGroups: null\n  },\n  // Message conversation\n  messageConversations: {},\n  messageTypes,\n  selectedMessageType: undefined,\n  selectedMessageConversation: undefined,\n  settingSelectedMessageConversation: false,\n  checkedIds: [],\n  messageFilter: undefined,\n  statusFilter: undefined,\n  priorityFilter: undefined,\n  assignedToMeFilter: false,\n  markedForFollowUpFilter: false,\n  unreadFilter: false,\n  isInFeedbackRecipientGroup: false,\n  feedbackRecipientsId: undefined,\n  displayTimeDiff: 0,\n  // Input for create and reply\n  subject: '',\n  input: '',\n  recipients: [],\n  // Attachments\n  attachments: [],\n  // Snackbar\n  snackMessage: '',\n  onSnackActionClick: undefined,\n  onSnackRequestClose: undefined,\n  snackType: NEUTRAL\n};\n\nfunction messageReducer(state = initialState, action) {\n  const stateMessageTypes = state.messageTypes;\n  const oldAttachments = state.attachments;\n\n  switch (action.type) {\n    case actions.SET_CURRENT_USER:\n      return { ...state,\n        currentUser: {\n          loading: true,\n          error: null,\n          id: null,\n          authorities: null,\n          userGroups: null\n        }\n      };\n\n    case actions.SET_CURRENT_USER_SUCCESS:\n      return { ...state,\n        currentUser: {\n          loading: false,\n          error: null,\n          id: action.payload.id,\n          authorities: action.payload.authorities,\n          userGroups: action.payload.userGroups\n        }\n      };\n\n    case actions.SET_CURRENT_USER_ERROR:\n      return { ...state,\n        currentUser: {\n          loading: false,\n          error: action.payload,\n          id: null,\n          authorities: null,\n          userGroups: null\n        }\n      };\n\n    case actions.SET_DISPLAY_TIME_DIFF_SUCCESS:\n      return { ...state,\n        displayTimeDiff: action.payload\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_LOAD_SUCCESS:\n      {\n        const replaceMessageType = stateMessageTypes.find(type => type.id === action.payload.messageType.id);\n        replaceMessageType.loaded = action.payload.messageConversations.length;\n        replaceMessageType.total = action.payload.pager.total;\n        replaceMessageType.unread = action.payload.nrOfUnread;\n        replaceMessageType.page = action.payload.pager.page;\n        replaceMessageType.loading = false;\n        messageTypes.splice([findIndexOfId(stateMessageTypes, replaceMessageType.id)], 1, replaceMessageType);\n        const setSelectedMessageType = action.payload.selectedMessageType === replaceMessageType.id && (action.payload.selectedMessageType === state.selectedMessageType || state.selectedMessageType === undefined);\n        return { ...state,\n          messageTypes,\n          messageConversations: { ...state.messageConversations,\n            [replaceMessageType.id]: action.payload.messageConversations\n          },\n          selectedMessageType: setSelectedMessageType ? replaceMessageType : state.selectedMessageType\n        };\n      }\n\n    case actions.MESSAGE_CONVERSATION_UPDATE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS:\n      {\n        let snackMessage = '';\n\n        switch (action.payload.identifier) {\n          case 'STATUS':\n            snackMessage = i18n.t('Successfully updated status');\n            break;\n\n          case 'PRIORITY':\n            snackMessage = i18n.t('Successfully updated priority');\n            break;\n\n          case 'ASSIGNEE':\n            snackMessage = i18n.t('Successfully updated assignee');\n            break;\n\n          case 'FOLLOW_UP':\n            snackMessage = i18n.t('Successfully changed followup');\n            break;\n\n          default:\n            log.error('Unexpected identifier for updateMessageConversations success');\n            break;\n        }\n\n        return { ...state,\n          snackMessage,\n          snackType: POSITIVE\n        };\n      }\n\n    case actions.SEND_MESSAGE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_DELETE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_DELETE_SUCCESS:\n      return { ...state,\n        snackMessage: i18n.t('Successfully deleted message conversation(s)'),\n        snackType: POSITIVE\n      };\n\n    case actions.DISPLAY_SNACK_MESSAGE:\n      return { ...state,\n        snackMessage: action.payload.message,\n        snackType: action.payload.snackType,\n        onSnackActionClick: action.payload.onSnackActionClick,\n        onSnackRequestClose: action.payload.onSnackRequestClose\n      };\n\n    case actions.CLEAR_SNACK_MESSAGE:\n      return { ...state,\n        snackMessage: '',\n        snackType: NEUTRAL\n      };\n\n    case actions.SET_CHECKED:\n      {\n        const messageConversation = action.payload.messageConversation;\n        let checkedIds = state.checkedIds;\n\n        if (action.payload.selectedValue) {\n          checkedIds.push(messageConversation);\n        } else {\n          checkedIds = checkedIds.filter(element => element.id !== messageConversation.id);\n        }\n\n        return { ...state,\n          checkedIds\n        };\n      }\n\n    case actions.SET_ALL_CHECKED:\n      return { ...state,\n        checkedIds: action.payload.messageConversationIds\n      };\n\n    case actions.CLEAR_CHECKED:\n      return { ...state,\n        checkedIds: []\n      };\n\n    case actions.SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS:\n      return { ...state,\n        selectedMessageConversation: action.payload.messageConversation,\n        settingSelectedMessageConversation: false\n      };\n\n    case actions.SET_SELECTED_MESSAGE_CONVERSATION:\n      return { ...state,\n        settingSelectedMessageConversation: true\n      };\n\n    case actions.CLEAR_SELECTED_MESSAGE_CONVERSATION:\n      return { ...state,\n        selectedMessageConversation: undefined\n      };\n\n    case actions.SET_SELECTED_MESSAGE_TYPE:\n      return { ...state,\n        checkedIds: [],\n        selectedMessageType: stateMessageTypes.find(type => type.id === action.payload.messageTypeId),\n        selectedMessageConversations: state.messageConversations[action.payload.messageTypeId],\n        selectedMessageConversation: undefined\n      };\n\n    case actions.UPDATE_INPUT_FIELDS:\n      return { ...state,\n        subject: action.payload.subject,\n        input: action.payload.input,\n        recipients: action.payload.recipients\n      };\n\n    case actions.ADD_RECIPIENT_BY_ID_SUCCESS:\n      return { ...state,\n        recipients: [...state.recipients, action.payload]\n      };\n\n    case actions.SET_FILTER:\n      return { ...state,\n        messageFilter: action.payload.filterType === 'MESSAGE' ? action.payload.filter : state.messageFilter,\n        statusFilter: action.payload.filterType === 'STATUS' ? action.payload.filter : state.statusFilter,\n        priorityFilter: action.payload.filterType === 'PRIORITY' ? action.payload.filter : state.priorityFilter,\n        assignedToMeFilter: action.payload.filterType === 'ASSIGNED_TO_ME' ? action.payload.filter : state.assignedToMeFilter,\n        markedForFollowUpFilter: action.payload.filterType === 'MARKED_FOR_FOLLOWUP' ? action.payload.filter : state.markedForFollowUpFilter,\n        unreadFilter: action.payload.filterType === 'UNREAD' ? action.payload.filter : state.unreadFilter\n      };\n\n    case actions.LOAD_MESSAGE_CONVERSATIONS:\n      {\n        const loadingMessageType = action.payload.messageType;\n        loadingMessageType.loading = true;\n\n        if (action.payload.loadMore) {\n          loadingMessageType.page++;\n        }\n\n        messageTypes[findIndexOfId(messageTypes, loadingMessageType.id)] = loadingMessageType; // TODO: This can probably be removed because action.payload.messageType === state.selectedMessageType\n\n        const selectedMessageType = state.selectedMessageType;\n\n        if (selectedMessageType) {\n          selectedMessageType.loading = true;\n\n          if (action.payload.loadMore) {\n            selectedMessageType.page++;\n          }\n        }\n\n        return { ...state,\n          messageTypes,\n          selectedMessageType\n        };\n      }\n\n    case actions.SET_IN_FEEDBACK_RECIPIENT_GROUP:\n      return { ...state,\n        isInFeedbackRecipientGroup: action.payload.isInFeedbackRecipientGroup.authorized,\n        feedbackRecipientsId: action.payload.isInFeedbackRecipientGroup.feedbackRecipientsId\n      };\n\n    case actions.ADD_ATTACHMENT_SUCCESS:\n      return { ...state,\n        attachments: state.attachments.map(attachment => attachment.name === action.payload.name ? {\n          id: action.payload.id,\n          name: attachment.name,\n          contentLength: attachment.contentLength,\n          loading: false\n        } : attachment)\n      };\n\n    case actions.ADD_ATTACHMENT_ERROR:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.id !== action.payload.attachmentId),\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.ADD_ATTACHMENT:\n      return { ...state,\n        attachments: state.attachments.concat({\n          name: action.payload.name,\n          contentLength: action.payload.size,\n          loading: true\n        })\n      };\n\n    case actions.REMOVE_ATTACHMENT:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.id !== action.payload.attachmentId)\n      };\n\n    case actions.CANCEL_ATTACHMENT:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.name !== action.payload.attachmentName)\n      };\n\n    case actions.CLEAR_ATTACHMENTS:\n      return { ...state,\n        attachments: []\n      };\n\n    case actions.SET_DHIS2_CORE_VERSION:\n      return { ...state,\n        dhis2CoreVersion: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default messageReducer;","import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport messageReducer from './reducers/messageReducer';\nconst middlewares = [ReduxThunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst reducer = combineReducers({\n  messaging: messageReducer\n});\nexport default createStore(reducer, composeEnhancers(applyMiddleware(...middlewares)));","import React from 'react'\nimport { Provider } from 'react-redux'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport { useDataEngine } from '@dhis2/app-runtime'\nimport theme from '../../styles/theme'\n\nimport App from './App'\nimport store from '../../store'\nimport { setEngine } from '../../api/api'\n\nimport '../../index.css'\nimport 'typeface-roboto'\n\nconst AppWrapper = () => {\n    const engine = useDataEngine()\n    setEngine(engine)\n\n    return (\n        <Provider store={store}>\n            <MuiThemeProvider muiTheme={theme}>\n                <App />\n            </MuiThemeProvider>\n        </Provider>\n    )\n}\n\nexport default AppWrapper\n"],"sourceRoot":""}