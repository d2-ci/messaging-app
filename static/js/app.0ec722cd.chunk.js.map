{"version":3,"sources":["D2App/components/App/App.module.css","D2App/constants/development.js","D2App/utils/helpers.js","D2App/api/api.js","D2App/actions/index.js","D2App/constants/actions.js","D2App/styles/theme.js","D2App/components/Common/CustomSnackBar.jsx","D2App/utils/history.js","D2App/components/Attachments/Attachments.jsx","D2App/components/MessageConversation/Message.jsx","D2App/components/Attachments/AttachmentUploadButton.jsx","D2App/components/MessageConversation/ReplyCard.jsx","D2App/components/Common/SuggestionField.jsx","D2App/components/Common/ExtendedChoiceLabel.jsx","D2App/styles/messageConversationStyles.js","D2App/components/MessageConversation/MessageConversation.jsx","D2App/components/List/MessageTypeItem.jsx","D2App/components/List/SidebarList.jsx","D2App/styles/style.js","D2App/components/List/ListItemHeader.jsx","D2App/components/List/MessageConversationListItem.jsx","D2App/components/List/MessageConversationList.jsx","D2App/components/MessageConversation/CreateMessage.jsx","D2App/constants/extendedChoices.js","D2App/components/Common/AssignToDialog.jsx","D2App/components/Common/ToolbarExtendedChoicePicker.jsx","D2App/components/Common/Toolbar.jsx","D2App/components/MessagingCenter/MessagingCenter.jsx","D2App/components/App/Routes.jsx","D2App/components/App/App.jsx","D2App/constants/messageTypes.js","D2App/reducers/messageReducer.js","D2App/store.js","D2App/components/App/AddD2Context.jsx","D2App/components/App/AppWrapper.jsx"],"names":["module","exports","fontFamily","findIndexOfId","list","id","len","length","index","debounce","fn","delay","timer","context","this","args","arguments","clearTimeout","setTimeout","apply","supportsAttachments","dhis2CoreVersion","initialMessageConversationFields","messageConversationFields","engine","getMessageConversations","async","messageType","page","messageFilter","status","priority","assignedToMeFilter","markedForFollowUpFilter","unreadFilter","currentUser","filter","push","query","resource","params","pageSize","fields","order","queryString","messageConversations","updateMessageConversationAssignee","messageConversationId","value","getD2Instance","then","instance","undefined","Api","getApi","delete","post","result","catch","error","searchRecipients","searchValue","searchOnlyUsers","searchOnlyFeedbackRecipients","feedbackRecipientsId","system","version","minor","url","get","filters","users","searchUserGroups","userGroups","searchOrganisationUnits","organisationUnits","addRecipients","addAttachment","attachment","form","FormData","append","createAttachment","downloadAttachment","messageId","attachmentId","baseUrl","link","document","createElement","href","setAttribute","body","appendChild","click","downloadBlob","createAction","type","payload","setSelectedMessageConversation","messageConversation","dispatch","api","loadMessageConversations","selectedMessageType","loadMore","getState","promises","state","statusFilter","priorityFilter","messaging","i","promise","pager","Promise","all","nrOfUnread","total","reduce","accumulated","r","concat","markMessageConversations","mode","markedConversations","markedReadConversations","markedUnreadConversations","response","fileResource","name","contentLength","clearCheckedIds","clearSelectedMessageConversation","displaySnackMessage","message","onSnackActionClick","onSnackRequestClose","snackType","setFilter","filterType","updateInputFields","subject","input","recipients","clearAttachments","setSelectedMessageType","messageTypeId","removeAttachment","cancelAttachment","attachmentName","getMuiTheme","palette","negative","pinkA200","blue50","primary1Color","primary2Color","blue100","primary3Color","blue300","primary4Color","blue500","accent1Color","grey50","accent2Color","grey100","accent3Color","grey300","accent4Color","grey500","followUp","orange500","darkGray","grey700","superDarkGray","grey900","textColor","darkBlack","alternateTextColor","white","canvasColor","borderColor","clockCircleColor","fade","shadowColor","fullBlack","contentColorStyle","NEGATIVE","theme","NEUTRAL","POSITIVE","CustomSnackBar","Component","constructor","props","super","closeMessage","clearSnackMessage","setState","show","componentDidUpdate","_prevProps","prevState","render","open","autoHideDuration","onRequestClose","action","onActionClick","contentStyle","color","style","pointerEvents","whiteSpace","bodyStyle","maxWidth","compose","connect","snackMessage","pure","createHashHistory","Attachment","dataDirection","className","backgroundColor","label","parseFloat","parseInt","toFixed","labelPosition","onClick","loading","icon","Attachments","attachments","map","key","styles","canvas","padding","innerCanvas","margin","paddingBottom","cardText","wordBreak","fromFormat","datePlacement","display","justifyContent","marginRight","dateFormat","overflow","textOverflow","Message","displayTimeDiff","lastMessage","enableAttachments","fromTitle","sender","displayName","today","moment","messageDate","created","add","internal","i18n","t","placement","diff","from","format","year","paddingLeft","text","createHandleChange","event","files","target","AttachmentUploadButton","containerElement","onChange","ReplyCard","replyMessage","internalReply","selectedMessageConversation","wipeInput","inputError","texFieldUpdate","newValue","handleDiscard","discardState","expanded","componentWillUnmount","Card","marginTop","rows","underlineShow","multiLine","fullWidth","floatingLabelText","primary","disabled","isInFeedbackRecipientGroup","messageTypes","headers","SuggestionField","searchResult","lastSearch","errorText","debouncedSearch","search","bind","onSuggestionClick","chip","find","recipient","updateRecipients","onRemoveChip","updateInput","addType","internalSearchResult","searchWarning","height","inputHeight","marginBottom","openOnFocus","searchText","dataSource","dataSourceConfig","onUpdateInput","onRequestAdd","onRequestDelete","subheaderTitle","paddingRight","subheader","fontWeight","ExtendedChoiceLabel","showTitle","title","displayLabel","charAt","toLowerCase","substr","flex","overflowY","overflowX","paddingTop","flexDirection","header","iconButton","alignSelf","subjectSubheader","fontSize","participantsCanvas","participants","flexWrap","participantAddRow","participantsSuggestionField","participantsAdd","messagesCanvas","messagesInnerCanvas","NOTIFICATIONS","MessageConversation","backToList","history","cursor","messages","notification","indexOf","userMessages","slice","userMessage","recipientsExpanded","user","userMessagesLength","tooltipPosition","tooltip","displayExtendedChoices","assignee","participant","limitSearchArray","MessageTypeItem","onMouseEnter","setHoverText","onMouseLeave","setNeutralText","setTextColor","getBackgroundColor","selectedValue","role","alignItems","marginLeft","size","unread","badgeContent","secondary","badgeStyle","borderLeftStyle","borderLeftWidth","borderLeftColor","borderRightStyle","borderRightWidth","borderRightColor","minWidth","SidebarList","match","List","width","refreshTimer","toggled","autoRefresh","onToggle","setAutoRefresh","messagePanelContainer","transition","boxSizing","position","boxShadow","borderBottom","checkBox","extendedLabel","MessageConversationListItem","allChecked","checkedIds","checked","onCheck","setAllChecked","child","messageConversationIds","container","wideview","flag","fontColor","flexBasis","textAlign","read","lastSender","x","containerBackgroundColor","innerText","settingSelectedMessageConversation","setChecked","MessageConversationList","onScroll","messageList","getElementById","isBottom","loaded","debouncedOnScroll","el","scrollHeight","scrollTop","window","outerHeight","Array","isArray","lookup","Set","item","has","dedupeById","ListItemHeader","messageTypeField","CreateMessage","subjectUpdate","inputUpdate","sendMessage","isMessageFeedback","sendFeedbackMessage","componentDidMount","addRecipientByUserId","recipientId","discardDisabled","console","extendedChoices","STATUS","primaryText","PRIORITY","AssignToDialog","updateMessageConversations","nrSelected","ToolbarExtendedChoicePicker","getIds","updateMessageConversation","identifier","ids","toggleDialog","dialogOpen","checkedItems","assignToOpen","multiSelect","actionButtons","keyboardFocused","deleteMessageConversations","displayNumberOfCheckedIds","actions","modal","iconButtonElement","anchorOrigin","horizontal","vertical","targetOrigin","rightIcon","menuItems","elem","mutate","messageConversationStatus","log","checkedOptions","zIndex","checkedOption","filterControl","rightHandCanvas","ie11Spacer","flexGrow","iconMenu","Toolbar","lastMessageFilter","prevProps","displaySearch","labelStyle","top","selectedMenuItemStyle","floatingLabelStyle","iconStyle","hintText","menuStyle","toogleWideview","EXTENDED_CHOICES","MessagingCenter","intervalId","clearInterval","setInterval","tick","refresh","selectedId","setDhis2CoreVersion","d2","initialMessageConversation","configuration","userAuthorities","symbol","authorities","Object","getOwnPropertySymbols","configurationResult","authorized","includes","group","feedbackRecipients","setIsInFeedbackRecipientGroup","setDisplayTimeDiff","drawerOpen","disableLink","contextTypes","propTypes","object","serverDate","systemInfo","Routes","exact","path","component","to","setCurrentUser","useEffect","classes","center","cx","initialState","messageReducer","stateMessageTypes","oldAttachments","replaceMessageType","splice","element","selectedMessageConversations","loadingMessageType","middlewares","ReduxThunk","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducer","combineReducers","createStore","applyMiddleware","AddD2Context","React","getChildContext","muiTheme","children","childContextTypes","AppWrapper","useConfig","useDataEngine","useD2","d2Config","schemas","store"],"mappings":"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","file":"static/js/app.0ec722cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"center\":\"App_center__1snml\",\"error\":\"App_error__1usCm\"};","export const pageSize = 35;\nexport const fontFamily = 'Roboto, Helvetica, Arial, sans-serif';\nexport const NEUTRAL = 'NEUTRAL';\nexport const POSITIVE = 'POSITIVE';\nexport const NEGATIVE = 'NEGATIVE';","export function dedupeById(list) {\n  if (!Array.isArray(list)) {\n    return undefined;\n  }\n\n  const lookup = new Set();\n  return list.filter(item => {\n    if (lookup.has(item.id)) {\n      return false;\n    }\n\n    lookup.add(item.id);\n    return true;\n  });\n}\nexport function findIndexOfId(list, id) {\n  const len = list.length;\n\n  for (let index = 0; index < len; index++) {\n    if (list[index].id === id) {\n      return index;\n    }\n  }\n\n  return undefined;\n}\nexport function debounce(fn, delay) {\n  let timer = null;\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n}\nexport function supportsAttachments(dhis2CoreVersion) {\n  return dhis2CoreVersion > 30;\n}\nexport function supportsUserLookupEndPoint(dhis2CoreVersion) {\n  return dhis2CoreVersion > 34;\n}","import { getInstance as getD2Instance } from 'd2';\nimport { pageSize } from '../constants/development';\nimport { supportsUserLookupEndPoint } from '../utils/helpers.js';\nconst initialMessageConversationFields = ['id', 'displayName', 'subject', 'messageType', 'lastSender[id, displayName]', 'assignee[id, displayName]', 'status', 'priority', 'lastUpdated', 'read', 'lastMessage', 'followUp'];\nconst messageConversationFields = ['*', 'assignee[id, displayName]', 'messages[*,sender[id,displayName]', 'attachments[id, name, contentLength]]', 'userMessages[user[id, displayName]]'];\nconst order = 'lastMessage:desc'; // The rest of the code in this module will expect that\n// engine has been set and can use it safely\n\nlet engine = null;\nexport const setEngine = engineInstance => {\n  engine = engineInstance;\n};\nexport const getCurrentUser = () => {\n  return engine.query({\n    currentUser: {\n      resource: 'me',\n      params: {\n        fields: ['id', 'authorities']\n      }\n    }\n  });\n};\nexport const getMessageConversations = async ({\n  messageType,\n  page,\n  messageFilter,\n  status,\n  priority,\n  assignedToMeFilter,\n  markedForFollowUpFilter,\n  unreadFilter,\n  currentUser\n}) => {\n  const filter = [`messageType:eq:${messageType}`];\n\n  if (status) {\n    filter.push(`status:eq:${status}`);\n  }\n\n  if (priority) {\n    filter.push(`priority:eq:${priority}`);\n  }\n\n  if (markedForFollowUpFilter) {\n    filter.push('followUp:eq:true');\n  }\n\n  if (unreadFilter) {\n    filter.push('read:eq:false');\n  }\n\n  if (assignedToMeFilter) {\n    filter.push(`assignee.id:eq:${currentUser.id}`);\n  }\n\n  const query = {\n    resource: 'messageConversations',\n    params: {\n      filter,\n      pageSize,\n      page,\n      fields: initialMessageConversationFields,\n      order\n    }\n  };\n\n  if (messageFilter) {\n    query.params.queryString = messageFilter;\n  }\n\n  const {\n    messageConversations\n  } = await engine.query({\n    messageConversations: query\n  });\n  return messageConversations;\n};\nexport const getMessageConversation = async ({\n  id\n}) => {\n  const {\n    messageConversation\n  } = await engine.query({\n    messageConversation: {\n      resource: 'messageConversations',\n      id,\n      params: {\n        fields: messageConversationFields\n      }\n    }\n  });\n  return messageConversation;\n};\nexport const getServerDate = async () => {\n  const {\n    systemInfo\n  } = await engine.query({\n    systemInfo: {\n      resource: 'system/info'\n    }\n  });\n  return systemInfo.serverDate;\n};\nexport const updateMessageConversationStatus = async (messageConversationId, value) => {\n  return await engine.mutate({\n    resource: `messageConversations/${messageConversationId}/status`,\n    type: 'create',\n    params: {\n      messageConversationStatus: value\n    }\n  });\n};\nexport const updateMessageConversationPriority = (messageConversationId, value) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${messageConversationId}/priority?messageConversationPriority=${value}`)).then(result => result).catch(error => {\n  throw error;\n});\nexport const updateMessageConversationAssignee = (messageConversationId, value) => getD2Instance().then(instance => value === undefined ? instance.Api.getApi().delete(`messageConversations/${messageConversationId}/assign`) : instance.Api.getApi().post(`messageConversations/${messageConversationId}/assign?userId=${value}`)).then(result => result).catch(error => {\n  throw error;\n});\nexport const updateMessageConversationFollowup = (messageConversationIds, value) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${value ? 'followup' : 'unfollowup'}`, messageConversationIds)).then(result => result).catch(error => {\n  throw error;\n});\nexport const getNrOfUnread = messageType => getD2Instance().then(instance => instance.Api.getApi().get('messageConversations', {\n  fields: 'read',\n  filter: ['read:eq:false', `messageType:eq:${messageType}`]\n})).then(result => result.pager.total).catch(error => {\n  throw error;\n});\nexport const sendMessage = ({\n  subject,\n  users,\n  userGroups,\n  organisationUnits,\n  text,\n  attachments\n}) => getD2Instance().then(instance => instance.Api.getApi().post('messageConversations', {\n  subject,\n  users,\n  userGroups,\n  organisationUnits,\n  attachments,\n  text\n})).catch(error => {\n  throw error;\n});\nexport const sendFeedbackMessage = (subject, text) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/feedback?subject=${subject}`, text, {\n  headers: {\n    'Content-Type': 'text/plain'\n  }\n})).then(result => result).catch(error => {\n  throw error;\n});\nexport const replyMessage = ({\n  message,\n  internalReply,\n  attachments,\n  id\n}) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${id}?internal=${internalReply}${attachments.length > 0 ? `&attachments=${attachments}` : ''}`, message, {\n  headers: {\n    'Content-Type': 'text/plain'\n  }\n})).catch(error => {\n  throw error;\n});\nexport const deleteMessageConversation = messageConversationId => getD2Instance().then(instance => instance.Api.getApi().delete(`messageConversations/${messageConversationId}/${instance.currentUser.id}`)).then(result => result).catch(error => {\n  throw error;\n});\nexport const markRead = markedReadConversations => getD2Instance().then(instance => instance.Api.getApi().post('messageConversations/read', markedReadConversations)).then(result => result).catch(error => {\n  throw error;\n});\nexport const markUnread = markedUnreadConversations => getD2Instance().then(instance => instance.Api.getApi().post('messageConversations/unread', markedUnreadConversations)).then(result => result).catch(error => {\n  throw error;\n});\n/* Feedback recipient query */\n\nexport const isInFeedbackRecipientGroup = () => getD2Instance().then(instance => instance.Api.getApi().get('me', {\n  fields: 'userGroups[id]'\n})).then(result => getD2Instance().then(instance => ({\n  configuration: instance.Api.getApi().get('configuration').then(configuration => configuration),\n  instance\n})).then(({\n  configuration,\n  instance\n}) => {\n  const getSymbolProperties = symbol => Array.from(symbol[Object.getOwnPropertySymbols(symbol)[0]]);\n\n  const userAuthorities = getSymbolProperties(instance.currentUser.authorities);\n  return configuration.then(configurationResult => ({\n    authorized: userAuthorities.includes('ALL') || !!result.userGroups.find(group => group.id === configurationResult.feedbackRecipients.id),\n    feedbackRecipientsId: configurationResult.feedbackRecipients.id\n  }));\n}).catch(error => {\n  throw error;\n})).catch(error => {\n  throw error;\n});\n/* Recipient search */\n\nconst MAX_RECIPIENT = 10;\n\nconst searchOrganisationUnits = searchValue => getD2Instance().then(instance => instance.Api.getApi().get('organisationUnits', {\n  fields: 'id, displayName',\n  pageSize: MAX_RECIPIENT,\n  filter: [`displayName:token:${searchValue}`, 'users:gte:1']\n})).then(result => result).catch(error => {\n  throw error;\n});\n\nconst searchUserGroups = searchValue => getD2Instance().then(instance => instance.Api.getApi().get('userGroups', {\n  fields: 'id, displayName',\n  pageSize: MAX_RECIPIENT,\n  filter: [`displayName:token:${searchValue}`]\n})).then(result => result).catch(error => {\n  throw error;\n});\n\nexport const searchRecipients = ({\n  searchValue,\n  searchOnlyUsers,\n  searchOnlyFeedbackRecipients,\n  feedbackRecipientsId\n}) => {\n  return getD2Instance().then(instance => {\n    if (supportsUserLookupEndPoint(instance.system.version.minor)) {\n      // version >= v2.35\n      const url = searchOnlyFeedbackRecipients ? 'userLookup/feedbackRecipients' : 'userLookup';\n      return instance.Api.getApi().get(`${url}?query=${searchValue}`);\n    } else {\n      // version < 2.35\n      const filters = [`displayName:token:${searchValue}`];\n\n      if (searchOnlyFeedbackRecipients) {\n        filters.push(`userGroups.id:eq:${feedbackRecipientsId}`);\n      }\n\n      return instance.Api.getApi().get('users', {\n        pageSize: MAX_RECIPIENT,\n        filter: filters\n      });\n    }\n  }).then(({\n    users\n  }) => searchOnlyUsers ? {\n    users,\n    undefined\n  } : searchUserGroups(searchValue).then(({\n    userGroups\n  }) => searchOrganisationUnits(searchValue).then(({\n    organisationUnits\n  }) => ({\n    users,\n    userGroups,\n    organisationUnits\n  })))).catch(error => {\n    throw error;\n  });\n};\nexport const fetchParticipants = messageConversationId => getD2Instance().then(instance => instance.Api.getApi().get(`messageConversations/${messageConversationId}`, {\n  fields: 'userMessages[user[id, displayName]]'\n})).then(result => result).catch(error => {\n  throw error;\n});\nexport const addRecipients = ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageConversationId\n}) => getD2Instance().then(instance => instance.Api.getApi().post(`messageConversations/${messageConversationId}/recipients`, {\n  users,\n  userGroups,\n  organisationUnits\n})).catch(error => {\n  throw error;\n});\nexport const getUserById = id => getD2Instance().then(instance => instance.Api.getApi().get(`users/${id}`, {\n  fields: 'id,displayName'\n})).then(({\n  id,\n  displayName\n}) => ({\n  id,\n  displayName,\n  type: 'user'\n})).catch(error => {\n  throw error;\n});\nexport function createAttachment(attachment) {\n  const form = new FormData();\n  form.append('file', attachment);\n  return form;\n}\nexport const addAttachment = attachment => getD2Instance().then(instance => instance.Api.getApi().post('/fileResources?domain=MESSAGE_ATTACHMENT', createAttachment(attachment))).catch(error => {\n  throw error;\n});\nexport function downloadBlob(url) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.setAttribute('target', '_blank');\n  document.body.appendChild(link);\n  link.click();\n}\nexport const downloadAttachment = (messageConversationId, messageId, attachmentId) => getD2Instance().then(instance => {\n  const baseUrl = instance.Api.getApi().baseUrl;\n  return downloadBlob(`${baseUrl}/messageConversations/${messageConversationId}/${messageId}/attachments/${attachmentId}`);\n}).catch(error => {\n  throw error;\n});","import * as actions from '../constants/actions';\nimport log from 'loglevel';\nimport * as api from '../api/api';\nimport moment from 'moment'; // Simple hack to solve negative time difference\n\nconst FUTURE_HACK = 5000;\n\nconst createAction = (type, payload) => ({\n  type,\n  payload\n});\n/******************\n * THUNKS SECTION *\n ******************/\n\n\nexport const setCurrentUser = () => async dispatch => {\n  dispatch(createAction(actions.SET_CURRENT_USER));\n\n  try {\n    const {\n      currentUser\n    } = await api.getCurrentUser();\n    dispatch(createAction(actions.SET_CURRENT_USER_SUCCESS, currentUser));\n  } catch {\n    dispatch(createAction(actions.SET_CURRENT_USER_ERROR, 'Could not load current user'));\n  }\n};\nexport const setDisplayTimeDiff = () => async dispatch => {\n  try {\n    const serverDate = await api.getServerDate();\n    const displayTimeDiff = moment().diff(moment(serverDate)) - FUTURE_HACK;\n    dispatch(createAction(actions.SET_DISPLAY_TIME_DIFF_SUCCESS, displayTimeDiff));\n  } catch (error) {\n    dispatch(createAction(actions.SET_DISPLAY_TIME_DIFF_ERROR, {\n      error\n    }));\n  }\n};\nexport const setSelectedMessageConversation = messageConversation => async dispatch => {\n  dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION));\n\n  try {\n    const result = await api.getMessageConversation(messageConversation);\n    dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS, {\n      messageConversation: result\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.SET_SELECTED_MESSAGE_CONVERSATION_ERROR, {\n      error\n    }));\n  }\n};\nexport const updateMessageConversations = ({\n  messageConversationIds,\n  identifier,\n  value,\n  messageType,\n  selectedMessageConversation\n}) => async dispatch => {\n  if (identifier === 'FOLLOW_UP') {\n    try {\n      await api.updateMessageConversationFollowup(messageConversationIds, value);\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS, {\n        messageType: messageType,\n        page: 1,\n        identifier: identifier\n      }));\n      dispatch(loadMessageConversations());\n    } catch (error) {\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_ERROR, {\n        error\n      }));\n    }\n  } else {\n    const promises = messageConversationIds.map(messageConversationId => {\n      let promise;\n\n      switch (identifier) {\n        case 'STATUS':\n          promise = api.updateMessageConversationStatus(messageConversationId, value);\n          break;\n\n        case 'PRIORITY':\n          promise = api.updateMessageConversationPriority(messageConversationId, value);\n          break;\n\n        case 'ASSIGNEE':\n          if (value !== undefined && messageType.id === 'VALIDATION_RESULT') {\n            promise = api.addRecipients({\n              users: value.map(value => ({\n                id: value\n              })),\n              userGroups: [],\n              organisationUnits: [],\n              messageConversationId\n            }).then(() => api.updateMessageConversationAssignee(messageConversationId, value));\n          } else {\n            promise = api.updateMessageConversationAssignee(messageConversationId, value);\n          }\n\n          break;\n\n        default:\n          log.error('Unexpected identifier for updateMessageConversations');\n          break;\n      }\n\n      return promise;\n    });\n\n    try {\n      await Promise.all(promises);\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS, {\n        messageType: messageType,\n        page: 1,\n        identifier: identifier\n      }));\n      dispatch(loadMessageConversations());\n    } catch (error) {\n      dispatch(createAction(actions.MESSAGE_CONVERSATION_UPDATE_ERROR, {\n        error\n      }));\n    }\n  }\n\n  if (selectedMessageConversation) {\n    dispatch(setSelectedMessageConversation(selectedMessageConversation));\n  }\n};\nexport const loadMessageConversations = (messageType, selectedMessageType, loadMore = false) => async (dispatch, getState) => {\n  const promises = [];\n  const state = getState();\n  const {\n    messageFilter,\n    statusFilter: status,\n    priorityFilter: priority,\n    assignedToMeFilter,\n    markedForFollowUpFilter,\n    unreadFilter,\n    currentUser\n  } = state.messaging; // Default fallback values so this action can be called without arguments\n\n  messageType = messageType || state.messaging.selectedMessageType;\n  selectedMessageType = selectedMessageType || state.messaging.selectedMessageType.id;\n  dispatch(createAction(actions.LOAD_MESSAGE_CONVERSATIONS, {\n    messageType,\n    loadMore\n  }));\n\n  try {\n    for (let i = 1; i <= messageType.page; i++) {\n      const promise = api.getMessageConversations({\n        messageType: messageType.id,\n        page: i,\n        messageFilter,\n        status,\n        priority,\n        assignedToMeFilter,\n        markedForFollowUpFilter,\n        unreadFilter,\n        currentUser\n      }).then(result => ({\n        messageConversations: result.messageConversations,\n        pager: result.pager\n      }));\n      promises.push(promise);\n    }\n\n    const result = await Promise.all(promises);\n    const nrOfUnread = await api.getNrOfUnread(messageType.id);\n    const messageConversations = result.reduce((accumulated, r) => accumulated.concat(r.messageConversations), []);\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_LOAD_SUCCESS, {\n      messageConversations,\n      pager: result[result.length - 1].pager,\n      messageType,\n      selectedMessageType,\n      nrOfUnread\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_LOAD_ERROR, {\n      error\n    }));\n  }\n};\nexport const deleteMessageConversations = (messageConversationIds, messageType) => async dispatch => {\n  try {\n    const promises = messageConversationIds.map(messageConversationId => api.deleteMessageConversation(messageConversationId));\n    await Promise.all(promises);\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_DELETE_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.MESSAGE_CONVERSATIONS_DELETE_ERROR, {\n      error\n    }));\n  }\n};\nexport const sendMessage = ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageType\n}) => async (dispatch, getState) => {\n  try {\n    const {\n      messaging: {\n        subject,\n        input,\n        attachments\n      }\n    } = getState();\n    await api.sendMessage({\n      subject,\n      users,\n      userGroups,\n      organisationUnits,\n      text: input,\n      attachments\n    });\n    dispatch(createAction(actions.SEND_MESSAGE_SUCCESS, {\n      messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.SEND_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const sendFeedbackMessage = messageType => async (dispatch, getState) => {\n  const state = getState();\n\n  try {\n    await api.sendFeedbackMessage(state.messaging.subject, state.messaging.input);\n    dispatch(createAction(actions.SEND_MESSAGE_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.SEND_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const replyMessage = ({\n  message,\n  internalReply,\n  messageConversation,\n  messageType\n}) => async (dispatch, getState) => {\n  try {\n    const {\n      id\n    } = messageConversation;\n    const state = getState();\n    const attachments = state.messaging.attachments.map(attachment => attachment.id);\n    await api.replyMessage({\n      message,\n      internalReply,\n      attachments,\n      id\n    });\n    dispatch(createAction(actions.REPLY_MESSAGE_SUCCESS, {\n      messageConversation: messageConversation,\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n    dispatch(setSelectedMessageConversation(messageConversation));\n  } catch (error) {\n    dispatch(createAction(actions.REPLY_MESSAGE_ERROR, {\n      error\n    }));\n  }\n};\nexport const markMessageConversations = (mode, markedConversations, messageType) => async dispatch => {\n  try {\n    await (mode === 'read' ? api.markRead(markedConversations) : api.markUnread(markedConversations));\n    dispatch(createAction(actions.MARK_MESSAGE_CONVERSATIONS_SUCCESS, {\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(loadMessageConversations());\n  } catch (error) {\n    dispatch(createAction(actions.MARK_MESSAGE_CONVERSATIONS_ERROR, {\n      error\n    }));\n  }\n};\nexport const addRecipients = ({\n  users,\n  userGroups,\n  organisationUnits,\n  messageConversation,\n  messageType\n}) => async dispatch => {\n  try {\n    const {\n      id: messageConversationId\n    } = messageConversation;\n    await api.addRecipients({\n      users,\n      userGroups,\n      organisationUnits,\n      messageConversationId\n    });\n    dispatch(createAction(actions.ADD_RECIPIENTS_SUCCESS, {\n      messageConversation: messageConversation,\n      messageType: messageType,\n      page: 1\n    }));\n    dispatch(setSelectedMessageConversation(messageConversation));\n  } catch (error) {\n    dispatch(createAction(actions.ADD_RECIPIENTS_ERROR, {\n      error\n    }));\n  }\n};\nexport const addRecipientByUserId = id => async dispatch => {\n  try {\n    const user = await api.getUserById(id);\n    dispatch(createAction(actions.ADD_RECIPIENT_BY_ID_SUCCESS, user));\n  } catch (error) {\n    console.error(error); // No action required, the field will just be empty\n  }\n};\nexport const addAttachment = attachment => async dispatch => {\n  dispatch(createAction(actions.ADD_ATTACHMENT, attachment));\n\n  try {\n    const result = await api.addAttachment(attachment);\n    dispatch(createAction(actions.ADD_ATTACHMENT_SUCCESS, {\n      id: result.response.fileResource.id,\n      name: attachment.name,\n      contentLength: result.response.fileResource.contentLength\n    }));\n  } catch (error) {\n    dispatch(createAction(actions.ADD_ATTACHMENT_ERROR, {\n      error\n    }));\n  }\n};\nexport const downloadAttachment = (messageConversationId, messageId, attachmentId) => async dispatch => {\n  try {\n    await api.downloadAttachment(messageConversationId, messageId, attachmentId);\n    dispatch(createAction(actions.DOWNLOAD_ATTACHMENT_SUCCESS));\n  } catch (error) {\n    dispatch(createAction(actions.DOWNLOAD_ATTACHMENT_ERROR, {\n      error\n    }));\n  }\n};\n/************************\n * PLAIN ACTION SECTION *\n ************************/\n\nexport const clearSnackMessage = () => createAction(actions.CLEAR_SNACK_MESSAGE);\nexport const clearCheckedIds = () => createAction(actions.CLEAR_CHECKED);\nexport const clearSelectedMessageConversation = () => createAction(actions.CLEAR_SELECTED_MESSAGE_CONVERSATION);\nexport const displaySnackMessage = ({\n  message,\n  onSnackActionClick,\n  onSnackRequestClose,\n  snackType\n}) => createAction(actions.DISPLAY_SNACK_MESSAGE, {\n  message,\n  onSnackActionClick,\n  onSnackRequestClose,\n  snackType\n});\nexport const setAllChecked = messageConversationIds => createAction(actions.SET_ALL_CHECKED, {\n  messageConversationIds\n});\nexport const setChecked = (messageConversation, selectedValue) => createAction(actions.SET_CHECKED, {\n  messageConversation,\n  selectedValue\n});\nexport const setFilter = (filter, filterType) => createAction(actions.SET_FILTER, {\n  filter,\n  filterType\n});\nexport const updateInputFields = (subject, input, recipients) => createAction(actions.UPDATE_INPUT_FIELDS, {\n  subject,\n  input,\n  recipients\n});\nexport const clearAttachments = () => createAction(actions.CLEAR_ATTACHMENTS);\nexport const setSelectedMessageType = messageTypeId => createAction(actions.SET_SELECTED_MESSAGE_TYPE, {\n  messageTypeId\n});\nexport const removeAttachment = attachmentId => createAction(actions.REMOVE_ATTACHMENT, {\n  attachmentId\n});\nexport const cancelAttachment = attachmentName => createAction(actions.CANCEL_ATTACHMENT, {\n  attachmentName\n});\nexport const setIsInFeedbackRecipientGroup = isInFeedbackRecipientGroup => createAction(actions.SET_IN_FEEDBACK_RECIPIENT_GROUP, {\n  isInFeedbackRecipientGroup\n});\nexport const setDhis2CoreVersion = version => createAction(actions.SET_DHIS2_CORE_VERSION, version);","export const SET_CURRENT_USER = 'SET_CURRENT_USER';\nexport const SET_CURRENT_USER_SUCCESS = 'SET_CURRENT_USER_SUCCESS';\nexport const SET_CURRENT_USER_ERROR = 'SET_CURRENT_USER_ERROR';\nexport const LOAD_MESSAGE_CONVERSATIONS = 'LOAD_MESSAGE_CONVERSATIONS';\nexport const LOAD_MORE_MESSAGE_CONVERSATIONS = 'LOAD_MORE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATIONS_LOAD_SUCCESS = 'MESSAGE_CONVERSATIONS_LOAD_SUCCESS';\nexport const MESSAGE_CONVERSATIONS_LOAD_ERROR = 'MESSAGE_CONVERSATIONS_LOAD_ERROR';\nexport const DELETE_MESSAGE_CONVERSATIONS = 'DELETE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATIONS_DELETE_SUCCESS = 'MESSAGE_CONVERSATIONS_DELETE_SUCCESS';\nexport const MESSAGE_CONVERSATIONS_DELETE_ERROR = 'MESSAGE_CONVERSATIONS_DELETE_ERROR';\nexport const UPDATE_MESSAGE_CONVERSATIONS = 'UPDATE_MESSAGE_CONVERSATIONS';\nexport const MESSAGE_CONVERSATION_UPDATE_SUCCESS = 'MESSAGE_CONVERSATION_UPDATE_SUCCESS';\nexport const MESSAGE_CONVERSATION_UPDATE_ERROR = 'MESSAGE_CONVERSATION_UPDATE_ERROR';\nexport const MARK_MESSAGE_CONVERSATIONS = 'MARK_MESSAGE_CONVERSATIONS';\nexport const MARK_MESSAGE_CONVERSATIONS_SUCCESS = 'MARK_MESSAGE_CONVERSATIONS_SUCCESS';\nexport const MARK_MESSAGE_CONVERSATIONS_ERROR = 'MARK_MESSAGE_CONVERSATIONS_ERROR';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const SEND_MESSAGE_SUCCESS = 'SEND_MESSAGE_SUCCESS';\nexport const SEND_MESSAGE_ERROR = 'SEND_MESSAGE_ERROR';\nexport const SEND_FEEDBACK_MESSAGE = 'SEND_FEEDBACK_MESSAGE';\nexport const REPLY_MESSAGE = 'REPLY_MESSAGE';\nexport const REPLY_MESSAGE_SUCCESS = 'REPLY_MESSAGE_SUCCESS';\nexport const REPLY_MESSAGE_ERROR = 'REPLY_MESSAGE_ERROR';\nexport const SET_FILTER = 'SET_FILTER';\nexport const DISPLAY_SNACK_MESSAGE = 'DISPLAY_SNACK_MESSAGE;';\nexport const CLEAR_SNACK_MESSAGE = 'CLEAR_SNACK_MESSAGE';\nexport const SET_CHECKED = 'SET_CHECKED';\nexport const SET_ALL_CHECKED = 'SET_ALL_CHECKED';\nexport const CLEAR_CHECKED = 'CLEAR_CHECKED';\nexport const SET_SELECTED_MESSAGE_TYPE = 'SET_SELECTED_MESSAGE_TYPE';\nexport const CLEAR_SELECTED_MESSAGE_CONVERSATION = 'CLEAR_SELECTED_MESSAGE_CONVERSATION';\nexport const SET_SELECTED_MESSAGE_CONVERSATION = 'SET_SELECTED_MESSAGE_CONVERSATION';\nexport const SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS = 'SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS';\nexport const SET_SELECTED_MESSAGE_CONVERSATION_ERROR = 'SET_SELECTED_MESSAGE_CONVERSATION_ERROR';\nexport const UPDATE_INPUT_FIELDS = 'UPDATE_INPUT_FIELDS';\nexport const SET_IN_FEEDBACK_RECIPIENT_GROUP = 'SET_IN_FEEDBACK_RECIPIENT_GROUP';\nexport const SET_DISPLAY_TIME_DIFF = 'SET_DISPLAY_TIME_DIFF';\nexport const SET_DISPLAY_TIME_DIFF_SUCCESS = 'SET_DISPLAY_TIME_DIFF_SUCCESS';\nexport const SET_DISPLAY_TIME_DIFF_ERROR = 'SET_DISPLAY_TIME_DIFF_ERROR';\n/* Recipient actions */\n\nexport const RECIPIENT_SEARCH = 'RECIPIENT_SEARCH';\nexport const RECIPIENT_SEARCH_SUCCESS = 'RECIPIENT_SEARCH_SUCCESS';\nexport const RECIPIENT_SEARCH_ERROR = 'RECIPIENT_SEARCH_ERROR';\nexport const ADD_RECIPIENTS = 'ADD_RECIPIENTS';\nexport const ADD_RECIPIENTS_SUCCESS = 'ADD_RECIPIENTS_SUCCESS';\nexport const ADD_RECIPIENTS_ERROR = 'ADD_RECIPIENTS_ERROR';\nexport const ADD_RECIPIENT_BY_ID_SUCCESS = 'ADD_RECIPIENT_BY_ID_SUCCESS';\n/* Attachments */\n\nexport const ADD_ATTACHMENT = 'ADD_ATTACHMENT';\nexport const ADD_ATTACHMENT_SUCCESS = 'ADD_ATTACHMENT_SUCCESS';\nexport const ADD_ATTACHMENT_ERROR = 'ADD_ATTACHMENT_ERROR';\nexport const DOWNLOAD_ATTACHMENT = 'DOWNLOAD_ATTACHMENT';\nexport const DOWNLOAD_ATTACHMENT_SUCCESS = 'DOWNLOAD_ATTACHMENT_SUCCESS';\nexport const DOWNLOAD_ATTACHMENT_ERROR = 'DOWNLOAD_ATTACHMENT_ERROR';\nexport const REMOVE_ATTACHMENT = 'REMOVE_ATTACHMENT';\nexport const CLEAR_ATTACHMENTS = 'CLEAR_ATTACHMENTS';\nexport const CANCEL_ATTACHMENT = 'CANCEL_ATTACHMENT';\n/* DHIS2 CORE VERSION */\n\nexport const SET_DHIS2_CORE_VERSION = 'SET_DHIS2_CORE_VERSION';","import getMuiTheme from 'material-ui/styles/getMuiTheme';\nimport { fade } from 'material-ui/utils/colorManipulator';\nimport { blue50, blue100, blue300, blue500, pinkA200, grey50, grey100, grey300, grey500, grey700, grey900, orange500, white, darkBlack, fullBlack } from 'material-ui/styles/colors';\nexport default getMuiTheme({\n  palette: {\n    negative: pinkA200,\n    blue50,\n    primary1Color: '#1D8BF1',\n    primary2Color: blue100,\n    primary3Color: blue300,\n    primary4Color: blue500,\n    accent1Color: grey50,\n    accent2Color: grey100,\n    accent3Color: grey300,\n    accent4Color: grey500,\n    followUp: orange500,\n    darkGray: grey700,\n    superDarkGray: grey900,\n    textColor: darkBlack,\n    alternateTextColor: white,\n    canvasColor: white,\n    borderColor: grey300,\n    clockCircleColor: fade(darkBlack, 0.07),\n    shadowColor: fullBlack\n  }\n});","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport Snackbar from 'material-ui/Snackbar'\nimport { clearSnackMessage } from '../../actions'\nimport { compose, pure } from 'recompose'\nimport theme from '../../styles/theme'\n\nconst DEFAULT_MESSAGE_DURATION = 4000\nconst contentColorStyle = {\n    NEGATIVE: theme.palette.negative,\n    NEUTRAL: theme.palette.primary1Color,\n    POSITIVE: theme.palette.alternateTextColor,\n}\n\nclass CustomSnackBar extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            show: false,\n        }\n    }\n\n    componentDidUpdate(_prevProps, prevState) {\n        if (!prevState.show && this.props.message) {\n            this.setState({\n                show: true,\n            })\n        }\n    }\n\n    closeMessage = () => {\n        this.props.clearSnackMessage()\n        this.setState({\n            show: false,\n        })\n        this.props.onSnackRequestClose && this.props.onSnackRequestClose()\n    }\n\n    render() {\n        return (\n            <Snackbar\n                open={this.props.message !== '' && this.state.show}\n                message={this.props.message || 'Missing snackbar message'}\n                autoHideDuration={DEFAULT_MESSAGE_DURATION}\n                onRequestClose={this.closeMessage}\n                action={this.props.onSnackActionClick && 'undo'}\n                onActionClick={() => {\n                    this.props.onSnackActionClick()\n                    this.setState({\n                        show: false,\n                    })\n                }}\n                contentStyle={{ color: contentColorStyle[this.props.type] }}\n                style={{ pointerEvents: 'none', whiteSpace: 'nowrap' }}\n                bodyStyle={{ pointerEvents: 'initial', maxWidth: 'none' }}\n            />\n        )\n    }\n}\n\nCustomSnackBar.propTypes = {\n    clearSnackMessage: propTypes.func,\n    message: propTypes.string,\n    type: propTypes.oneOf(['NEGATIVE', 'NEUTRAL', 'POSITIVE']),\n    onSnackActionClick: propTypes.func,\n    onSnackRequestClose: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    message: state.messaging.snackMessage,\n    type: state.messaging.snackType,\n    onSnackActionClick: state.messaging.onSnackActionClick,\n    onSnackRequestClose: state.messaging.onSnackRequestClose,\n})\n\nexport default compose(\n    connect(mapStateToProps, {\n        clearSnackMessage,\n    }),\n    pure\n)(CustomSnackBar)\n","import { createHashHistory } from 'history';\nexport default createHashHistory();","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport FlatButton from 'material-ui/FlatButton'\nimport LinearProgress from 'material-ui/LinearProgress'\nimport Clear from 'material-ui-icons/Clear'\nimport Download from 'material-ui-icons/CloudDownload'\nimport theme from '../../styles/theme'\nimport './Attachments.css'\n\nconst Attachments = ({\n    dataDirection,\n    attachments,\n    style,\n    removeAttachment,\n    downloadAttachment,\n    cancelAttachment,\n}) => (\n    <div className=\"attachment\" style={{ ...style }}>\n        {attachments.map((attachment, index) => (\n            <Attachment\n                // combining name with index prevents errors when user uploads files with duplicate names\n                key={`${attachment.name}-${index}`}\n                dataDirection={dataDirection}\n                attachment={attachment}\n                removeAttachment={removeAttachment}\n                downloadAttachment={downloadAttachment}\n                cancelAttachment={cancelAttachment}\n            />\n        ))}\n    </div>\n)\n\nAttachments.propTypes = {\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    dataDirection: propTypes.string,\n    downloadAttachment: propTypes.func,\n    removeAttachment: propTypes.func,\n    style: propTypes.object,\n}\n\nconst Attachment = ({\n    dataDirection,\n    attachment,\n    removeAttachment,\n    downloadAttachment,\n    cancelAttachment,\n}) => {\n    return (\n        <FlatButton\n            className=\"attachment__button\"\n            backgroundColor={theme.palette.accent2Color}\n            label={`${attachment.name} (${parseFloat(\n                parseInt(attachment.contentLength, 10) / 1000000\n            ).toFixed(2)} MB)`}\n            labelPosition=\"after\"\n            onClick={() => {\n                dataDirection === 'download'\n                    ? downloadAttachment(attachment)\n                    : attachment.loading\n                    ? cancelAttachment(attachment.name)\n                    : removeAttachment(attachment)\n            }}\n            icon={dataDirection === 'download' ? <Download /> : <Clear />}\n        >\n            {attachment.loading && (\n                <LinearProgress\n                    className={'attachment__progress'}\n                    mode=\"indeterminate\"\n                />\n            )}\n        </FlatButton>\n    )\n}\n\nAttachment.propTypes = {\n    attachment: propTypes.object,\n    cancelAttachment: propTypes.func,\n    dataDirection: propTypes.string,\n    downloadAttachment: propTypes.func,\n    removeAttachment: propTypes.func,\n}\n\nexport default Attachments\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport Divider from 'material-ui/Divider'\nimport CardText from 'material-ui/Card/CardText'\nimport Attachments from '../Attachments/Attachments'\nimport i18n from '@dhis2/d2-i18n'\nimport Linkify from 'react-linkify'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\nimport moment from 'moment'\n\nconst styles = {\n    canvas(backgroundColor) {\n        return {\n            backgroundColor,\n            padding: '16px 16px 16px 16px',\n        }\n    },\n    innerCanvas: {\n        margin: '',\n        paddingBottom: '0px',\n    },\n    cardText: {\n        padding: '16px 0px 16px 0px',\n        fontFamily,\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word',\n    },\n    fromFormat: {\n        fontFamily,\n    },\n    datePlacement: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        marginRight: '10px',\n    },\n    dateFormat: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        fontFamily,\n    },\n}\n\nconst Message = ({\n    displayTimeDiff,\n    message,\n    currentUser,\n    lastMessage,\n    downloadAttachment,\n    cancelAttachment,\n    enableAttachments,\n}) => {\n    const fromTitle = message.sender\n        ? currentUser && currentUser.id === message.sender.id\n            ? 'me'\n            : message.sender.displayName\n        : 'system'\n    const today = moment()\n    const messageDate = moment(message.created).add(displayTimeDiff)\n\n    return (\n        <div style={styles.canvas(theme.palette.canvasColor)}>\n            <div style={styles.innerCanvas}>\n                <div style={styles.fromFormat}>\n                    {message.internal\n                        ? i18n.t(`Internal message from ${fromTitle}`)\n                        : i18n.t(`Message from ${fromTitle}`)}\n                </div>\n\n                <div placement={'bottom'} style={styles.datePlacement}>\n                    <div style={styles.dateFormat}>\n                        {today.diff(messageDate, 'hours') < 72\n                            ? `${messageDate.from(today)}, ${messageDate.format(\n                                  'HH:mm'\n                              )}`\n                            : today.year() === messageDate.year()\n                            ? messageDate.format('MMM DD, HH:mm')\n                            : messageDate.format('MMM DD, YYYY HH:mm')}\n                    </div>\n                </div>\n\n                {enableAttachments && (\n                    <Attachments\n                        dataDirection={'download'}\n                        style={{ paddingLeft: 0 }}\n                        attachments={message.attachments}\n                        downloadAttachment={downloadAttachment}\n                        cancelAttachment={cancelAttachment}\n                    />\n                )}\n\n                <CardText style={styles.cardText}>\n                    <Linkify>{message.text}</Linkify>\n                </CardText>\n            </div>\n            {!lastMessage && <Divider />}\n        </div>\n    )\n}\n\nMessage.propTypes = {\n    cancelAttachment: propTypes.func,\n    currentUser: propTypes.object,\n    displayTimeDiff: propTypes.number,\n    downloadAttachment: propTypes.func,\n    enableAttachments: propTypes.bool,\n    lastMessage: propTypes.bool,\n    message: propTypes.object,\n}\n\nexport default Message\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport FlatButton from 'material-ui/FlatButton'\nimport AttachFile from 'material-ui-icons/AttachFile'\nimport i18n from '@dhis2/d2-i18n'\nimport './AttachmentUploadButton.css'\n\nconst createHandleChange = addAttachment => event => {\n    const files = event.target.files\n    const hasFile = files.length > 0\n\n    if (hasFile) {\n        addAttachment(files[0])\n    }\n}\n\nconst AttachmentUploadButton = ({ addAttachment }) => (\n    <FlatButton\n        className=\"attachment__upload-button\"\n        label={i18n.t('Upload attachment')}\n        labelPosition=\"after\"\n        containerElement=\"label\"\n        icon={<AttachFile />}\n    >\n        <input\n            className=\"attachment__upload-button--input\"\n            type=\"file\"\n            onChange={createHandleChange(addAttachment)}\n        />\n    </FlatButton>\n)\n\nAttachmentUploadButton.propTypes = {\n    addAttachment: propTypes.func,\n}\n\nexport default AttachmentUploadButton\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { Card, CardActions, CardText } from 'material-ui/Card'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport TextField from 'material-ui/TextField'\nimport AttachmentUploadButton from '../Attachments/AttachmentUploadButton'\nimport Attachments from '../Attachments/Attachments'\nimport { supportsAttachments } from '../../utils/helpers'\nimport i18n from '@dhis2/d2-i18n'\nimport {\n    replyMessage,\n    setSelectedMessageType,\n    updateInputFields,\n    displaySnackMessage,\n    addAttachment,\n    removeAttachment,\n    cancelAttachment,\n} from '../../actions'\nimport { NEGATIVE } from '../../constants/development'\n\nclass ReplyCard extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            discardState: false,\n        }\n    }\n\n    componentWillUnmount() {\n        this.wipeInput()\n    }\n\n    replyMessage = internalReply => {\n        const {\n            input: message,\n            selectedMessageConversation: messageConversation,\n            selectedMessageType: messageType,\n        } = this.props\n\n        this.props.replyMessage({\n            message,\n            internalReply,\n            messageConversation,\n            messageType,\n        })\n\n        this.wipeInput()\n    }\n\n    wipeInput = () => {\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n        this.setState({\n            inputError: false,\n        })\n    }\n\n    texFieldUpdate = (event, newValue) => {\n        this.props.updateInputFields('', newValue, [])\n    }\n\n    handleDiscard = () => {\n        const message = i18n.t('Reply discarded')\n        const snackType = NEGATIVE\n        const onSnackActionClick = () => this.setState({ discardState: false })\n        const onSnackRequestClose = () => {\n            this.setState({ discardState: false })\n            this.wipeInput()\n        }\n\n        this.setState({ discardState: true })\n        this.props.displaySnackMessage({\n            message,\n            onSnackActionClick,\n            onSnackRequestClose,\n            snackType,\n        })\n        this.setState({\n            expanded: false,\n        })\n    }\n\n    render() {\n        return (\n            <Card style={{ marginTop: '5px' }} expanded>\n                <CardText style={{ padding: '0px 0px 0px 16px' }}>\n                    <TextField\n                        key={this.props.messageConversation.id}\n                        id={this.props.messageConversation.id}\n                        rows={5}\n                        underlineShow={false}\n                        value={this.state.discardState ? '' : this.props.input}\n                        multiLine\n                        fullWidth\n                        floatingLabelText={i18n.t('Message')}\n                        onChange={this.texFieldUpdate}\n                    />\n                    {this.props.enableAttachments &&\n                        !this.state.discardState && (\n                            <Attachments\n                                dataDirection={'upload'}\n                                attachments={this.props.attachments}\n                                removeAttachment={attachment =>\n                                    this.props.removeAttachment(attachment.id)\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                            />\n                        )}\n\n                    <CardActions style={{ paddingLeft: '0px' }}>\n                        <RaisedButton\n                            primary\n                            label={i18n.t('Reply')}\n                            disabled={\n                                this.props.input === '' ||\n                                this.state.discardState\n                            }\n                            onClick={() => this.replyMessage(false)}\n                        />\n                        {this.props.isInFeedbackRecipientGroup &&\n                            this.props.selectedMessageType.id === 'TICKET' && (\n                                <FlatButton\n                                    primary\n                                    label={i18n.t('Internal reply')}\n                                    disabled={\n                                        this.props.input === '' ||\n                                        this.state.discardState\n                                    }\n                                    onClick={() => this.replyMessage(true)}\n                                />\n                            )}\n                        <FlatButton\n                            label={i18n.t('Discard')}\n                            disabled={\n                                this.props.input === '' ||\n                                this.state.discardState\n                            }\n                            onClick={this.handleDiscard}\n                        />\n                        {this.props.enableAttachments && (\n                            <AttachmentUploadButton\n                                addAttachment={attachment => {\n                                    this.props.addAttachment(attachment)\n                                }}\n                            />\n                        )}\n                        )\n                    </CardActions>\n                </CardText>\n            </Card>\n        )\n    }\n}\n\nReplyCard.propTypes = {\n    addAttachment: propTypes.func,\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    clearAttachments: propTypes.func,\n    displaySnackMessage: propTypes.func,\n    enableAttachments: propTypes.bool,\n    input: propTypes.string,\n    isInFeedbackRecipientGroup: propTypes.bool,\n    messageConversation: propTypes.object,\n    removeAttachment: propTypes.func,\n    replyMessage: propTypes.func,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n    messageTypes: state.messaging.messageTypes,\n    input: state.messaging.input,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n    attachments: state.messaging.attachments,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            replyMessage,\n            setSelectedMessageType,\n            updateInputFields,\n            displaySnackMessage,\n            addAttachment,\n            removeAttachment,\n            cancelAttachment,\n        },\n        null,\n        { pure: false }\n    )\n)(ReplyCard)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport ChipInput from 'material-ui-chip-input'\nimport { debounce } from '../../utils/helpers'\nimport i18n from '@dhis2/d2-i18n'\nimport * as api from '../../api/api'\n\nconst searchDelay = 300\nconst minCharLength = 2\n\n/*\n * An AutoComplete text field with suggestions from a given list of\n * identifiable objects. Selected objects are shown as chips in the text field.\n */\n\nclass SuggestionField extends Component {\n    state = {\n        input: '',\n        searchResult: [],\n        searchOnlyUsers: this.props.searchOnlyUsers,\n        searchOnlyFeedbackRecipients: this.props.searchOnlyFeedbackRecipients,\n        lastSearch: '',\n        errorText: undefined,\n    }\n\n    debouncedSearch = debounce(this.search.bind(this), searchDelay)\n\n    search(input) {\n        const doSearch =\n            !this.state.searchResult.find(\n                result => result.displayName === input\n            ) &&\n            input !== '' &&\n            input.length >= minCharLength\n\n        if (doSearch) {\n            const {\n                feedbackRecipientsId,\n                searchOnlyUsers,\n                searchOnlyFeedbackRecipients,\n            } = this.props\n\n            api.searchRecipients({\n                searchValue: input,\n                searchOnlyUsers,\n                searchOnlyFeedbackRecipients,\n                feedbackRecipientsId,\n            }).then(({ users, userGroups, organisationUnits }) => {\n                const addType = type => result => ({ ...result, type })\n                let internalSearchResult = users.map(addType('user'))\n\n                if (!this.state.searchOnlyUsers) {\n                    internalSearchResult = internalSearchResult\n                        .concat(userGroups.map(addType('userGroup')))\n                        .concat(\n                            organisationUnits.map(addType('organisationUnit'))\n                        )\n                }\n\n                this.setState({\n                    searchResult: internalSearchResult,\n                    errorText:\n                        internalSearchResult.length === 0\n                            ? i18n.t('No results found')\n                            : undefined,\n                })\n            })\n        } else {\n            this.setState({\n                lastSearch: input,\n                searchResult:\n                    (this.state.lastSearch !== '' && input === '') ||\n                    input.length < minCharLength\n                        ? []\n                        : this.state.searchResult,\n                errorText:\n                    input !== '' && input.length < minCharLength\n                        ? i18n.t(\n                              `Please enter at least ${minCharLength} characters`\n                          )\n                        : this.state.searchWarning,\n            })\n        }\n    }\n\n    onSuggestionClick = chip => {\n        if (this.props.onSuggestionClick !== undefined) {\n            this.props.onSuggestionClick(chip)\n        } else {\n            this.wipeInput()\n            this.debouncedSearch('')\n\n            const doInsert = !this.props.recipients.find(\n                recipient => recipient.id === chip.id\n            )\n\n            doInsert &&\n                this.props.updateRecipients([\n                    ...this.props.recipients,\n                    this.state.searchResult.find(\n                        result => result.id === chip.id\n                    ),\n                ])\n        }\n    }\n\n    onRemoveChip = id => {\n        this.props.updateRecipients(\n            this.props.recipients.filter(recipient => recipient.id !== id)\n        )\n    }\n\n    wipeInput = () => {\n        this.setState({\n            input: '',\n            searchResult: [],\n        })\n    }\n\n    updateInput = input => {\n        this.debouncedSearch(input)\n        this.setState({\n            input,\n        })\n    }\n\n    render() {\n        return (\n            <div\n                style={{ ...this.props.style, height: this.props.inputHeight }}\n            >\n                <ChipInput\n                    style={{ marginBottom: 16 }}\n                    disabled={\n                        this.props.disabled === undefined\n                            ? false\n                            : this.props.disabled\n                    }\n                    errorText={this.props.errorText || this.state.errorText}\n                    value={this.props.recipients}\n                    fullWidth\n                    openOnFocus\n                    searchText={this.state.input}\n                    floatingLabelText={this.props.label}\n                    dataSource={this.state.searchResult}\n                    dataSourceConfig={{ text: 'displayName', value: 'id' }}\n                    onUpdateInput={this.updateInput}\n                    onRequestAdd={chip => this.onSuggestionClick(chip)}\n                    onRequestDelete={id => this.onRemoveChip(id)}\n                />\n            </div>\n        )\n    }\n}\n\nSuggestionField.propTypes = {\n    disabled: propTypes.bool,\n    errorText: propTypes.string,\n    feedbackRecipientsId: propTypes.string,\n    inputHeight: propTypes.string,\n    label: propTypes.string,\n    recipients: propTypes.array,\n    searchOnlyFeedbackRecipients: propTypes.bool,\n    searchOnlyUsers: propTypes.bool,\n    style: propTypes.object,\n    updateRecipients: propTypes.func,\n    onSuggestionClick: propTypes.func,\n}\n\nexport default SuggestionField\n","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport Subheader from 'material-ui/Subheader/Subheader'\n\nconst styles = {\n    subheaderTitle: {\n        height: '32px',\n        color: 'black',\n        paddingLeft: 0,\n        paddingRight: 16,\n    },\n    subheader(color, fontWeight) {\n        return {\n            height: '32px',\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            padding: 0,\n            color,\n            fontWeight,\n        }\n    },\n}\n\nconst ExtendedChoiceLabel = ({\n    showTitle,\n    title,\n    label,\n    color,\n    fontWeight,\n}) => {\n    const displayLabel =\n        label && label !== 'NONE'\n            ? title === 'Assignee'\n                ? label\n                : `${label.charAt(0)}${label\n                      .toLowerCase()\n                      .substr(1, label.length)}`\n            : '-'\n\n    return (\n        <div style={{ flex: 2, paddingLeft: 10, maxWidth: 200 }}>\n            {showTitle && (\n                <Subheader style={styles.subheaderTitle}> {title} </Subheader>\n            )}\n            <Subheader style={styles.subheader(color, fontWeight)}>\n                {displayLabel}\n            </Subheader>\n        </div>\n    )\n}\n\nExtendedChoiceLabel.propTypes = {\n    color: propTypes.string,\n    fontWeight: propTypes.string,\n    label: propTypes.string,\n    showTitle: propTypes.bool,\n    title: propTypes.string,\n}\n\nexport default ExtendedChoiceLabel\n","import theme from '../styles/theme';\nimport { fontFamily } from '../constants/development';\nexport const styles = {\n  canvas: {\n    flex: '3 0',\n    overflowY: 'scroll',\n    overflowX: 'hidden',\n    height: 'calc(100vh - 110px)',\n    paddingTop: '10px'\n  },\n  innerCanvas: {\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0px 10px 0px 10px'\n  },\n  header: {\n    display: 'flex'\n  },\n  iconButton: {\n    display: 'flex',\n    alignSelf: 'center'\n  },\n  subjectSubheader: {\n    display: 'flex',\n    alignSelf: 'center',\n    fontSize: '20px',\n    fontFamily\n  },\n  participantsCanvas: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  participants: {\n    paddingLeft: '12px',\n    paddingTop: '10px',\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  chip: {\n    height: '32px',\n    marginRight: '3px',\n    marginBottom: '3px'\n  },\n  participantAddRow: {\n    display: 'flex'\n  },\n  participantsSuggestionField: {\n    paddingLeft: '12px',\n    marginBottom: '0px',\n    flex: 1\n  },\n  participantsAdd: {\n    alignSelf: 'flex-end',\n    marginBottom: '28px',\n    paddingLeft: '12px'\n  },\n  messagesCanvas: {\n    marginBottom: '50px',\n    display: 'flex',\n    flexDirection: 'column',\n    backgroundColor: theme.palette.accent2Color,\n    margin: '0px 10px 10px 10px'\n  },\n  messagesInnerCanvas: {\n    padding: '0px'\n  }\n};\nexport default styles;","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\n\nimport history from '../../utils/history'\nimport {\n    addRecipients,\n    downloadAttachment,\n    cancelAttachment,\n    clearSelectedMessageConversation,\n} from '../../actions'\nimport { supportsAttachments } from '../../utils/helpers'\n\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport AddIcon from 'material-ui-icons/Add'\nimport NavigationBack from 'material-ui-icons/ArrowBack'\nimport FlatButton from 'material-ui/FlatButton'\nimport IconButton from 'material-ui/IconButton'\nimport Chip from 'material-ui/Chip'\nimport Paper from 'material-ui/Paper'\nimport i18n from '@dhis2/d2-i18n'\nimport Message from './Message'\nimport ReplyCard from './ReplyCard'\nimport SuggestionField from '../Common/SuggestionField'\nimport ExtendedChoiceLabel from '../Common/ExtendedChoiceLabel'\nimport { styles } from '../../styles/messageConversationStyles'\nimport theme from '../../styles/theme'\n\nconst NOTIFICATIONS = ['TICKET', 'VALIDATION_RESULT']\nconst maxParticipantsDisplay = 30\n\nclass MessageConversation extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            recipients: [],\n            cursor: 'auto',\n        }\n    }\n\n    backToList = () => {\n        const {\n            clearSelectedMessageConversation,\n            messageConversation,\n        } = this.props\n        history.push(`/${messageConversation.messageType}`)\n        clearSelectedMessageConversation()\n    }\n\n    addRecipients = () => {\n        const users = this.state.recipients.filter(r => r.type === 'user')\n        const userGroups = this.state.recipients.filter(\n            r => r.type === 'userGroup'\n        )\n        const organisationUnits = this.state.recipients.filter(\n            r => r.type === 'organisationUnit'\n        )\n        const {\n            messageConversation,\n            selectedMessageType: messageType,\n        } = this.props\n\n        this.props.addRecipients({\n            users,\n            userGroups,\n            organisationUnits,\n            messageConversation,\n            messageType,\n        })\n\n        this.setState({\n            recipients: [],\n        })\n    }\n\n    updateRecipients = recipients => {\n        this.setState({\n            recipients,\n        })\n    }\n\n    render() {\n        const { messageConversation, currentUser } = this.props\n        const messages = messageConversation.messages\n        const notification = !!(\n            NOTIFICATIONS.indexOf(messageConversation.messageType) + 1\n        )\n        const participants = messageConversation.userMessages\n            .slice(0, maxParticipantsDisplay)\n            .map(userMessage =>\n                !currentUser.id ||\n                this.state.recipientsExpanded ||\n                currentUser.id !== userMessage.user.id\n                    ? userMessage.user.displayName\n                    : i18n.t('me')\n            )\n        const userMessagesLength = messageConversation.userMessages.length\n\n        if (userMessagesLength > maxParticipantsDisplay) {\n            participants.push(\n                ' + '.concat(userMessagesLength - maxParticipantsDisplay)\n            )\n        }\n\n        return (\n            <div id=\"messageconversation\" style={styles.canvas}>\n                <div style={styles.innerCanvas}>\n                    <div style={styles.header}>\n                        <IconButton\n                            style={styles.iconButton}\n                            tooltipPosition=\"bottom-right\"\n                            onClick={this.backToList}\n                            tooltip={i18n.t('Show all messages')}\n                        >\n                            <NavigationBack />\n                        </IconButton>\n                        <Subheader style={styles.subjectSubheader}>\n                            {messageConversation.subject}\n                        </Subheader>\n                        {this.props.displayExtendedChoices && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Status')}\n                                label={messageConversation.status}\n                            />\n                        )}\n                        {this.props.displayExtendedChoices && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Priority')}\n                                label={messageConversation.priority}\n                            />\n                        )}\n                        {notification && (\n                            <ExtendedChoiceLabel\n                                color={theme.palette.darkGray}\n                                showTitle\n                                title={i18n.t('Assignee')}\n                                label={\n                                    messageConversation.assignee\n                                        ? messageConversation.assignee\n                                              .displayName\n                                        : undefined\n                                }\n                            />\n                        )}\n                    </div>\n                    <div style={styles.participantsCanvas}>\n                        <Subheader\n                            style={{\n                                paddingLeft: '12px',\n                                paddingTop: '10px',\n                            }}\n                        >\n                            {i18n.t('Participants')}\n                        </Subheader>\n                        <div style={styles.participants}>\n                            {participants.map(participant => (\n                                <Chip key={participant} style={styles.chip}>\n                                    {participant}\n                                </Chip>\n                            ))}\n                        </div>\n                    </div>\n                    <div style={styles.participantAddRow}>\n                        <SuggestionField\n                            style={styles.participantsSuggestionField}\n                            label={i18n.t('Add participants to conversation')}\n                            messageConversation={messageConversation}\n                            recipients={this.state.recipients}\n                            updateRecipients={this.updateRecipients}\n                            limitSearchArray={messageConversation.userMessages}\n                        />\n                        <div style={styles.participantsAdd}>\n                            <FlatButton\n                                icon={<AddIcon />}\n                                onClick={() => this.addRecipients()}\n                                label={i18n.t('Add')}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div style={styles.messagesCanvas}>\n                    <Paper style={styles.messagesInnerCanvas}>\n                        {messages.map((message, i) => (\n                            <Message\n                                key={message.id}\n                                displayTimeDiff={this.props.displayTimeDiff}\n                                message={message}\n                                messageConversation={messageConversation}\n                                notification={notification}\n                                currentUser={this.state.currentUser}\n                                lastMessage={i + 1 === messages.length}\n                                downloadAttachment={attachment =>\n                                    this.props.downloadAttachment(\n                                        messageConversation.id,\n                                        message.id,\n                                        attachment.id\n                                    )\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                                enableAttachments={this.props.enableAttachments}\n                            />\n                        ))}\n                    </Paper>\n                    <ReplyCard\n                        {...this.props}\n                        messageConversation={messageConversation}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nMessageConversation.propTypes = {\n    addRecipients: propTypes.func,\n    cancelAttachment: propTypes.func,\n    clearSelectedMessageConversation: propTypes.func,\n    currentUser: propTypes.object,\n    displayExtendedChoices: propTypes.bool,\n    displayTimeDiff: propTypes.number,\n    downloadAttachment: propTypes.func,\n    enableAttachments: propTypes.bool,\n    messageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n}\n\nconst mapStateToProps = state => ({\n    currentUser: state.messaging.currentUser,\n    selectedMessageType: state.messaging.selectedMessageType,\n    displayTimeDiff: state.messaging.displayTimeDiff,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default connect(mapStateToProps, {\n    addRecipients,\n    downloadAttachment,\n    cancelAttachment,\n    clearSelectedMessageConversation,\n})(MessageConversation)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\n\nimport CircularProgress from 'material-ui/CircularProgress'\nimport Badge from 'material-ui/Badge'\nimport Subheader from 'material-ui/Subheader/Subheader'\n\nimport i18n from '@dhis2/d2-i18n'\n\nimport theme from '../../styles/theme'\n\nclass MessageTypeItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            backgroundColor: theme.palette.accent2Color,\n            textColor: theme.palette.darkGray,\n        }\n    }\n\n    onClick = () => {\n        this.props.onClick()\n    }\n\n    onMouseEnter = () => {\n        this.setHoverText()\n        this.setState({ cursor: 'pointer' })\n    }\n    onMouseLeave = () => {\n        this.setNeutralText()\n        this.setState({ cursor: 'auto' })\n    }\n\n    setNeutralText = () => this.setTextColor(theme.palette.accent2Color)\n    setHoverText = () => this.setTextColor(theme.palette.accent3Color)\n\n    setTextColor = color => {\n        this.setState({\n            backgroundColor: color,\n        })\n    }\n\n    getBackgroundColor = (selectedValue, id) =>\n        selectedValue && id === selectedValue.id\n            ? theme.palette.accent3Color\n            : this.state.backgroundColor\n\n    render() {\n        return (\n            <div\n                role=\"presentation\"\n                style={{\n                    ...this.state,\n                    backgroundColor: this.getBackgroundColor(\n                        this.props.selectedMessageType,\n                        this.props.messageType.id\n                    ),\n                    cursor: this.state.cursor,\n                    alignItems: 'center',\n                    height: '49px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                    justifyContent: 'space-between',\n                }}\n                onMouseEnter={this.onMouseEnter}\n                onMouseLeave={this.onMouseLeave}\n                onClick={() => this.onClick()}\n            >\n                <Subheader\n                    style={{\n                        marginLeft: '5px',\n                        fontSize:\n                            this.props.selectedMessageType &&\n                            this.props.messageType.id ===\n                                this.props.selectedMessageType.id\n                                ? '18px'\n                                : '16px',\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                        whiteSpace: 'nowrap',\n                        color:\n                            this.props.selectedMessageType &&\n                            this.props.messageType.id ===\n                                this.props.selectedMessageType.id\n                                ? theme.palette.primary1Color\n                                : this.state.textColor,\n                    }}\n                >\n                    {i18n.t(this.props.messageType.displayName)}\n                </Subheader>\n                {this.props.loading ? (\n                    <CircularProgress\n                        style={{ marginRight: '10px' }}\n                        color={theme.palette.primary1Color}\n                        size={24}\n                    />\n                ) : (\n                    this.props.messageType.unread > 0 && (\n                        <Badge\n                            style={{ marginTop: '12px', marginRight: '5px' }}\n                            badgeContent={\n                                this.props.messageType.unread > 100\n                                    ? '99+'\n                                    : this.props.messageType.unread\n                            }\n                            secondary\n                            badgeStyle={{ backgroundColor: '#439E8E' }}\n                        />\n                    )\n                )}\n            </div>\n        )\n    }\n}\n\nMessageTypeItem.propTypes = {\n    loading: propTypes.bool,\n    messageType: propTypes.object,\n    selectedMessageType: propTypes.object,\n    onClick: propTypes.func,\n}\n\nexport default MessageTypeItem\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport { List } from 'material-ui/List'\nimport Divider from 'material-ui/Divider'\nimport Toggle from 'material-ui/Toggle'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport { setSelectedMessageType, clearCheckedIds } from '../../actions'\nimport MessageTypeItem from './MessageTypeItem'\nimport theme from '../../styles/theme'\nimport moment from 'moment'\n\nconst styles = {\n    canvas: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        height: 'calc(100vh - 95px)',\n        borderLeftStyle: 'solid',\n        borderLeftWidth: '0.5px',\n        borderLeftColor: theme.palette.accent4Color,\n        borderRightStyle: 'solid',\n        borderRightWidth: '1px',\n        borderRightColor: theme.palette.accent4Color,\n        overflowY: 'auto',\n        overflowX: 'hidden',\n        minWidth: '200px',\n    },\n}\n\nclass SidebarList extends Component {\n    constructor(props) {\n        super(props)\n        this.props.setSelectedMessageType(this.props.match.params.messageType)\n    }\n\n    render() {\n        const messageTypes = this.props.messageTypes\n\n        return (\n            <div style={styles.canvas}>\n                <List\n                    style={{\n                        padding: '0px',\n                    }}\n                >\n                    {messageTypes &&\n                        messageTypes.map(messageType => (\n                            <div key={messageType.id}>\n                                <MessageTypeItem\n                                    messageType={messageType}\n                                    onClick={() => {\n                                        this.props.setSelectedMessageType(\n                                            messageType.id\n                                        )\n                                        this.props.updateInputFields('', '', [])\n                                        this.props.attachments.length > 0 &&\n                                            this.props.clearAttachments()\n                                        history.push(`/${messageType.id}`)\n                                    }}\n                                    selectedMessageType={\n                                        this.props.selectedMessageType\n                                    }\n                                    loading={messageType.loading}\n                                />\n                                <Divider />\n                            </div>\n                        ))}\n                </List>\n                <Toggle\n                    style={{ width: '', margin: '20px' }}\n                    label={`${i18n.t('Auto refresh')} (${moment(\n                        this.props.refreshTimer\n                    ).format('mm:ss')})`}\n                    toggled={this.props.autoRefresh}\n                    onToggle={() =>\n                        this.props.setAutoRefresh(!this.props.autoRefresh)\n                    }\n                />\n            </div>\n        )\n    }\n}\n\nSidebarList.propTypes = {\n    attachments: propTypes.array,\n    autoRefresh: propTypes.bool,\n    clearAttachments: propTypes.func,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    refreshTimer: propTypes.number,\n    selectedMessageType: propTypes.object,\n    setAutoRefresh: propTypes.func,\n    setSelectedMessageType: propTypes.func,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageType: state.messaging.selectedMessageType,\n    messageTypes: state.messaging.messageTypes,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            setSelectedMessageType,\n            clearCheckedIds,\n        },\n        null,\n        { pure: false }\n    )\n)(SidebarList)\n","import theme from '../styles/theme';\nexport const messagePanelContainer = {\n  overflowY: 'scroll',\n  overflowX: 'hidden',\n  borderRightWidth: '1px',\n  borderRightColor: theme.palette.accent4Color,\n  height: 'calc(100vh - 95px)'\n};\nexport const subheader = {\n  paddingLeft: '0px',\n  fontSize: '20px'\n};","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport Checkbox from 'material-ui/Checkbox'\nimport Paper from 'material-ui/Paper'\nimport i18n from '@dhis2/d2-i18n'\nimport { setAllChecked, clearCheckedIds } from '../../actions'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\n\nconst fontSize = '16px'\n\nconst styles = {\n    canvas(backgroundColor) {\n        return {\n            backgroundColor,\n            display: 'flex',\n            transition: 'all 0.2s ease-in-out',\n            boxSizing: 'border-box',\n            position: 'relative',\n            whiteSpace: 'nowrap',\n            alignSelf: 'center',\n            boxShadow: 'none',\n            borderBottom: '1px solid #dfdfdf',\n        }\n    },\n    checkBox: {\n        flex: '0 0 32px',\n        display: 'flex',\n        alignSelf: 'center',\n        paddingLeft: '12px',\n    },\n    sender: {\n        fontFamily,\n        fontSize,\n        flex: 3,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        color: 'black',\n        paddingLeft: 10,\n        alignSelf: 'center',\n    },\n    subject: {\n        flex: 8,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        fontFamily,\n        fontSize,\n        color: 'black',\n        paddingLeft: 10,\n    },\n    extendedLabel: {\n        flex: 2,\n        color: 'black',\n        fontSize,\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        padding: '0 0 0 10px',\n    },\n}\n\nclass MessageConversationListItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            cursor: 'auto',\n            allChecked: false,\n        }\n    }\n\n    componentDidUpdate() {\n        if (\n            this.state.allChecked &&\n            this.props.checkedIds.length < this.props.messages.length\n        ) {\n            this.setState({ allChecked: false })\n        }\n    }\n\n    render() {\n        const displayExtendedChoices = this.props.displayExtendedChoices\n\n        return (\n            <Paper style={styles.canvas(theme.palette.canvasColor)}>\n                <Checkbox\n                    checked={this.state.allChecked}\n                    style={styles.checkBox}\n                    onCheck={() => {\n                        this.state.allChecked\n                            ? this.props.clearCheckedIds()\n                            : this.props.setAllChecked(\n                                  this.props.messages.map(child => ({\n                                      id: child.id,\n                                  }))\n                              )\n\n                        this.setState({ allChecked: !this.state.allChecked })\n                    }}\n                />\n                <div style={styles.sender}>{i18n.t('Sender')}</div>\n                <Subheader style={styles.subject}>\n                    {i18n.t('Subject')}\n                </Subheader>\n                {displayExtendedChoices && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Status')}\n                    </Subheader>\n                )}\n                {displayExtendedChoices && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Priority')}\n                    </Subheader>\n                )}\n                {this.props.notification && (\n                    <Subheader style={styles.extendedLabel}>\n                        {i18n.t('Assignee')}\n                    </Subheader>\n                )}\n                <Subheader style={styles.extendedLabel}>\n                    {i18n.t('Date')}\n                </Subheader>\n            </Paper>\n        )\n    }\n}\n\nMessageConversationListItem.propTypes = {\n    checkedIds: propTypes.array,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    messages: propTypes.array,\n    notification: propTypes.bool,\n    setAllChecked: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    checkedIds: state.messaging.checkedIds,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n})\n\nexport default compose(\n    connect(mapStateToProps, {\n        setAllChecked,\n        clearCheckedIds,\n    })\n)(MessageConversationListItem)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport Checkbox from 'material-ui/Checkbox'\nimport Paper from 'material-ui/Paper'\nimport Flag from 'material-ui-icons/Flag'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport {\n    setChecked,\n    setSelectedMessageConversation,\n    markMessageConversations,\n    clearCheckedIds,\n    setFilter,\n    updateInputFields,\n    clearAttachments,\n} from '../../actions'\nimport ExtendedChoiceLabel from '../Common/ExtendedChoiceLabel'\nimport theme from '../../styles/theme'\nimport { fontFamily } from '../../constants/development'\nimport moment from 'moment'\n\nconst styles = {\n    container(backgroundColor, wideview, cursor) {\n        return {\n            backgroundColor,\n            display: 'flex',\n            transition: 'all 0.2s ease-in-out',\n            cursor: cursor,\n            boxSizing: 'border-box',\n            position: 'relative',\n            whiteSpace: 'nowrap',\n            boxShadow: 'none',\n            borderBottom: '1px solid #dfdfdf',\n            flexWrap: wideview ? 'nowrap' : 'wrap',\n        }\n    },\n    checkBox(wideview) {\n        return {\n            flex: '0 0 32px',\n            display: 'flex',\n            alignSelf: 'center',\n            paddingLeft: wideview ? 12 : 6,\n        }\n    },\n    flag: {\n        color: theme.palette.followUp,\n        marginRight: 4,\n    },\n    sender(wideview, fontWeight) {\n        return {\n            fontFamily,\n            fontSize: '14px',\n            flex: 3,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            display: 'flex',\n            alignItems: 'center',\n            color: 'black',\n            paddingLeft: wideview ? 10 : 0,\n            fontWeight,\n        }\n    },\n    subject(wideview, fontColor, fontWeight) {\n        return {\n            flex: 8,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            paddingLeft: 10,\n            fontFamily,\n            color: fontColor,\n            fontWeight,\n            order: wideview ? 'inherit' : 10,\n            marginTop: wideview ? 0 : -10,\n            flexBasis: wideview ? '0%' : '100%',\n        }\n    },\n    dateFormat(wideview, fontColor, fontWeight) {\n        return {\n            flex: 2,\n            fontFamily,\n            paddingLeft: wideview ? 10 : 0,\n            paddingRight: wideview ? 0 : 10,\n            overflow: 'hidden',\n            textOverflow: 'ellipsis',\n            whiteSpace: 'nowrap',\n            textAlign: wideview ? '' : 'end',\n            color: fontColor,\n            fontWeight,\n        }\n    },\n}\n\nclass MessageConversationListItem extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            backgroundColor: theme.palette.canvasColor,\n            cursor: 'auto',\n        }\n    }\n\n    onClick = messageConversation => {\n        this.props.setSelectedMessageConversation(messageConversation)\n        if (messageConversation && !messageConversation.read) {\n            this.props.markMessageConversations(\n                'read',\n                [messageConversation.id],\n                this.props.selectedMessageType\n            )\n        }\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n        history.push(\n            `/${messageConversation.messageType}/${messageConversation.id}`\n        )\n    }\n\n    onMouseEnter = () =>\n        this.setState({\n            cursor: 'pointer',\n            backgroundColor: theme.palette.accent2Color,\n        })\n    onMouseLeave = () =>\n        this.setState({\n            cursor: 'auto',\n            backgroundColor: theme.palette.canvasColor,\n        })\n\n    getBackgroundColor = (messageConversation, checked) => {\n        const selectedMessageConversation =\n            this.props.selectedMessageConversation &&\n            messageConversation.id === this.props.selectedMessageConversation.id\n\n        if (checked && !selectedMessageConversation) {\n            return theme.palette.blue50\n        } else if (selectedMessageConversation) {\n            return theme.palette.accent3Color\n        }\n        return this.state.backgroundColor\n    }\n\n    render() {\n        const messageConversation = this.props.messageConversation\n        const title = messageConversation.lastSender\n            ? messageConversation.lastSender.displayName\n            : this.props.selectedMessageType.displayName\n        const checked = !!this.props.checkedIds.find(\n            x => x.id === messageConversation.id\n        )\n\n        const displayExtendedChoices = this.props.displayExtendedChoices\n\n        const displayTimeDiff = this.props.displayTimeDiff\n\n        const today = moment()\n        const messageDate = moment(messageConversation.lastMessage).add(\n            displayTimeDiff\n        )\n        const fontWeight = !messageConversation.read ? 'bold' : ''\n        const fontColor = this.props.messageConversation.read\n            ? 'black'\n            : theme.palette.darkGray\n\n        const containerBackgroundColor = this.getBackgroundColor(\n            messageConversation,\n            checked\n        )\n\n        return (\n            <Paper\n                style={styles.container(\n                    containerBackgroundColor,\n                    this.props.wideview,\n                    this.state.cursor\n                )}\n                onClick={event => {\n                    const onClick =\n                        event.target.innerText !== undefined &&\n                        event.target.innerText !== ''\n\n                    if (\n                        onClick &&\n                        !this.props.settingSelectedMessageConversation\n                    ) {\n                        this.onClick(messageConversation)\n                        this.props.checkedIds.length > 0 &&\n                            this.props.clearCheckedIds()\n                        if (\n                            this.props.wideview &&\n                            (this.props.messageFilter !== undefined ||\n                                this.props.priorityFilter !== undefined ||\n                                this.props.statusFilter !== undefined)\n                        ) {\n                            this.props.setFilter(undefined, 'MESSAGE')\n                        }\n                    }\n                }}\n                onMouseEnter={this.onMouseEnter}\n                onMouseLeave={this.onMouseLeave}\n            >\n                <Checkbox\n                    checked={checked}\n                    style={styles.checkBox(this.props.wideview)}\n                    onCheck={() => {\n                        this.props.setChecked(messageConversation, !checked)\n                    }}\n                />\n                <div style={styles.sender(this.props.wideview, fontWeight)}>\n                    {messageConversation.followUp && (\n                        <Flag style={styles.flag} />\n                    )}\n                    <span>{title}</span>\n                </div>\n                <Subheader\n                    style={styles.subject(\n                        this.props.wideview,\n                        fontColor,\n                        fontWeight\n                    )}\n                >\n                    {messageConversation.subject}\n                </Subheader>\n                {displayExtendedChoices && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Status')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={messageConversation.status}\n                    />\n                )}\n                {displayExtendedChoices && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Priority')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={messageConversation.priority}\n                    />\n                )}\n                {this.props.notification && this.props.wideview && (\n                    <ExtendedChoiceLabel\n                        showTitle={false}\n                        title={i18n.t('Assignee')}\n                        color={fontColor}\n                        fontWeight={fontWeight}\n                        label={\n                            messageConversation.assignee\n                                ? messageConversation.assignee.displayName\n                                : undefined\n                        }\n                    />\n                )}\n                <Subheader\n                    style={styles.dateFormat(\n                        this.props.wideview,\n                        fontColor,\n                        fontWeight\n                    )}\n                >\n                    {today.diff(messageDate, 'hours') < 72\n                        ? messageDate.from(today)\n                        : today.year() === messageDate.year()\n                        ? messageDate.format('MMM DD')\n                        : messageDate.format('ll')}\n                </Subheader>\n            </Paper>\n        )\n    }\n}\n\nMessageConversationListItem.propTypes = {\n    attachments: propTypes.array,\n    checkedIds: propTypes.array,\n    clearAttachments: propTypes.func,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    displayTimeDiff: propTypes.number,\n    markMessageConversations: propTypes.func,\n    messageConversation: propTypes.object,\n    messageFilter: propTypes.string,\n    notification: propTypes.bool,\n    priorityFilter: propTypes.string,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setChecked: propTypes.func,\n    setFilter: propTypes.func,\n    setSelectedMessageConversation: propTypes.func,\n    settingSelectedMessageConversation: propTypes.bool,\n    statusFilter: propTypes.string,\n    updateInputFields: propTypes.func,\n    wideview: propTypes.bool,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    settingSelectedMessageConversation:\n        state.messaging.settingSelectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n    checkedIds: state.messaging.checkedIds,\n    displayTimeDiff: state.messaging.displayTimeDiff,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    attachments: state.messaging.attachments,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            setChecked,\n            setSelectedMessageConversation,\n            markMessageConversations,\n            clearCheckedIds,\n            setFilter,\n            updateInputFields,\n            clearAttachments,\n        },\n        null,\n        { pure: false }\n    )\n)(MessageConversationListItem)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport CircularProgress from 'material-ui/CircularProgress'\nimport i18n from '@dhis2/d2-i18n'\nimport { loadMessageConversations } from '../../actions'\nimport { messagePanelContainer } from '../../styles/style'\nimport theme from '../../styles/theme'\nimport ListItemHeader from './ListItemHeader'\nimport MessageConversationListItem from './MessageConversationListItem'\nimport { dedupeById, debounce } from '../../utils/helpers'\n\nconst NOTIFICATIONS = ['VALIDATION_RESULT', 'TICKET']\nconst bottomEmptyHeight = 50\n\nconst styles = {\n    canvas(wideview) {\n        return {\n            flex: '1 0',\n            maxWidth: wideview ? 'none' : '350px',\n            minWidth: wideview ? 'none' : '250px',\n            borderRightStyle: wideview ? '' : 'solid',\n            ...messagePanelContainer,\n        }\n    },\n    loading: {\n        backgroundColor: theme.palette.accent2Color,\n        height: `${bottomEmptyHeight}px`,\n        transition: 'all 0.2s ease-in-out',\n        display: 'flex',\n        justifyContent: 'center',\n    },\n}\n\nclass MessageConversationList extends Component {\n    onScroll = messageType => {\n        const messageList = document.getElementById('messagelist')\n        if (\n            !this.props.selectedMessageType.loading &&\n            this.isBottom(messageList) &&\n            messageType.loaded < messageType.total\n        ) {\n            this.props.loadMessageConversations(\n                messageType,\n                messageType.id,\n                true\n            )\n        }\n    }\n\n    debouncedOnScroll = debounce(this.onScroll, 150)\n    isBottom = el => el.scrollHeight - el.scrollTop < window.outerHeight\n\n    render() {\n        const messages = dedupeById(\n            this.props.messageConversations[this.props.selectedMessageType.id]\n        )\n\n        const messageType = this.props.selectedMessageType\n            ? this.props.selectedMessageType\n            : ''\n        const selectedValue = this.props.selectedMessageConversation\n            ? this.props.selectedMessageConversation.id\n            : ''\n\n        const notification = !!(NOTIFICATIONS.indexOf(messageType.id) + 1)\n        return (\n            <div\n                id={'messagelist'}\n                onScroll={() =>\n                    this.debouncedOnScroll(this.props.selectedMessageType)\n                }\n                style={styles.canvas(this.props.wideview)}\n            >\n                {this.props.wideview && (\n                    <ListItemHeader\n                        notification={notification}\n                        displayExtendedChoices={\n                            this.props.displayExtendedChoices\n                        }\n                        messages={messages}\n                    />\n                )}\n                {messages && messages.length !== 0\n                    ? messages.map(child => (\n                          <MessageConversationListItem\n                              key={child.id}\n                              messageConversation={child}\n                              wideview={this.props.wideview}\n                              selectedValue={selectedValue}\n                              notification={notification}\n                              displayExtendedChoices={\n                                  this.props.displayExtendedChoices\n                              }\n                          />\n                      ))\n                    : !this.props.selectedMessageType.loading && (\n                          <Subheader>\n                              {i18n.t(\n                                  `No ${messageType.displayName.toLowerCase()} messages`\n                              )}\n                          </Subheader>\n                      )}\n                {this.props.selectedMessageType.loading && (\n                    <div style={styles.loading}>\n                        <CircularProgress\n                            style={{ marginTop: '10px' }}\n                            color={theme.palette.primary1Color}\n                        />\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nMessageConversationList.propTypes = {\n    displayExtendedChoices: propTypes.bool,\n    loadMessageConversations: propTypes.func,\n    messageConversations: propTypes.object,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.shape({\n        id: propTypes.string,\n        loading: propTypes.bool,\n    }),\n    wideview: propTypes.bool,\n}\n\nconst mapStateToProps = state => ({\n    messageTypes: state.messaging.messageTypes,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    messageConversations: state.messaging.messageConversations,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    selectedMessageType: state.messaging.selectedMessageType,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            loadMessageConversations,\n        },\n        null,\n        { pure: false }\n    )\n)(MessageConversationList)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport i18n from '@dhis2/d2-i18n'\nimport { Card, CardActions, CardText } from 'material-ui/Card'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport FlatButton from 'material-ui/FlatButton'\nimport TextField from 'material-ui/TextField'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport RadioButton from 'material-ui/RadioButton'\nimport {\n    sendMessage,\n    sendFeedbackMessage,\n    displaySnackMessage,\n    updateInputFields,\n    addAttachment,\n    removeAttachment,\n    cancelAttachment,\n    addRecipientByUserId,\n} from '../../actions'\nimport history from '../../utils/history'\nimport { supportsAttachments } from '../../utils/helpers'\nimport SuggestionField from '../Common/SuggestionField'\nimport AttachmentUploadButton from '../Attachments/AttachmentUploadButton'\nimport { NEGATIVE } from '../../constants/development'\nimport Attachments from '../Attachments/Attachments'\nimport { subheader } from '../../styles/style'\n\nconst styles = {\n    canvas: {\n        flex: '3 0',\n        margin: '10px',\n        overflowY: 'scroll',\n        overflowX: 'hidden',\n        height: 'calc(100vh - 110px)',\n    },\n    messageTypeField: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    messageType: { width: '300px', marginTop: '10px' },\n}\n\nclass CreateMessage extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            isMessageFeedback: false,\n        }\n    }\n\n    componentDidMount() {\n        const { addRecipientByUserId } = this.props\n        const { messageId, recipientId } = this.props.match.params\n\n        if (messageId === 'create' && recipientId) {\n            addRecipientByUserId(recipientId)\n        }\n    }\n\n    subjectUpdate = (event, newValue) => {\n        this.props.updateInputFields(\n            newValue,\n            this.props.input,\n            this.props.recipients\n        )\n    }\n\n    inputUpdate = (event, newValue) => {\n        this.props.updateInputFields(\n            this.props.subject,\n            newValue,\n            this.props.recipients\n        )\n    }\n\n    updateRecipients = recipients => {\n        this.props.updateInputFields(\n            this.props.subject,\n            this.props.input,\n            recipients\n        )\n    }\n\n    sendMessage = () => {\n        const messageTypeId = this.state.isMessageFeedback\n            ? 'TICKET'\n            : 'PRIVATE'\n        const messageType = this.props.messageTypes.find(\n            messageType => messageType.id === messageTypeId\n        )\n\n        if (this.state.isMessageFeedback) {\n            this.props.sendFeedbackMessage(messageType)\n            history.push('/TICKET')\n        } else {\n            const users = this.props.recipients.filter(r => r.type === 'user')\n            const userGroups = this.props.recipients.filter(\n                r => r.type === 'userGroup'\n            )\n            const organisationUnits = this.props.recipients.filter(\n                r => r.type === 'organisationUnit'\n            )\n\n            this.props.sendMessage({\n                users,\n                userGroups,\n                organisationUnits,\n                messageType,\n            })\n            history.push('/PRIVATE')\n        }\n    }\n\n    wipeInput = () => {\n        this.props.updateInputFields('', '', [])\n        this.props.attachments.length > 0 && this.props.clearAttachments()\n    }\n\n    handleDiscard = () => {\n        const message = i18n.t('Message discarded')\n        const snackType = NEGATIVE\n        const onSnackActionClick = () => history.push('/PRIVATE/create')\n        const onSnackRequestClose = () => this.wipeInput()\n\n        this.props.displaySnackMessage({\n            message,\n            onSnackActionClick,\n            onSnackRequestClose,\n            snackType,\n        })\n\n        history.push('/PRIVATE')\n    }\n\n    render() {\n        const disabled =\n            this.props.subject === '' ||\n            this.props.input === '' ||\n            (!this.state.isMessageFeedback &&\n                this.props.recipients.length === 0)\n\n        const discardDisabled =\n            this.props.subject === '' &&\n            this.props.input === '' &&\n            !this.state.isMessageFeedback &&\n            this.props.recipients.length === 0\n\n        return (\n            <div style={styles.canvas}>\n                <Subheader style={subheader}> {i18n.t('Create')}</Subheader>\n                <Card>\n                    <CardText>\n                        <SuggestionField\n                            style={{ margin: '0px' }}\n                            label={i18n.t('To')}\n                            disabled={this.state.isMessageFeedback}\n                            recipients={\n                                this.state.isMessageFeedback\n                                    ? [\n                                          {\n                                              id: 'id',\n                                              displayName: i18n.t(\n                                                  'Feedback recipient group'\n                                              ),\n                                          },\n                                      ]\n                                    : this.props.recipients\n                            }\n                            updateRecipients={this.updateRecipients}\n                            inputHeight={'100px'}\n                        />\n                        <div style={styles.messageTypeField}>\n                            <div style={styles.messageType}>\n                                <RadioButton\n                                    label={i18n.t('Private message')}\n                                    checked={!this.state.isMessageFeedback}\n                                    onCheck={() => {\n                                        this.setState({\n                                            isMessageFeedback: !this.state\n                                                .isMessageFeedback,\n                                        })\n                                    }}\n                                />\n                            </div>\n                            <div style={styles.messageType}>\n                                <RadioButton\n                                    label={i18n.t('Feedback message')}\n                                    checked={this.state.isMessageFeedback}\n                                    onCheck={() => {\n                                        this.setState({\n                                            isMessageFeedback: !this.state\n                                                .isMessageFeedback,\n                                        })\n                                    }}\n                                />\n                            </div>\n                        </div>\n                        <TextField\n                            floatingLabelText={i18n.t('Subject')}\n                            fullWidth\n                            value={this.props.subject}\n                            onChange={this.subjectUpdate}\n                        />\n                        <TextField\n                            key={'createMessage'}\n                            id={'createMessage'}\n                            rows={5}\n                            underlineShow={false}\n                            value={this.props.input}\n                            multiLine\n                            fullWidth\n                            floatingLabelText={i18n.t('Message')}\n                            onChange={this.inputUpdate}\n                        />\n                        {this.props.enableAttachments && (\n                            <Attachments\n                                dataDirection={'upload'}\n                                attachments={this.props.attachments}\n                                removeAttachment={attachment =>\n                                    this.props.removeAttachment(attachment.id)\n                                }\n                                cancelAttachment={this.props.cancelAttachment}\n                            />\n                        )}\n                        <CardActions style={{ paddingLeft: '0px' }}>\n                            <RaisedButton\n                                primary\n                                disabled={disabled}\n                                label={i18n.t('Send')}\n                                onClick={() => this.sendMessage()}\n                            />\n                            <FlatButton\n                                label={i18n.t('Discard')}\n                                disabled={discardDisabled}\n                                onClick={this.handleDiscard}\n                            />\n                            {this.props.enableAttachments && (\n                                <AttachmentUploadButton\n                                    addAttachment={attachment => {\n                                        this.props.addAttachment(attachment)\n                                    }}\n                                />\n                            )}\n                        </CardActions>\n                    </CardText>\n                </Card>\n            </div>\n        )\n    }\n}\n\nCreateMessage.propTypes = {\n    addAttachment: propTypes.func,\n    addRecipientByUserId: propTypes.func,\n    attachments: propTypes.array,\n    cancelAttachment: propTypes.func,\n    clearAttachments: propTypes.func,\n    displaySnackMessage: propTypes.func,\n    enableAttachments: propTypes.bool,\n    input: propTypes.string,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    recipients: propTypes.array,\n    removeAttachment: propTypes.func,\n    sendFeedbackMessage: propTypes.func,\n    sendMessage: propTypes.func,\n    subject: propTypes.string,\n    updateInputFields: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    messageTypes: state.messaging.messageTypes,\n    subject: state.messaging.subject,\n    input: state.messaging.input,\n    recipients: state.messaging.recipients,\n    attachments: state.messaging.attachments,\n    enableAttachments: supportsAttachments(state.messaging.dhis2CoreVersion),\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            sendMessage,\n            sendFeedbackMessage,\n            displaySnackMessage,\n            updateInputFields,\n            addAttachment,\n            removeAttachment,\n            cancelAttachment,\n            addRecipientByUserId,\n        },\n        null,\n        { pure: false }\n    )\n)(CreateMessage)\n","import i18n from '@dhis2/d2-i18n';\nconst extendedChoices = {\n  STATUS: [{\n    key: 'NONE',\n    value: 'NONE',\n    primaryText: i18n.t('No status')\n  }, {\n    key: 'OPEN',\n    value: 'OPEN',\n    primaryText: i18n.t('Open')\n  }, {\n    key: 'PENDING',\n    value: 'PENDING',\n    primaryText: i18n.t('Pending')\n  }, {\n    key: 'INVALID',\n    value: 'INVALID',\n    primaryText: i18n.t('Invalid')\n  }, {\n    key: 'SOLVED',\n    value: 'SOLVED',\n    primaryText: i18n.t('Solved')\n  }],\n  PRIORITY: [{\n    key: 'NONE',\n    value: 'NONE',\n    primaryText: i18n.t('No priority')\n  }, {\n    key: 'HIGH',\n    value: 'HIGH',\n    primaryText: i18n.t('High')\n  }, {\n    key: 'MEDIUM',\n    value: 'MEDIUM',\n    primaryText: i18n.t('Medium')\n  }, {\n    key: 'LOW',\n    value: 'LOW',\n    primaryText: i18n.t('Low')\n  }]\n};\nexport default extendedChoices;","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport Dialog from 'material-ui/Dialog'\nimport i18n from '@dhis2/d2-i18n'\nimport SuggestionField from './SuggestionField'\n\nconst AssignToDialog = ({\n    open,\n    onRequestClose,\n    updateMessageConversations,\n    messageType,\n    feedbackRecipientsId,\n}) => (\n    <Dialog\n        open={open}\n        onRequestClose={() => {\n            onRequestClose()\n        }}\n    >\n        <SuggestionField\n            onSuggestionClick={chip => {\n                updateMessageConversations([chip.id])\n                onRequestClose()\n            }}\n            searchOnlyUsers\n            searchOnlyFeedbackRecipients={messageType.id === 'TICKET'}\n            feedbackRecipientsId={feedbackRecipientsId}\n            recipients={[]}\n            key={'suggestionField'}\n            label={i18n.t('Assignee')}\n        />\n    </Dialog>\n)\n\nAssignToDialog.propTypes = {\n    feedbackRecipientsId: propTypes.string,\n    messageType: propTypes.shape({ id: propTypes.string }),\n    open: propTypes.bool,\n    updateMessageConversations: propTypes.func,\n    onRequestClose: propTypes.func,\n}\n\nexport default AssignToDialog\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport FlatButton from 'material-ui/FlatButton'\nimport Dialog from 'material-ui/Dialog'\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert'\nimport ArrowDropRight from 'material-ui/svg-icons/navigation-arrow-drop-right'\nimport Assignment from 'material-ui-icons/Assignment'\nimport IconMenu from 'material-ui/IconMenu'\nimport MenuItem from 'material-ui/MenuItem'\nimport IconButton from 'material-ui/IconButton'\nimport Subheader from 'material-ui/Subheader'\nimport Divider from 'material-ui/Divider'\nimport Delete from 'material-ui-icons/Delete'\nimport MarkUnread from 'material-ui-icons/Markunread'\nimport Done from 'material-ui-icons/Done'\nimport i18n from '@dhis2/d2-i18n'\nimport {\n    clearCheckedIds,\n    clearSelectedMessageConversation,\n    deleteMessageConversations,\n    updateMessageConversations,\n    markMessageConversations,\n} from '../../actions'\nimport extendedChoices from '../../constants/extendedChoices'\nimport history from '../../utils/history'\nimport AssignToDialog from './AssignToDialog'\n\nconst multiSelectDisplayLimit = 99\n\nconst styles = {\n    canvas: {\n        width: '400px',\n        display: 'flex',\n    },\n    extendedChoices: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n    },\n    nrSelected: {\n        padding: '0px 0px',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n}\n\nclass ToolbarExtendedChoicePicker extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            checkedItems: false,\n            dialogOpen: false,\n            assignToOpen: false,\n        }\n    }\n\n    getIds = () =>\n        this.props.selectedMessageConversation &&\n        this.props.checkedIds.length === 0\n            ? [this.props.selectedMessageConversation.id]\n            : this.props.checkedIds.map(id => id.id)\n\n    updateMessageConversation = (identifier, value) => {\n        const {\n            selectedMessageType: messageType,\n            selectedMessageConversation,\n        } = this.props\n        const messageConversationIds = this.getIds()\n\n        this.props.updateMessageConversations({\n            messageConversationIds,\n            identifier,\n            value,\n            messageType,\n            selectedMessageConversation,\n        })\n        this.props.checkedIds.length > 0 && this.props.clearCheckedIds()\n    }\n\n    markMessageConversations = mode => {\n        const ids = this.getIds()\n        this.props.markMessageConversations(\n            mode,\n            ids,\n            this.props.selectedMessageType\n        )\n        this.props.checkedIds.length > 0 && this.props.clearCheckedIds()\n    }\n\n    toggleDialog = () => {\n        this.setState({ dialogOpen: !this.state.dialogOpen })\n    }\n\n    render() {\n        const messageConversation = this.props.selectedMessageConversation\n        const multiSelect = this.props.checkedIds.length > 0\n        const display = multiSelect || messageConversation !== undefined\n\n        const actionButtons = (\n            <>\n                <FlatButton\n                    label={i18n.t('Cancel')}\n                    primary\n                    onClick={() => this.toggleDialog()}\n                />\n                <FlatButton\n                    label={i18n.t('Submit')}\n                    primary\n                    keyboardFocused\n                    onClick={() => {\n                        this.props.deleteMessageConversations(\n                            this.getIds(),\n                            this.props.selectedMessageType\n                        )\n                        this.props.clearCheckedIds()\n                        this.toggleDialog()\n\n                        if (this.props.selectedMessageConversation) {\n                            this.props.clearSelectedMessageConversation()\n                            history.push(\n                                `/${this.props.selectedMessageType.id}`\n                            )\n                        }\n                    }}\n                />\n            </>\n        )\n\n        const displayNumberOfCheckedIds =\n            this.props.checkedIds.length > multiSelectDisplayLimit\n                ? `${multiSelectDisplayLimit}+`\n                : this.props.checkedIds.length\n\n        return display ? (\n            <div style={styles.canvas}>\n                <Dialog\n                    title={i18n.t(\n                        'Are you sure you want to delete selected message conversation(s)?'\n                    )}\n                    actions={actionButtons}\n                    modal={false}\n                    open={this.state.dialogOpen}\n                    onRequestClose={this.toggleDialog}\n                />\n                <AssignToDialog\n                    open={this.state.assignToOpen}\n                    onRequestClose={() =>\n                        this.setState({\n                            assignToOpen: !this.state.assignToOpen,\n                        })\n                    }\n                    updateMessageConversations={id =>\n                        this.updateMessageConversation('ASSIGNEE', id)\n                    }\n                    messageType={this.props.selectedMessageType}\n                    feedbackRecipientsId={this.props.feedbackRecipientsId}\n                />\n\n                <div style={styles.extendedChoices}>\n                    <IconButton\n                        tooltip={i18n.t('Delete selected')}\n                        onClick={() => {\n                            this.toggleDialog()\n                        }}\n                    >\n                        <Delete />\n                    </IconButton>\n\n                    <IconButton\n                        tooltip={i18n.t('Mark selected as unread')}\n                        onClick={() => {\n                            this.markMessageConversations('unread')\n                        }}\n                    >\n                        <MarkUnread />\n                    </IconButton>\n\n                    <IconButton\n                        tooltip={i18n.t('Mark selected as read')}\n                        onClick={() => {\n                            this.markMessageConversations('read')\n                        }}\n                    >\n                        <Done />\n                    </IconButton>\n                    {this.props.displayExtendedChoices && (\n                        <IconButton\n                            onClick={() =>\n                                this.setState({\n                                    assignToOpen: !this.state.assignToOpen,\n                                })\n                            }\n                            tooltip={i18n.t('Assign selected')}\n                        >\n                            <Assignment />\n                        </IconButton>\n                    )}\n                    {\n                        <IconMenu\n                            iconButtonElement={\n                                <IconButton>\n                                    <MoreVertIcon />\n                                </IconButton>\n                            }\n                            anchorOrigin={{\n                                horizontal: 'left',\n                                vertical: 'top',\n                            }}\n                            targetOrigin={{\n                                horizontal: 'left',\n                                vertical: 'top',\n                            }}\n                        >\n                            <MenuItem\n                                key={'markFollowUp'}\n                                value={'markFollowUp'}\n                                primaryText={i18n.t('Mark for followup')}\n                                onClick={() =>\n                                    this.updateMessageConversation(\n                                        'FOLLOW_UP',\n                                        true\n                                    )\n                                }\n                            />\n                            <MenuItem\n                                key={'clearFollowUp'}\n                                value={'clearFollowUp'}\n                                primaryText={i18n.t('Clear followup')}\n                                onClick={() =>\n                                    this.updateMessageConversation(\n                                        'FOLLOW_UP',\n                                        false\n                                    )\n                                }\n                            />\n                            {this.props.displayExtendedChoices && <Divider />}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    key={'clearAssigned'}\n                                    value={'clearAssigned'}\n                                    primaryText={i18n.t('Clear assignee')}\n                                    onClick={() =>\n                                        this.updateMessageConversation(\n                                            'ASSIGNEE',\n                                            undefined\n                                        )\n                                    }\n                                />\n                            )}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    primaryText={i18n.t('Set status')}\n                                    key={'setStatus'}\n                                    rightIcon={<ArrowDropRight />}\n                                    menuItems={extendedChoices.STATUS.map(\n                                        elem => (\n                                            <MenuItem\n                                                key={`${elem.key}_status`}\n                                                value={elem.value}\n                                                primaryText={elem.primaryText}\n                                                onClick={() =>\n                                                    this.updateMessageConversation(\n                                                        'STATUS',\n                                                        elem.key\n                                                    )\n                                                }\n                                            />\n                                        )\n                                    )}\n                                />\n                            )}\n                            {this.props.displayExtendedChoices && (\n                                <MenuItem\n                                    primaryText={i18n.t('Set priority')}\n                                    key={'setPriority'}\n                                    rightIcon={<ArrowDropRight />}\n                                    menuItems={extendedChoices.PRIORITY.map(\n                                        elem => (\n                                            <MenuItem\n                                                key={`${elem.key}_priority`}\n                                                value={elem.value}\n                                                primaryText={elem.primaryText}\n                                                onClick={() =>\n                                                    this.updateMessageConversation(\n                                                        'PRIORITY',\n                                                        elem.key\n                                                    )\n                                                }\n                                            />\n                                        )\n                                    )}\n                                />\n                            )}\n                        </IconMenu>\n                    }\n                </div>\n                {multiSelect && (\n                    <Subheader style={styles.nrSelected}>\n                        {`${displayNumberOfCheckedIds} ${i18n.t('selected')}`}\n                    </Subheader>\n                )}\n            </div>\n        ) : (\n            <div />\n        )\n    }\n}\n\nToolbarExtendedChoicePicker.propTypes = {\n    checkedIds: propTypes.array,\n    clearCheckedIds: propTypes.func,\n    clearSelectedMessageConversation: propTypes.func,\n    deleteMessageConversations: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    feedbackRecipientsId: propTypes.string,\n    markMessageConversations: propTypes.func,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    updateMessageConversations: propTypes.func,\n}\n\nconst mapStateToProps = state => ({\n    selectedMessageType: state.messaging.selectedMessageType,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    checkedIds: state.messaging.checkedIds,\n    feedbackRecipientsId: state.messaging.feedbackRecipientsId,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            clearCheckedIds,\n            clearSelectedMessageConversation,\n            deleteMessageConversations,\n            updateMessageConversations,\n            markMessageConversations,\n        },\n        null,\n        { pure: false }\n    )\n)(ToolbarExtendedChoicePicker)\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport ViewFancy from 'material-ui-icons/ViewList'\nimport ViewList from 'material-ui-icons/ViewHeadline'\nimport FlatButton from 'material-ui/FlatButton'\nimport Paper from 'material-ui/Paper'\nimport CreateMessageIcon from 'material-ui-icons/Add'\nimport NavigationBack from 'material-ui-icons/ArrowBack'\nimport TextField from 'material-ui/TextField'\nimport SelectField from 'material-ui/SelectField'\nimport MenuItem from 'material-ui/MenuItem'\nimport Subheader from 'material-ui/Subheader'\nimport IconMenu from 'material-ui/IconMenu'\nimport IconButton from 'material-ui/IconButton'\nimport Checkbox from 'material-ui/Checkbox/Checkbox'\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert'\nimport i18n from '@dhis2/d2-i18n'\nimport history from '../../utils/history'\nimport theme from '../../styles/theme'\nimport extendedChoices from '../../constants/extendedChoices'\nimport ToolbarExtendedChoicePicker from './ToolbarExtendedChoicePicker'\nimport { debounce } from '../../utils/helpers'\n\nconst headerHeight = '48px'\nconst searchDelay = 300\n\nconst styles = {\n    canvas(checkedOptions) {\n        return {\n            display: 'flex',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            backgroundColor: checkedOptions\n                ? theme.palette.blue50\n                : theme.palette.accent2Color,\n            zIndex: 10,\n        }\n    },\n    checkedOption: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n        minWidth: '200px',\n        margin: '6px 0',\n    },\n    filterControl: {\n        flex: 2,\n        height: headerHeight,\n        marginRight: 16,\n        maxWidth: 256,\n    },\n    rightHandCanvas: {\n        flex: '2 0',\n        display: 'flex',\n        paddingLeft: 16,\n    },\n    // IE11 has buggy support for `justifyContent: flex-end;`\n    // to achieve the same result we use a spacer div\n    ie11Spacer: {\n        flexGrow: 1,\n    },\n    iconMenu: {\n        width: '30px',\n        display: 'flex',\n    },\n}\n\nclass Toolbar extends Component {\n    state = {\n        lastMessageFilter: '',\n    }\n    debouncedSearch = debounce(this.search, searchDelay)\n\n    search(messageFilter) {\n        if (\n            this.props.selectedMessageType &&\n            this.state.lastMessageFilter !== messageFilter\n        ) {\n            this.props.loadMessageConversations(\n                this.props.selectedMessageType,\n                this.props.selectedMessageType.id\n            )\n            this.setState({ lastMessageFilter: messageFilter })\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.selectedMessageType &&\n            this.props.selectedMessageType.id !==\n                prevProps.selectedMessageType.id\n        ) {\n            this.debouncedSearch('')\n            this.props.messageFilter !== undefined &&\n                this.props.setFilter(undefined, 'MESSAGE')\n            this.props.statusFilter !== undefined &&\n                this.props.setFilter(undefined, 'STATUS')\n            this.props.priorityFilter !== undefined &&\n                this.props.setFilter(undefined, 'PRIORITY')\n            this.props.assignedToMeFilter &&\n                this.props.setFilter(false, 'ASSIGNED_TO_ME')\n            this.props.markedForFollowUpFilter &&\n                this.props.setFilter(false, 'MARKED_FOR_FOLLOWUP')\n            this.props.unreadFilter && this.props.setFilter(false, 'UNREAD')\n        }\n\n        if (\n            this.props.selectedMessageType !== undefined &&\n            !this.props.selectedMessageType.loading &&\n            (prevProps.statusFilter !== this.props.statusFilter ||\n                prevProps.priorityFilter !== this.props.priorityFilter ||\n                prevProps.assignedToMeFilter !==\n                    this.props.assignedToMeFilter ||\n                prevProps.markedForFollowUpFilter !==\n                    this.props.markedForFollowUpFilter ||\n                prevProps.unreadFilter !== this.props.unreadFilter ||\n                prevProps.selectedMessageType === undefined ||\n                prevProps.selectedMessageType.id !==\n                    this.props.selectedMessageType.id)\n        ) {\n            this.props.loadMessageConversations(\n                this.props.selectedMessageType,\n                this.props.selectedMessageType.id\n            )\n        }\n    }\n\n    render() {\n        const id = this.props.id\n        const displayExtendedChoices = this.props.displayExtendedChoices\n        const checkedOptions = this.props.checkedOptions\n\n        const displaySearch =\n            !this.props.wideview ||\n            (this.props.selectedMessageConversation === undefined &&\n                id !== 'create')\n\n        return (\n            <Paper style={styles.canvas(checkedOptions)}>\n                <div>\n                    {!checkedOptions && (\n                        <FlatButton\n                            style={styles.checkedOption}\n                            icon={<CreateMessageIcon />}\n                            onClick={() => history.push('/PRIVATE/create')}\n                            label={i18n.t('Compose')}\n                        />\n                    )}\n\n                    {checkedOptions && (\n                        <FlatButton\n                            style={styles.checkedOption}\n                            icon={<NavigationBack />}\n                            onClick={() => this.props.clearCheckedIds()}\n                            label={i18n.t('Deselect all')}\n                        />\n                    )}\n                </div>\n\n                <ToolbarExtendedChoicePicker\n                    displayExtendedChoices={displayExtendedChoices}\n                />\n\n                <div style={styles.rightHandCanvas}>\n                    <div style={styles.ie11Spacer} />\n                    {displayExtendedChoices &&\n                        displaySearch &&\n                        !checkedOptions && (\n                            <SelectField\n                                style={styles.filterControl}\n                                labelStyle={{\n                                    color:\n                                        this.props.statusFilter === undefined\n                                            ? 'lightGray'\n                                            : 'black',\n                                    top:\n                                        this.props.statusFilter === undefined\n                                            ? '-15px'\n                                            : '-2px',\n                                }}\n                                selectedMenuItemStyle={{\n                                    color: theme.palette.primary1Color,\n                                }}\n                                floatingLabelText={\n                                    this.props.statusFilter === undefined\n                                        ? i18n.t('Status')\n                                        : ''\n                                }\n                                floatingLabelStyle={{\n                                    top: '15px',\n                                }}\n                                iconStyle={{\n                                    top:\n                                        this.props.statusFilter === undefined\n                                            ? '-15px'\n                                            : '0px',\n                                }}\n                                value={this.props.statusFilter}\n                                onChange={(event, key, payload) => {\n                                    this.props.setFilter(\n                                        payload === null ? undefined : payload,\n                                        'STATUS'\n                                    )\n                                }}\n                            >\n                                <MenuItem\n                                    key={null}\n                                    value={null}\n                                    primaryText={''}\n                                />\n                                {extendedChoices.STATUS.map(elem => (\n                                    <MenuItem\n                                        key={elem.key}\n                                        value={elem.value}\n                                        primaryText={elem.primaryText}\n                                    />\n                                ))}\n                            </SelectField>\n                        )}\n\n                    {displayExtendedChoices &&\n                        displaySearch &&\n                        !checkedOptions && (\n                            <SelectField\n                                style={styles.filterControl}\n                                labelStyle={{\n                                    color:\n                                        this.props.priorityFilter === undefined\n                                            ? 'lightGray'\n                                            : 'black',\n                                    top:\n                                        this.props.priorityFilter === undefined\n                                            ? '-15px'\n                                            : '-2px',\n                                }}\n                                selectedMenuItemStyle={{\n                                    color: theme.palette.primary1Color,\n                                }}\n                                floatingLabelText={\n                                    this.props.priorityFilter === undefined\n                                        ? i18n.t('Priority')\n                                        : ''\n                                }\n                                floatingLabelStyle={{\n                                    top: '15px',\n                                }}\n                                iconStyle={{\n                                    top:\n                                        this.props.priorityFilter === undefined\n                                            ? '-15px'\n                                            : '0px',\n                                }}\n                                value={this.props.priorityFilter}\n                                onChange={(event, key, payload) => {\n                                    this.props.setFilter(\n                                        payload === null ? undefined : payload,\n                                        'PRIORITY'\n                                    )\n                                }}\n                            >\n                                <MenuItem\n                                    key={null}\n                                    value={null}\n                                    primaryText={''}\n                                />\n                                {extendedChoices.PRIORITY.map(elem => (\n                                    <MenuItem\n                                        key={elem.key}\n                                        value={elem.value}\n                                        primaryText={elem.primaryText}\n                                    />\n                                ))}\n                            </SelectField>\n                        )}\n\n                    {!checkedOptions && displaySearch && (\n                        <TextField\n                            style={styles.filterControl}\n                            fullWidth\n                            hintText={i18n.t('Search')}\n                            value={this.props.messageFilter || ''}\n                            onChange={(event, messageFilter) => {\n                                this.debouncedSearch(messageFilter)\n                                this.props.setFilter(messageFilter, 'MESSAGE')\n                            }}\n                            type=\"search\"\n                        />\n                    )}\n\n                    {!checkedOptions && displaySearch && (\n                        <IconMenu\n                            iconButtonElement={\n                                <IconButton>\n                                    <MoreVertIcon />\n                                </IconButton>\n                            }\n                            anchorOrigin={{\n                                horizontal: 'right',\n                                vertical: 'top',\n                            }}\n                            targetOrigin={{\n                                horizontal: 'right',\n                                vertical: 'top',\n                            }}\n                            style={styles.iconMenu}\n                            menuStyle={{ overflowX: 'hidden' }}\n                        >\n                            <Subheader style={{ padding: '0px 16px' }}>\n                                {i18n.t('Set filter')}\n                            </Subheader>\n                            {this.props.displayExtendedChoices && (\n                                <Checkbox\n                                    style={{ padding: '0px 16px' }}\n                                    key={'assignedToMeFilter'}\n                                    label={i18n.t('Assigned to me')}\n                                    checked={this.props.assignedToMeFilter}\n                                    onClick={() => {\n                                        this.props.setFilter(\n                                            !this.props.assignedToMeFilter,\n                                            'ASSIGNED_TO_ME'\n                                        )\n                                    }}\n                                />\n                            )}\n                            <Checkbox\n                                style={{ padding: '0px 16px' }}\n                                key={'markedForFollowUpFilter'}\n                                label={i18n.t('Marked for followup')}\n                                checked={this.props.markedForFollowUpFilter}\n                                onClick={() => {\n                                    this.props.setFilter(\n                                        !this.props.markedForFollowUpFilter,\n                                        'MARKED_FOR_FOLLOWUP'\n                                    )\n                                }}\n                            />\n                            <Checkbox\n                                style={{ padding: '0px 16px' }}\n                                key={'unreadFilter'}\n                                label={i18n.t('Unread messages')}\n                                checked={this.props.unreadFilter}\n                                onClick={() => {\n                                    this.props.setFilter(\n                                        !this.props.unreadFilter,\n                                        'UNREAD'\n                                    )\n                                }}\n                            />\n                        </IconMenu>\n                    )}\n                    <FlatButton\n                        style={{\n                            width: '50px',\n                            alignSelf: 'center',\n                        }}\n                        icon={\n                            !this.props.wideview ? <ViewList /> : <ViewFancy />\n                        }\n                        onClick={() => this.props.toogleWideview()}\n                    />\n                </div>\n            </Paper>\n        )\n    }\n}\nToolbar.propTypes = {\n    assignedToMeFilter: propTypes.bool,\n    checkedOptions: propTypes.bool,\n    clearCheckedIds: propTypes.func,\n    displayExtendedChoices: propTypes.bool,\n    id: propTypes.string,\n    loadMessageConversations: propTypes.func,\n    markedForFollowUpFilter: propTypes.bool,\n    messageFilter: propTypes.string,\n    priorityFilter: propTypes.string,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setFilter: propTypes.func,\n    statusFilter: propTypes.string,\n    toogleWideview: propTypes.func,\n    unreadFilter: propTypes.bool,\n    wideview: propTypes.bool,\n}\n\nexport default Toolbar\n","import React, { Component } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport { connect } from 'react-redux'\nimport { compose } from 'recompose'\nimport Subheader from 'material-ui/Subheader/Subheader'\nimport MailIcon from 'material-ui-icons/MailOutline'\nimport i18n from '@dhis2/d2-i18n'\nimport * as api from '../../api/api'\nimport {\n    loadMessageConversations,\n    setIsInFeedbackRecipientGroup,\n    clearCheckedIds,\n    setSelectedMessageConversation,\n    setSelectedMessageType,\n    clearSelectedMessageConversation,\n    updateInputFields,\n    setFilter,\n    setDisplayTimeDiff,\n    clearAttachments,\n    setDhis2CoreVersion,\n} from '../../actions'\nimport theme from '../../styles/theme'\nimport MessageConversation from '../MessageConversation/MessageConversation'\nimport SidebarList from '../List/SidebarList'\nimport MessageConversationList from '../List/MessageConversationList'\nimport CreateMessage from '../MessageConversation/CreateMessage'\nimport Toolbar from '../Common/Toolbar'\nimport { subheader } from '../../styles/style'\nimport './MessagingCenter.css'\n\nconst EXTENDED_CHOICES = ['TICKET', 'VALIDATION_RESULT']\nconst refreshTimerTotal = 300000 // 5 minutes\nconst refreshTimerInterval = 10000 // 10 seconds\n\nclass MessagingCenter extends Component {\n    constructor(props) {\n        super(props)\n\n        this.intervalId = null\n        this.state = {\n            autoRefresh: false,\n            checkedItems: false,\n            refreshTimer: refreshTimerTotal,\n            wideview: true,\n        }\n    }\n\n    componentDidMount() {\n        const selectedMessageType = this.props.match.params.messageType\n        const selectedId = this.props.match.params.messageId\n\n        this.props.setDhis2CoreVersion(this.context.d2.system.version.minor)\n\n        if (\n            selectedId &&\n            selectedId !== selectedMessageType &&\n            selectedId !== 'create'\n        ) {\n            const initialMessageConversation = { id: selectedId }\n            this.props.setSelectedMessageConversation(\n                initialMessageConversation\n            )\n        }\n\n        api.isInFeedbackRecipientGroup().then(result =>\n            this.props.setIsInFeedbackRecipientGroup(result)\n        )\n\n        this.props.messageTypes.map(messageType =>\n            this.props.loadMessageConversations(\n                messageType,\n                selectedMessageType\n            )\n        )\n\n        this.props.setDisplayTimeDiff()\n    }\n\n    componentDidUpdate() {\n        const selectedMessageType = this.props.match.params.messageType\n        const selectedId = this.props.match.params.messageId\n\n        if (\n            !this.props.settingSelectedMessageConversation &&\n            selectedId &&\n            selectedMessageType !== selectedId &&\n            selectedId !== 'create' &&\n            (this.props.selectedMessageConversation === undefined ||\n                selectedId !== this.props.selectedMessageConversation.id)\n        ) {\n            const initialMessageConversation = { id: selectedId }\n            this.props.setSelectedMessageConversation(\n                initialMessageConversation\n            )\n        }\n\n        if (\n            selectedMessageType === selectedId &&\n            selectedMessageType !== this.props.selectedMessageType.id\n        ) {\n            this.props.setSelectedMessageType(selectedMessageType)\n        }\n\n        if (\n            (selectedMessageType === selectedId || selectedId === 'create') &&\n            this.props.selectedMessageConversation !== undefined\n        ) {\n            this.props.clearSelectedMessageConversation()\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.intervalId) {\n            clearInterval(this.intervalId)\n        }\n    }\n\n    setAutoRefresh = autoRefresh => {\n        // Cancel existing interval if it shouldn't autorefresh\n        if (!autoRefresh && this.intervalId) {\n            clearInterval(this.intervalId)\n            this.intervalId = null\n        }\n\n        if (autoRefresh) {\n            this.intervalId = setInterval(this.tick, refreshTimerInterval)\n        }\n\n        this.setState({\n            autoRefresh,\n            refreshTimer: refreshTimerTotal,\n        })\n    }\n\n    tick = () => {\n        const timerHasElapsed =\n            this.state.refreshTimer - refreshTimerInterval <= 0\n\n        if (timerHasElapsed) {\n            this.refresh()\n            this.setState({\n                refreshTimer: refreshTimerTotal,\n            })\n        } else {\n            this.setState(prevState => ({\n                refreshTimer: prevState.refreshTimer - refreshTimerInterval,\n            }))\n        }\n    }\n\n    refresh = () => {\n        this.props.messageTypes.map(messageType =>\n            this.props.loadMessageConversations(\n                messageType,\n                this.props.selectedMessageType\n            )\n        )\n\n        if (this.props.selectedMessageConversation) {\n            this.props.setSelectedMessageConversation(\n                this.props.selectedMessageConversation\n            )\n        }\n    }\n\n    toogleWideview = () => {\n        this.setState({ wideview: !this.state.wideview })\n    }\n\n    render() {\n        const id = this.props.match.params.messageId\n\n        const displayExtendedChoices =\n            (this.props.selectedMessageType\n                ? !!(\n                      EXTENDED_CHOICES.indexOf(\n                          this.props.selectedMessageType.id\n                      ) + 1\n                  )\n                : false) && this.props.isInFeedbackRecipientGroup\n\n        return (\n            <div className=\"messaging-center\">\n                <Toolbar\n                    {...this.props}\n                    id={id}\n                    wideview={this.state.wideview}\n                    displayExtendedChoices={displayExtendedChoices}\n                    toogleWideview={this.toogleWideview}\n                />\n                <div className=\"messaging-center__main-content\">\n                    <SidebarList\n                        {...this.props}\n                        drawerOpen={this.state.drawerOpen}\n                        messageTypes={this.props.messageTypes}\n                        autoRefresh={this.state.autoRefresh}\n                        refreshTimer={this.state.refreshTimer}\n                        setAutoRefresh={this.setAutoRefresh}\n                    />\n\n                    {this.props.selectedMessageConversation === undefined &&\n                        !(this.state.wideview && id === 'create') && (\n                            <MessageConversationList\n                                wideview={this.state.wideview}\n                                displayExtendedChoices={\n                                    displayExtendedChoices &&\n                                    this.state.wideview\n                                }\n                            />\n                        )}\n\n                    {id === 'create' && (\n                        <CreateMessage\n                            {...this.props}\n                            wideview={this.state.wideview}\n                        />\n                    )}\n\n                    {this.props.selectedMessageConversation !== undefined &&\n                        !this.state.wideview && (\n                            <MessageConversationList\n                                wideview={this.state.wideview}\n                                displayExtendedChoices={\n                                    displayExtendedChoices &&\n                                    this.state.wideview\n                                }\n                            />\n                        )}\n\n                    {this.props.selectedMessageConversation && id !== 'create'\n                        ? this.props.selectedMessageConversation !==\n                              undefined && (\n                              <MessageConversation\n                                  {...this.props}\n                                  messageConversation={\n                                      this.props.selectedMessageConversation\n                                  }\n                                  wideview={this.state.wideview}\n                                  disableLink\n                                  displayExtendedChoices={\n                                      displayExtendedChoices\n                                  }\n                              />\n                          )\n                        : !this.state.wideview &&\n                          id !== 'create' && (\n                              <div className=\"messaging-center__no-message-selected\">\n                                  <Subheader style={subheader}>\n                                      {i18n.t('Select a message')}\n                                  </Subheader>\n                                  <MailIcon\n                                      style={{\n                                          color: theme.palette.primary1Color,\n                                          width: 120,\n                                          height: 120,\n                                      }}\n                                  />\n                              </div>\n                          )}\n                </div>\n            </div>\n        )\n    }\n}\n\nMessagingCenter.propTypes = {\n    clearSelectedMessageConversation: propTypes.func,\n    isInFeedbackRecipientGroup: propTypes.bool,\n    loadMessageConversations: propTypes.func,\n    match: propTypes.object,\n    messageTypes: propTypes.array,\n    selectedMessageConversation: propTypes.object,\n    selectedMessageType: propTypes.object,\n    setDhis2CoreVersion: propTypes.func,\n    setDisplayTimeDiff: propTypes.func,\n    setIsInFeedbackRecipientGroup: propTypes.func,\n    setSelectedMessageConversation: propTypes.func,\n    setSelectedMessageType: propTypes.func,\n    settingSelectedMessageConversation: propTypes.bool,\n}\n\nMessagingCenter.contextTypes = {\n    d2: propTypes.object,\n}\n\nconst mapStateToProps = state => ({\n    snackMessage: state.messaging.snackMessage,\n    messageTypes: state.messaging.messageTypes,\n    messageConversations: state.messaging.messageConversations,\n    messageFilter: state.messaging.messageFilter,\n    statusFilter: state.messaging.statusFilter,\n    priorityFilter: state.messaging.priorityFilter,\n    assignedToMeFilter: state.messaging.assignedToMeFilter,\n    markedForFollowUpFilter: state.messaging.markedForFollowUpFilter,\n    unreadFilter: state.messaging.unreadFilter,\n    selectedMessageType: state.messaging.selectedMessageType,\n    selectedMessageConversation: state.messaging.selectedMessageConversation,\n    settingSelectedMessageConversation:\n        state.messaging.settingSelectedMessageConversation,\n    checkedIds: state.messaging.checkedIds,\n    checkedOptions: state.messaging.checkedIds.length > 0,\n    loaded: state.messaging.loaded,\n    isInFeedbackRecipientGroup: state.messaging.isInFeedbackRecipientGroup,\n    attachments: state.messaging.attachments,\n})\n\nexport default compose(\n    connect(\n        mapStateToProps,\n        {\n            loadMessageConversations,\n            setIsInFeedbackRecipientGroup,\n            clearCheckedIds,\n            setSelectedMessageConversation,\n            setSelectedMessageType,\n            clearSelectedMessageConversation,\n            updateInputFields,\n            setFilter,\n            setDisplayTimeDiff,\n            clearAttachments,\n            setDhis2CoreVersion,\n        },\n        null,\n        { pure: false }\n    )\n)(MessagingCenter)\n","import { Router, Route } from 'react-router-dom'\nimport { Redirect } from 'react-router'\nimport React from 'react'\nimport MessagingCenter from '../MessagingCenter/MessagingCenter'\nimport history from '../../utils/history'\n\nconst Routes = () => (\n    <Router history={history}>\n        <div>\n            <Route\n                exact\n                path=\"/\"\n                component={() => <Redirect to=\"/PRIVATE\" />}\n            />\n            <Route\n                path=\"/:messageType/:messageId?/:recipientId?\"\n                component={MessagingCenter}\n            />\n        </div>\n    </Router>\n)\n\nexport default Routes\n","import React, { useEffect } from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport cx from 'classnames'\nimport { connect } from 'react-redux'\nimport { CircularProgress } from 'material-ui'\n\nimport CustomSnackBar from '../Common/CustomSnackBar'\nimport Routes from './Routes'\nimport { setCurrentUser } from '../../actions'\n\nimport classes from './App.module.css'\n\nconst App = ({ currentUser, setCurrentUser }) => {\n    const { loading, error } = currentUser\n\n    useEffect(() => {\n        setCurrentUser()\n    }, [])\n\n    if (loading) {\n        return (\n            <div className={classes.center}>\n                <CircularProgress size={48} />\n            </div>\n        )\n    }\n\n    if (error) {\n        return <div className={cx(classes.center, classes.error)}>{error}</div>\n    }\n\n    return (\n        <div>\n            <CustomSnackBar />\n            <Routes />\n        </div>\n    )\n}\n\nApp.propTypes = {\n    currentUser: propTypes.object.isRequired,\n    setCurrentUser: propTypes.func.isRequired,\n}\n\nexport default connect(\n    state => ({\n        currentUser: state.messaging.currentUser,\n    }),\n    {\n        setCurrentUser,\n    }\n)(App)\n","const messageTypes = [{\n  id: 'PRIVATE',\n  displayName: 'Inbox',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'VALIDATION_RESULT',\n  displayName: 'Validation',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'TICKET',\n  displayName: 'Ticket',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}, {\n  id: 'SYSTEM',\n  displayName: 'System',\n  unread: 0,\n  loaded: 0,\n  loading: false,\n  total: 0,\n  page: 1\n}];\nexport default messageTypes;","import i18n from '@dhis2/d2-i18n';\nimport log from 'loglevel';\nimport * as actions from '../constants/actions';\nimport messageTypes from '../constants/messageTypes';\nimport { POSITIVE, NEGATIVE, NEUTRAL } from '../constants/development';\nimport { findIndexOfId } from '../utils/helpers';\nexport const initialState = {\n  currentUser: {\n    loading: false,\n    error: null,\n    id: null,\n    authorities: null\n  },\n  // Message conversation\n  messageConversations: {},\n  messageTypes,\n  selectedMessageType: undefined,\n  selectedMessageConversation: undefined,\n  settingSelectedMessageConversation: false,\n  checkedIds: [],\n  messageFilter: undefined,\n  statusFilter: undefined,\n  priorityFilter: undefined,\n  assignedToMeFilter: false,\n  markedForFollowUpFilter: false,\n  unreadFilter: false,\n  isInFeedbackRecipientGroup: false,\n  feedbackRecipientsId: undefined,\n  displayTimeDiff: 0,\n  // Input for create and reply\n  subject: '',\n  input: '',\n  recipients: [],\n  // Attachments\n  attachments: [],\n  // Snackbar\n  snackMessage: '',\n  onSnackActionClick: undefined,\n  onSnackRequestClose: undefined,\n  snackType: NEUTRAL\n};\n\nfunction messageReducer(state = initialState, action) {\n  const stateMessageTypes = state.messageTypes;\n  const oldAttachments = state.attachments;\n\n  switch (action.type) {\n    case actions.SET_CURRENT_USER:\n      return { ...state,\n        currentUser: {\n          loading: true,\n          error: null,\n          id: null,\n          authorities: null\n        }\n      };\n\n    case actions.SET_CURRENT_USER_SUCCESS:\n      return { ...state,\n        currentUser: {\n          loading: false,\n          error: null,\n          id: action.payload.id,\n          authorities: action.payload.authorities\n        }\n      };\n\n    case actions.SET_CURRENT_USER_ERROR:\n      return { ...state,\n        currentUser: {\n          loading: false,\n          error: action.payload,\n          id: null,\n          authorities: null\n        }\n      };\n\n    case actions.SET_DISPLAY_TIME_DIFF_SUCCESS:\n      return { ...state,\n        displayTimeDiff: action.payload,\n        error: action.payload,\n        id: null,\n        authorities: null\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_LOAD_SUCCESS:\n      {\n        const replaceMessageType = stateMessageTypes.find(type => type.id === action.payload.messageType.id);\n        replaceMessageType.loaded = action.payload.messageConversations.length;\n        replaceMessageType.total = action.payload.pager.total;\n        replaceMessageType.unread = action.payload.nrOfUnread;\n        replaceMessageType.page = action.payload.pager.page;\n        replaceMessageType.loading = false;\n        messageTypes.splice([findIndexOfId(stateMessageTypes, replaceMessageType.id)], 1, replaceMessageType);\n        const setSelectedMessageType = action.payload.selectedMessageType === replaceMessageType.id && (action.payload.selectedMessageType === state.selectedMessageType || state.selectedMessageType === undefined);\n        return { ...state,\n          messageTypes,\n          messageConversations: { ...state.messageConversations,\n            [replaceMessageType.id]: action.payload.messageConversations\n          },\n          selectedMessageType: setSelectedMessageType ? replaceMessageType : state.selectedMessageType\n        };\n      }\n\n    case actions.MESSAGE_CONVERSATION_UPDATE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATION_UPDATE_SUCCESS:\n      {\n        let snackMessage = '';\n\n        switch (action.payload.identifier) {\n          case 'STATUS':\n            snackMessage = i18n.t('Successfully updated status');\n            break;\n\n          case 'PRIORITY':\n            snackMessage = i18n.t('Successfully updated priority');\n            break;\n\n          case 'ASSIGNEE':\n            snackMessage = i18n.t('Successfully updated assignee');\n            break;\n\n          case 'FOLLOW_UP':\n            snackMessage = i18n.t('Successfully changed followup');\n            break;\n\n          default:\n            log.error('Unexpected identifier for updateMessageConversations success');\n            break;\n        }\n\n        return { ...state,\n          snackMessage,\n          snackType: POSITIVE\n        };\n      }\n\n    case actions.SEND_MESSAGE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_DELETE_ERROR:\n      return { ...state,\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.MESSAGE_CONVERSATIONS_DELETE_SUCCESS:\n      return { ...state,\n        snackMessage: i18n.t('Successfully deleted message conversation(s)'),\n        snackType: POSITIVE\n      };\n\n    case actions.DISPLAY_SNACK_MESSAGE:\n      return { ...state,\n        snackMessage: action.payload.message,\n        snackType: action.payload.snackType,\n        onSnackActionClick: action.payload.onSnackActionClick,\n        onSnackRequestClose: action.payload.onSnackRequestClose\n      };\n\n    case actions.CLEAR_SNACK_MESSAGE:\n      return { ...state,\n        snackMessage: '',\n        snackType: NEUTRAL\n      };\n\n    case actions.SET_CHECKED:\n      {\n        const messageConversation = action.payload.messageConversation;\n        let checkedIds = state.checkedIds;\n\n        if (action.payload.selectedValue) {\n          checkedIds.push(messageConversation);\n        } else {\n          checkedIds = checkedIds.filter(element => element.id !== messageConversation.id);\n        }\n\n        return { ...state,\n          checkedIds\n        };\n      }\n\n    case actions.SET_ALL_CHECKED:\n      return { ...state,\n        checkedIds: action.payload.messageConversationIds\n      };\n\n    case actions.CLEAR_CHECKED:\n      return { ...state,\n        checkedIds: []\n      };\n\n    case actions.SET_SELECTED_MESSAGE_CONVERSATION_SUCCESS:\n      return { ...state,\n        selectedMessageConversation: action.payload.messageConversation,\n        settingSelectedMessageConversation: false\n      };\n\n    case actions.SET_SELECTED_MESSAGE_CONVERSATION:\n      return { ...state,\n        settingSelectedMessageConversation: true\n      };\n\n    case actions.CLEAR_SELECTED_MESSAGE_CONVERSATION:\n      return { ...state,\n        selectedMessageConversation: undefined\n      };\n\n    case actions.SET_SELECTED_MESSAGE_TYPE:\n      return { ...state,\n        checkedIds: [],\n        selectedMessageType: stateMessageTypes.find(type => type.id === action.payload.messageTypeId),\n        selectedMessageConversations: state.messageConversations[action.payload.messageTypeId],\n        selectedMessageConversation: undefined\n      };\n\n    case actions.UPDATE_INPUT_FIELDS:\n      return { ...state,\n        subject: action.payload.subject,\n        input: action.payload.input,\n        recipients: action.payload.recipients\n      };\n\n    case actions.ADD_RECIPIENT_BY_ID_SUCCESS:\n      return { ...state,\n        recipients: [...state.recipients, action.payload]\n      };\n\n    case actions.SET_FILTER:\n      return { ...state,\n        messageFilter: action.payload.filterType === 'MESSAGE' ? action.payload.filter : state.messageFilter,\n        statusFilter: action.payload.filterType === 'STATUS' ? action.payload.filter : state.statusFilter,\n        priorityFilter: action.payload.filterType === 'PRIORITY' ? action.payload.filter : state.priorityFilter,\n        assignedToMeFilter: action.payload.filterType === 'ASSIGNED_TO_ME' ? action.payload.filter : state.assignedToMeFilter,\n        markedForFollowUpFilter: action.payload.filterType === 'MARKED_FOR_FOLLOWUP' ? action.payload.filter : state.markedForFollowUpFilter,\n        unreadFilter: action.payload.filterType === 'UNREAD' ? action.payload.filter : state.unreadFilter\n      };\n\n    case actions.LOAD_MESSAGE_CONVERSATIONS:\n      {\n        const loadingMessageType = action.payload.messageType;\n        loadingMessageType.loading = true;\n\n        if (action.payload.loadMore) {\n          loadingMessageType.page++;\n        }\n\n        messageTypes[findIndexOfId(messageTypes, loadingMessageType.id)] = loadingMessageType; // TODO: This can probably be removed because action.payload.messageType === state.selectedMessageType\n\n        const selectedMessageType = state.selectedMessageType;\n\n        if (selectedMessageType) {\n          selectedMessageType.loading = true;\n\n          if (action.payload.loadMore) {\n            selectedMessageType.page++;\n          }\n        }\n\n        return { ...state,\n          messageTypes,\n          selectedMessageType\n        };\n      }\n\n    case actions.SET_IN_FEEDBACK_RECIPIENT_GROUP:\n      return { ...state,\n        isInFeedbackRecipientGroup: action.payload.isInFeedbackRecipientGroup.authorized,\n        feedbackRecipientsId: action.payload.isInFeedbackRecipientGroup.feedbackRecipientsId\n      };\n\n    case actions.ADD_ATTACHMENT_SUCCESS:\n      return { ...state,\n        attachments: state.attachments.map(attachment => attachment.name === action.payload.name ? {\n          id: action.payload.id,\n          name: attachment.name,\n          contentLength: attachment.contentLength,\n          loading: false\n        } : attachment)\n      };\n\n    case actions.ADD_ATTACHMENT_ERROR:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.id !== action.payload.attachmentId),\n        snackMessage: action.payload.error.message,\n        snackType: NEGATIVE\n      };\n\n    case actions.ADD_ATTACHMENT:\n      return { ...state,\n        attachments: state.attachments.concat({\n          name: action.payload.name,\n          contentLength: action.payload.size,\n          loading: true\n        })\n      };\n\n    case actions.REMOVE_ATTACHMENT:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.id !== action.payload.attachmentId)\n      };\n\n    case actions.CANCEL_ATTACHMENT:\n      return { ...state,\n        attachments: oldAttachments.filter(attachment => attachment.name !== action.payload.attachmentName)\n      };\n\n    case actions.CLEAR_ATTACHMENTS:\n      return { ...state,\n        attachments: []\n      };\n\n    case actions.SET_DHIS2_CORE_VERSION:\n      return { ...state,\n        dhis2CoreVersion: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default messageReducer;","import { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport messageReducer from './reducers/messageReducer';\nconst middlewares = [ReduxThunk];\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst reducer = combineReducers({\n  messaging: messageReducer\n});\nexport default createStore(reducer, composeEnhancers(applyMiddleware(...middlewares)));","import React from 'react'\nimport propTypes from '@dhis2/prop-types'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\nimport theme from '../../styles/theme'\n\nclass AddD2Context extends React.Component {\n    getChildContext = () => ({\n        d2: this.props.d2,\n    })\n\n    render = () => (\n        <MuiThemeProvider muiTheme={theme}>\n            {this.props.children}\n        </MuiThemeProvider>\n    )\n}\n\nAddD2Context.propTypes = {\n    children: propTypes.object.isRequired,\n    d2: propTypes.object,\n}\n\nAddD2Context.childContextTypes = {\n    d2: propTypes.object,\n}\n\nexport default AddD2Context\n","import React from 'react'\nimport { useConfig, useDataEngine } from '@dhis2/app-runtime'\nimport { useD2 } from '@dhis2/app-runtime-adapter-d2'\nimport { CircularProgress } from 'material-ui'\nimport { Provider } from 'react-redux'\n\nimport App from './App'\nimport store from '../../store'\nimport { setEngine } from '../../api/api'\nimport AddD2Context from './AddD2Context'\n\nimport '../../index.css'\nimport 'typeface-roboto'\n\nconst AppWrapper = () => {\n    const { baseUrl } = useConfig()\n    const engine = useDataEngine()\n    const { d2 } = useD2({\n        d2Config: {\n            schemas: ['messageConversation'],\n            // This app prefers doing unversioned API calls\n            baseUrl: `${baseUrl}/api`,\n        },\n    })\n\n    if (!d2) {\n        return (\n            <AddD2Context>\n                <div className=\"page-loader-wrap\">\n                    <CircularProgress size={48} />\n                </div>\n            </AddD2Context>\n        )\n    }\n\n    // This makes the engine instance available in the api module\n    setEngine(engine)\n\n    return (\n        <Provider store={store}>\n            <AddD2Context d2={d2}>\n                <App />\n            </AddD2Context>\n        </Provider>\n    )\n}\n\nexport default AppWrapper\n"],"sourceRoot":""}